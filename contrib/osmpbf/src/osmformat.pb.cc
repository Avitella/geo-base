// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmformat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osmformat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace osmpbf {

void protobuf_ShutdownFile_osmformat_2eproto() {
  delete header_block_t::default_instance_;
  delete header_bbox_t::default_instance_;
  delete primitive_block_t::default_instance_;
  delete primitive_group_t::default_instance_;
  delete string_table_t::default_instance_;
  delete info_t::default_instance_;
  delete dense_info_t::default_instance_;
  delete change_set_t::default_instance_;
  delete node_t::default_instance_;
  delete dense_nodes_t::default_instance_;
  delete way_t::default_instance_;
  delete relation_t::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_osmformat_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_osmformat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  header_block_t::default_instance_ = new header_block_t();
  header_bbox_t::default_instance_ = new header_bbox_t();
  primitive_block_t::default_instance_ = new primitive_block_t();
  primitive_group_t::default_instance_ = new primitive_group_t();
  string_table_t::default_instance_ = new string_table_t();
  info_t::default_instance_ = new info_t();
  dense_info_t::default_instance_ = new dense_info_t();
  change_set_t::default_instance_ = new change_set_t();
  node_t::default_instance_ = new node_t();
  dense_nodes_t::default_instance_ = new dense_nodes_t();
  way_t::default_instance_ = new way_t();
  relation_t::default_instance_ = new relation_t();
  header_block_t::default_instance_->InitAsDefaultInstance();
  header_bbox_t::default_instance_->InitAsDefaultInstance();
  primitive_block_t::default_instance_->InitAsDefaultInstance();
  primitive_group_t::default_instance_->InitAsDefaultInstance();
  string_table_t::default_instance_->InitAsDefaultInstance();
  info_t::default_instance_->InitAsDefaultInstance();
  dense_info_t::default_instance_->InitAsDefaultInstance();
  change_set_t::default_instance_->InitAsDefaultInstance();
  node_t::default_instance_->InitAsDefaultInstance();
  dense_nodes_t::default_instance_->InitAsDefaultInstance();
  way_t::default_instance_->InitAsDefaultInstance();
  relation_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osmformat_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_osmformat_2eproto_once_);
void protobuf_AddDesc_osmformat_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_osmformat_2eproto_once_,
                 &protobuf_AddDesc_osmformat_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osmformat_2eproto {
  StaticDescriptorInitializer_osmformat_2eproto() {
    protobuf_AddDesc_osmformat_2eproto();
  }
} static_descriptor_initializer_osmformat_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int header_block_t::kBboxFieldNumber;
const int header_block_t::kRequiredFeaturesFieldNumber;
const int header_block_t::kOptionalFeaturesFieldNumber;
const int header_block_t::kWritingprogramFieldNumber;
const int header_block_t::kSourceFieldNumber;
const int header_block_t::kOsmosisReplicationTimestampFieldNumber;
const int header_block_t::kOsmosisReplicationSequenceNumberFieldNumber;
const int header_block_t::kOsmosisReplicationBaseUrlFieldNumber;
#endif  // !_MSC_VER

header_block_t::header_block_t()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osmpbf.header_block_t)
}

void header_block_t::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bbox_ = const_cast< ::osmpbf::header_bbox_t*>(
      ::osmpbf::header_bbox_t::internal_default_instance());
#else
  bbox_ = const_cast< ::osmpbf::header_bbox_t*>(&::osmpbf::header_bbox_t::default_instance());
#endif
}

header_block_t::header_block_t(const header_block_t& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osmpbf.header_block_t)
}

void header_block_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bbox_ = NULL;
  writingprogram_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osmosis_replication_timestamp_ = GOOGLE_LONGLONG(0);
  osmosis_replication_sequence_number_ = GOOGLE_LONGLONG(0);
  osmosis_replication_base_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

header_block_t::~header_block_t() {
  // @@protoc_insertion_point(destructor:osmpbf.header_block_t)
  SharedDtor();
}

void header_block_t::SharedDtor() {
  if (writingprogram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete writingprogram_;
  }
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (osmosis_replication_base_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete osmosis_replication_base_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete bbox_;
  }
}

void header_block_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const header_block_t& header_block_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmformat_2eproto();
#endif
  return *default_instance_;
}

header_block_t* header_block_t::default_instance_ = NULL;

header_block_t* header_block_t::New() const {
  return new header_block_t;
}

void header_block_t::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<header_block_t*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 249) {
    ZR_(osmosis_replication_timestamp_, osmosis_replication_sequence_number_);
    if (has_bbox()) {
      if (bbox_ != NULL) bbox_->::osmpbf::header_bbox_t::Clear();
    }
    if (has_writingprogram()) {
      if (writingprogram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        writingprogram_->clear();
      }
    }
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    if (has_osmosis_replication_base_url()) {
      if (osmosis_replication_base_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        osmosis_replication_base_url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  required_features_.Clear();
  optional_features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool header_block_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:osmpbf.header_block_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .osmpbf.header_bbox_t bbox = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_required_features;
        break;
      }

      // repeated string required_features = 4;
      case 4: {
        if (tag == 34) {
         parse_required_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_required_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_required_features;
        if (input->ExpectTag(42)) goto parse_optional_features;
        break;
      }

      // repeated string optional_features = 5;
      case 5: {
        if (tag == 42) {
         parse_optional_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_optional_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_optional_features;
        if (input->ExpectTag(130)) goto parse_writingprogram;
        break;
      }

      // optional string writingprogram = 16;
      case 16: {
        if (tag == 130) {
         parse_writingprogram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_writingprogram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_source;
        break;
      }

      // optional string source = 17;
      case 17: {
        if (tag == 138) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_osmosis_replication_timestamp;
        break;
      }

      // optional int64 osmosis_replication_timestamp = 32;
      case 32: {
        if (tag == 256) {
         parse_osmosis_replication_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &osmosis_replication_timestamp_)));
          set_has_osmosis_replication_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_osmosis_replication_sequence_number;
        break;
      }

      // optional int64 osmosis_replication_sequence_number = 33;
      case 33: {
        if (tag == 264) {
         parse_osmosis_replication_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &osmosis_replication_sequence_number_)));
          set_has_osmosis_replication_sequence_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_osmosis_replication_base_url;
        break;
      }

      // optional string osmosis_replication_base_url = 34;
      case 34: {
        if (tag == 274) {
         parse_osmosis_replication_base_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osmosis_replication_base_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osmpbf.header_block_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osmpbf.header_block_t)
  return false;
#undef DO_
}

void header_block_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osmpbf.header_block_t)
  // optional .osmpbf.header_bbox_t bbox = 1;
  if (has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bbox(), output);
  }

  // repeated string required_features = 4;
  for (int i = 0; i < this->required_features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->required_features(i), output);
  }

  // repeated string optional_features = 5;
  for (int i = 0; i < this->optional_features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->optional_features(i), output);
  }

  // optional string writingprogram = 16;
  if (has_writingprogram()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->writingprogram(), output);
  }

  // optional string source = 17;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->source(), output);
  }

  // optional int64 osmosis_replication_timestamp = 32;
  if (has_osmosis_replication_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->osmosis_replication_timestamp(), output);
  }

  // optional int64 osmosis_replication_sequence_number = 33;
  if (has_osmosis_replication_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->osmosis_replication_sequence_number(), output);
  }

  // optional string osmosis_replication_base_url = 34;
  if (has_osmosis_replication_base_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->osmosis_replication_base_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:osmpbf.header_block_t)
}

int header_block_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .osmpbf.header_bbox_t bbox = 1;
    if (has_bbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bbox());
    }

    // optional string writingprogram = 16;
    if (has_writingprogram()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->writingprogram());
    }

    // optional string source = 17;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional int64 osmosis_replication_timestamp = 32;
    if (has_osmosis_replication_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->osmosis_replication_timestamp());
    }

    // optional int64 osmosis_replication_sequence_number = 33;
    if (has_osmosis_replication_sequence_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->osmosis_replication_sequence_number());
    }

    // optional string osmosis_replication_base_url = 34;
    if (has_osmosis_replication_base_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osmosis_replication_base_url());
    }

  }
  // repeated string required_features = 4;
  total_size += 1 * this->required_features_size();
  for (int i = 0; i < this->required_features_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->required_features(i));
  }

  // repeated string optional_features = 5;
  total_size += 1 * this->optional_features_size();
  for (int i = 0; i < this->optional_features_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->optional_features(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void header_block_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const header_block_t*>(&from));
}

void header_block_t::MergeFrom(const header_block_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  required_features_.MergeFrom(from.required_features_);
  optional_features_.MergeFrom(from.optional_features_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bbox()) {
      mutable_bbox()->::osmpbf::header_bbox_t::MergeFrom(from.bbox());
    }
    if (from.has_writingprogram()) {
      set_writingprogram(from.writingprogram());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_osmosis_replication_timestamp()) {
      set_osmosis_replication_timestamp(from.osmosis_replication_timestamp());
    }
    if (from.has_osmosis_replication_sequence_number()) {
      set_osmosis_replication_sequence_number(from.osmosis_replication_sequence_number());
    }
    if (from.has_osmosis_replication_base_url()) {
      set_osmosis_replication_base_url(from.osmosis_replication_base_url());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void header_block_t::CopyFrom(const header_block_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool header_block_t::IsInitialized() const {

  if (has_bbox()) {
    if (!this->bbox().IsInitialized()) return false;
  }
  return true;
}

void header_block_t::Swap(header_block_t* other) {
  if (other != this) {
    std::swap(bbox_, other->bbox_);
    required_features_.Swap(&other->required_features_);
    optional_features_.Swap(&other->optional_features_);
    std::swap(writingprogram_, other->writingprogram_);
    std::swap(source_, other->source_);
    std::swap(osmosis_replication_timestamp_, other->osmosis_replication_timestamp_);
    std::swap(osmosis_replication_sequence_number_, other->osmosis_replication_sequence_number_);
    std::swap(osmosis_replication_base_url_, other->osmosis_replication_base_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string header_block_t::GetTypeName() const {
  return "osmpbf.header_block_t";
}


// ===================================================================

#ifndef _MSC_VER
const int header_bbox_t::kLeftFieldNumber;
const int header_bbox_t::kRightFieldNumber;
const int header_bbox_t::kTopFieldNumber;
const int header_bbox_t::kBottomFieldNumber;
#endif  // !_MSC_VER

header_bbox_t::header_bbox_t()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osmpbf.header_bbox_t)
}

void header_bbox_t::InitAsDefaultInstance() {
}

header_bbox_t::header_bbox_t(const header_bbox_t& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osmpbf.header_bbox_t)
}

void header_bbox_t::SharedCtor() {
  _cached_size_ = 0;
  left_ = GOOGLE_LONGLONG(0);
  right_ = GOOGLE_LONGLONG(0);
  top_ = GOOGLE_LONGLONG(0);
  bottom_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

header_bbox_t::~header_bbox_t() {
  // @@protoc_insertion_point(destructor:osmpbf.header_bbox_t)
  SharedDtor();
}

void header_bbox_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void header_bbox_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const header_bbox_t& header_bbox_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmformat_2eproto();
#endif
  return *default_instance_;
}

header_bbox_t* header_bbox_t::default_instance_ = NULL;

header_bbox_t* header_bbox_t::New() const {
  return new header_bbox_t;
}

void header_bbox_t::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<header_bbox_t*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(left_, bottom_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool header_bbox_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:osmpbf.header_bbox_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 left = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }

      // required sint64 right = 2;
      case 2: {
        if (tag == 16) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }

      // required sint64 top = 3;
      case 3: {
        if (tag == 24) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }

      // required sint64 bottom = 4;
      case 4: {
        if (tag == 32) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osmpbf.header_bbox_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osmpbf.header_bbox_t)
  return false;
#undef DO_
}

void header_bbox_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osmpbf.header_bbox_t)
  // required sint64 left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->left(), output);
  }

  // required sint64 right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->right(), output);
  }

  // required sint64 top = 3;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->top(), output);
  }

  // required sint64 bottom = 4;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->bottom(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:osmpbf.header_bbox_t)
}

int header_bbox_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->left());
    }

    // required sint64 right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->right());
    }

    // required sint64 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->top());
    }

    // required sint64 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->bottom());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void header_bbox_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const header_bbox_t*>(&from));
}

void header_bbox_t::MergeFrom(const header_bbox_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void header_bbox_t::CopyFrom(const header_bbox_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool header_bbox_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void header_bbox_t::Swap(header_bbox_t* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string header_bbox_t::GetTypeName() const {
  return "osmpbf.header_bbox_t";
}


// ===================================================================

#ifndef _MSC_VER
const int primitive_block_t::kStringTableFieldNumber;
const int primitive_block_t::kPrimitiveGroupFieldNumber;
const int primitive_block_t::kGranularityFieldNumber;
const int primitive_block_t::kLatOffsetFieldNumber;
const int primitive_block_t::kLonOffsetFieldNumber;
const int primitive_block_t::kDateGranularityFieldNumber;
#endif  // !_MSC_VER

primitive_block_t::primitive_block_t()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osmpbf.primitive_block_t)
}

void primitive_block_t::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  string_table_ = const_cast< ::osmpbf::string_table_t*>(
      ::osmpbf::string_table_t::internal_default_instance());
#else
  string_table_ = const_cast< ::osmpbf::string_table_t*>(&::osmpbf::string_table_t::default_instance());
#endif
}

primitive_block_t::primitive_block_t(const primitive_block_t& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osmpbf.primitive_block_t)
}

void primitive_block_t::SharedCtor() {
  _cached_size_ = 0;
  string_table_ = NULL;
  granularity_ = 100;
  lat_offset_ = GOOGLE_LONGLONG(0);
  lon_offset_ = GOOGLE_LONGLONG(0);
  date_granularity_ = 1000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

primitive_block_t::~primitive_block_t() {
  // @@protoc_insertion_point(destructor:osmpbf.primitive_block_t)
  SharedDtor();
}

void primitive_block_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete string_table_;
  }
}

void primitive_block_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const primitive_block_t& primitive_block_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmformat_2eproto();
#endif
  return *default_instance_;
}

primitive_block_t* primitive_block_t::default_instance_ = NULL;

primitive_block_t* primitive_block_t::New() const {
  return new primitive_block_t;
}

void primitive_block_t::Clear() {
  if (_has_bits_[0 / 32] & 61) {
    if (has_string_table()) {
      if (string_table_ != NULL) string_table_->::osmpbf::string_table_t::Clear();
    }
    granularity_ = 100;
    lat_offset_ = GOOGLE_LONGLONG(0);
    lon_offset_ = GOOGLE_LONGLONG(0);
    date_granularity_ = 1000;
  }
  primitive_group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool primitive_block_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:osmpbf.primitive_block_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .osmpbf.string_table_t string_table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_primitive_group;
        break;
      }

      // repeated .osmpbf.primitive_group_t primitive_group = 2;
      case 2: {
        if (tag == 18) {
         parse_primitive_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_primitive_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_primitive_group;
        if (input->ExpectTag(136)) goto parse_granularity;
        break;
      }

      // optional int32 granularity = 17 [default = 100];
      case 17: {
        if (tag == 136) {
         parse_granularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &granularity_)));
          set_has_granularity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_date_granularity;
        break;
      }

      // optional int32 date_granularity = 18 [default = 1000];
      case 18: {
        if (tag == 144) {
         parse_date_granularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_granularity_)));
          set_has_date_granularity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_lat_offset;
        break;
      }

      // optional int64 lat_offset = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_lat_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lat_offset_)));
          set_has_lat_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_lon_offset;
        break;
      }

      // optional int64 lon_offset = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_lon_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lon_offset_)));
          set_has_lon_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osmpbf.primitive_block_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osmpbf.primitive_block_t)
  return false;
#undef DO_
}

void primitive_block_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osmpbf.primitive_block_t)
  // required .osmpbf.string_table_t string_table = 1;
  if (has_string_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->string_table(), output);
  }

  // repeated .osmpbf.primitive_group_t primitive_group = 2;
  for (int i = 0; i < this->primitive_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->primitive_group(i), output);
  }

  // optional int32 granularity = 17 [default = 100];
  if (has_granularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->granularity(), output);
  }

  // optional int32 date_granularity = 18 [default = 1000];
  if (has_date_granularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->date_granularity(), output);
  }

  // optional int64 lat_offset = 19 [default = 0];
  if (has_lat_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->lat_offset(), output);
  }

  // optional int64 lon_offset = 20 [default = 0];
  if (has_lon_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->lon_offset(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:osmpbf.primitive_block_t)
}

int primitive_block_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .osmpbf.string_table_t string_table = 1;
    if (has_string_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->string_table());
    }

    // optional int32 granularity = 17 [default = 100];
    if (has_granularity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->granularity());
    }

    // optional int64 lat_offset = 19 [default = 0];
    if (has_lat_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lat_offset());
    }

    // optional int64 lon_offset = 20 [default = 0];
    if (has_lon_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lon_offset());
    }

    // optional int32 date_granularity = 18 [default = 1000];
    if (has_date_granularity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date_granularity());
    }

  }
  // repeated .osmpbf.primitive_group_t primitive_group = 2;
  total_size += 1 * this->primitive_group_size();
  for (int i = 0; i < this->primitive_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->primitive_group(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void primitive_block_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const primitive_block_t*>(&from));
}

void primitive_block_t::MergeFrom(const primitive_block_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  primitive_group_.MergeFrom(from.primitive_group_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_table()) {
      mutable_string_table()->::osmpbf::string_table_t::MergeFrom(from.string_table());
    }
    if (from.has_granularity()) {
      set_granularity(from.granularity());
    }
    if (from.has_lat_offset()) {
      set_lat_offset(from.lat_offset());
    }
    if (from.has_lon_offset()) {
      set_lon_offset(from.lon_offset());
    }
    if (from.has_date_granularity()) {
      set_date_granularity(from.date_granularity());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void primitive_block_t::CopyFrom(const primitive_block_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool primitive_block_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->primitive_group())) return false;
  return true;
}

void primitive_block_t::Swap(primitive_block_t* other) {
  if (other != this) {
    std::swap(string_table_, other->string_table_);
    primitive_group_.Swap(&other->primitive_group_);
    std::swap(granularity_, other->granularity_);
    std::swap(lat_offset_, other->lat_offset_);
    std::swap(lon_offset_, other->lon_offset_);
    std::swap(date_granularity_, other->date_granularity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string primitive_block_t::GetTypeName() const {
  return "osmpbf.primitive_block_t";
}


// ===================================================================

#ifndef _MSC_VER
const int primitive_group_t::kNodesFieldNumber;
const int primitive_group_t::kDenseFieldNumber;
const int primitive_group_t::kWaysFieldNumber;
const int primitive_group_t::kRelationsFieldNumber;
const int primitive_group_t::kChangesetsFieldNumber;
#endif  // !_MSC_VER

primitive_group_t::primitive_group_t()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osmpbf.primitive_group_t)
}

void primitive_group_t::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dense_ = const_cast< ::osmpbf::dense_nodes_t*>(
      ::osmpbf::dense_nodes_t::internal_default_instance());
#else
  dense_ = const_cast< ::osmpbf::dense_nodes_t*>(&::osmpbf::dense_nodes_t::default_instance());
#endif
}

primitive_group_t::primitive_group_t(const primitive_group_t& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osmpbf.primitive_group_t)
}

void primitive_group_t::SharedCtor() {
  _cached_size_ = 0;
  dense_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

primitive_group_t::~primitive_group_t() {
  // @@protoc_insertion_point(destructor:osmpbf.primitive_group_t)
  SharedDtor();
}

void primitive_group_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete dense_;
  }
}

void primitive_group_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const primitive_group_t& primitive_group_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmformat_2eproto();
#endif
  return *default_instance_;
}

primitive_group_t* primitive_group_t::default_instance_ = NULL;

primitive_group_t* primitive_group_t::New() const {
  return new primitive_group_t;
}

void primitive_group_t::Clear() {
  if (has_dense()) {
    if (dense_ != NULL) dense_->::osmpbf::dense_nodes_t::Clear();
  }
  nodes_.Clear();
  ways_.Clear();
  relations_.Clear();
  changesets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool primitive_group_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:osmpbf.primitive_group_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .osmpbf.node_t nodes = 1;
      case 1: {
        if (tag == 10) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectTag(18)) goto parse_dense;
        break;
      }

      // optional .osmpbf.dense_nodes_t dense = 2;
      case 2: {
        if (tag == 18) {
         parse_dense:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dense()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ways;
        break;
      }

      // repeated .osmpbf.way_t ways = 3;
      case 3: {
        if (tag == 26) {
         parse_ways:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ways()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ways;
        if (input->ExpectTag(34)) goto parse_relations;
        break;
      }

      // repeated .osmpbf.relation_t relations = 4;
      case 4: {
        if (tag == 34) {
         parse_relations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_relations;
        if (input->ExpectTag(42)) goto parse_changesets;
        break;
      }

      // repeated .osmpbf.change_set_t changesets = 5;
      case 5: {
        if (tag == 42) {
         parse_changesets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_changesets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_changesets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osmpbf.primitive_group_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osmpbf.primitive_group_t)
  return false;
#undef DO_
}

void primitive_group_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osmpbf.primitive_group_t)
  // repeated .osmpbf.node_t nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->nodes(i), output);
  }

  // optional .osmpbf.dense_nodes_t dense = 2;
  if (has_dense()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->dense(), output);
  }

  // repeated .osmpbf.way_t ways = 3;
  for (int i = 0; i < this->ways_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ways(i), output);
  }

  // repeated .osmpbf.relation_t relations = 4;
  for (int i = 0; i < this->relations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->relations(i), output);
  }

  // repeated .osmpbf.change_set_t changesets = 5;
  for (int i = 0; i < this->changesets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->changesets(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:osmpbf.primitive_group_t)
}

int primitive_group_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .osmpbf.dense_nodes_t dense = 2;
    if (has_dense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dense());
    }

  }
  // repeated .osmpbf.node_t nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  // repeated .osmpbf.way_t ways = 3;
  total_size += 1 * this->ways_size();
  for (int i = 0; i < this->ways_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ways(i));
  }

  // repeated .osmpbf.relation_t relations = 4;
  total_size += 1 * this->relations_size();
  for (int i = 0; i < this->relations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relations(i));
  }

  // repeated .osmpbf.change_set_t changesets = 5;
  total_size += 1 * this->changesets_size();
  for (int i = 0; i < this->changesets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->changesets(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void primitive_group_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const primitive_group_t*>(&from));
}

void primitive_group_t::MergeFrom(const primitive_group_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  ways_.MergeFrom(from.ways_);
  relations_.MergeFrom(from.relations_);
  changesets_.MergeFrom(from.changesets_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dense()) {
      mutable_dense()->::osmpbf::dense_nodes_t::MergeFrom(from.dense());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void primitive_group_t::CopyFrom(const primitive_group_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool primitive_group_t::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->nodes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ways())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->relations())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->changesets())) return false;
  return true;
}

void primitive_group_t::Swap(primitive_group_t* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(dense_, other->dense_);
    ways_.Swap(&other->ways_);
    relations_.Swap(&other->relations_);
    changesets_.Swap(&other->changesets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string primitive_group_t::GetTypeName() const {
  return "osmpbf.primitive_group_t";
}


// ===================================================================

#ifndef _MSC_VER
const int string_table_t::kSFieldNumber;
#endif  // !_MSC_VER

string_table_t::string_table_t()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osmpbf.string_table_t)
}

void string_table_t::InitAsDefaultInstance() {
}

string_table_t::string_table_t(const string_table_t& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osmpbf.string_table_t)
}

void string_table_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

string_table_t::~string_table_t() {
  // @@protoc_insertion_point(destructor:osmpbf.string_table_t)
  SharedDtor();
}

void string_table_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void string_table_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const string_table_t& string_table_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmformat_2eproto();
#endif
  return *default_instance_;
}

string_table_t* string_table_t::default_instance_ = NULL;

string_table_t* string_table_t::New() const {
  return new string_table_t;
}

void string_table_t::Clear() {
  s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool string_table_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:osmpbf.string_table_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes s = 1;
      case 1: {
        if (tag == 10) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_s;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osmpbf.string_table_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osmpbf.string_table_t)
  return false;
#undef DO_
}

void string_table_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osmpbf.string_table_t)
  // repeated bytes s = 1;
  for (int i = 0; i < this->s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->s(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:osmpbf.string_table_t)
}

int string_table_t::ByteSize() const {
  int total_size = 0;

  // repeated bytes s = 1;
  total_size += 1 * this->s_size();
  for (int i = 0; i < this->s_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->s(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void string_table_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const string_table_t*>(&from));
}

void string_table_t::MergeFrom(const string_table_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  s_.MergeFrom(from.s_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void string_table_t::CopyFrom(const string_table_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool string_table_t::IsInitialized() const {

  return true;
}

void string_table_t::Swap(string_table_t* other) {
  if (other != this) {
    s_.Swap(&other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string string_table_t::GetTypeName() const {
  return "osmpbf.string_table_t";
}


// ===================================================================

#ifndef _MSC_VER
const int info_t::kVersionFieldNumber;
const int info_t::kTimestampFieldNumber;
const int info_t::kChangesetFieldNumber;
const int info_t::kUidFieldNumber;
const int info_t::kUserSidFieldNumber;
const int info_t::kVisibleFieldNumber;
#endif  // !_MSC_VER

info_t::info_t()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osmpbf.info_t)
}

void info_t::InitAsDefaultInstance() {
}

info_t::info_t(const info_t& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osmpbf.info_t)
}

void info_t::SharedCtor() {
  _cached_size_ = 0;
  version_ = -1;
  timestamp_ = GOOGLE_LONGLONG(0);
  changeset_ = GOOGLE_LONGLONG(0);
  uid_ = 0;
  user_sid_ = 0u;
  visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

info_t::~info_t() {
  // @@protoc_insertion_point(destructor:osmpbf.info_t)
  SharedDtor();
}

void info_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const info_t& info_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmformat_2eproto();
#endif
  return *default_instance_;
}

info_t* info_t::default_instance_ = NULL;

info_t* info_t::New() const {
  return new info_t;
}

void info_t::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<info_t*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uid_, visible_);
    version_ = -1;
    timestamp_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:osmpbf.info_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_changeset;
        break;
      }

      // optional int64 changeset = 3;
      case 3: {
        if (tag == 24) {
         parse_changeset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &changeset_)));
          set_has_changeset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // optional int32 uid = 4;
      case 4: {
        if (tag == 32) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_user_sid;
        break;
      }

      // optional uint32 user_sid = 5;
      case 5: {
        if (tag == 40) {
         parse_user_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_sid_)));
          set_has_user_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_visible;
        break;
      }

      // optional bool visible = 6;
      case 6: {
        if (tag == 48) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osmpbf.info_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osmpbf.info_t)
  return false;
#undef DO_
}

void info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osmpbf.info_t)
  // optional int32 version = 1 [default = -1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional int64 changeset = 3;
  if (has_changeset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->changeset(), output);
  }

  // optional int32 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uid(), output);
  }

  // optional uint32 user_sid = 5;
  if (has_user_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->user_sid(), output);
  }

  // optional bool visible = 6;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->visible(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:osmpbf.info_t)
}

int info_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1 [default = -1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int64 changeset = 3;
    if (has_changeset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->changeset());
    }

    // optional int32 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional uint32 user_sid = 5;
    if (has_user_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_sid());
    }

    // optional bool visible = 6;
    if (has_visible()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void info_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const info_t*>(&from));
}

void info_t::MergeFrom(const info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_changeset()) {
      set_changeset(from.changeset());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_user_sid()) {
      set_user_sid(from.user_sid());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void info_t::CopyFrom(const info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool info_t::IsInitialized() const {

  return true;
}

void info_t::Swap(info_t* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(changeset_, other->changeset_);
    std::swap(uid_, other->uid_);
    std::swap(user_sid_, other->user_sid_);
    std::swap(visible_, other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string info_t::GetTypeName() const {
  return "osmpbf.info_t";
}


// ===================================================================

#ifndef _MSC_VER
const int dense_info_t::kVersionFieldNumber;
const int dense_info_t::kTimestampFieldNumber;
const int dense_info_t::kChangesetFieldNumber;
const int dense_info_t::kUidFieldNumber;
const int dense_info_t::kUserSidFieldNumber;
const int dense_info_t::kVisibleFieldNumber;
#endif  // !_MSC_VER

dense_info_t::dense_info_t()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osmpbf.dense_info_t)
}

void dense_info_t::InitAsDefaultInstance() {
}

dense_info_t::dense_info_t(const dense_info_t& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osmpbf.dense_info_t)
}

void dense_info_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dense_info_t::~dense_info_t() {
  // @@protoc_insertion_point(destructor:osmpbf.dense_info_t)
  SharedDtor();
}

void dense_info_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void dense_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const dense_info_t& dense_info_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmformat_2eproto();
#endif
  return *default_instance_;
}

dense_info_t* dense_info_t::default_instance_ = NULL;

dense_info_t* dense_info_t::New() const {
  return new dense_info_t;
}

void dense_info_t::Clear() {
  version_.Clear();
  timestamp_.Clear();
  changeset_.Clear();
  uid_.Clear();
  user_sid_.Clear();
  visible_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool dense_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:osmpbf.dense_info_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 version = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_version())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_version())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // repeated sint64 timestamp = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_timestamp())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 18, input, this->mutable_timestamp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_changeset;
        break;
      }

      // repeated sint64 changeset = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_changeset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_changeset())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 26, input, this->mutable_changeset())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }

      // repeated sint32 uid = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_uid())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 34, input, this->mutable_uid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_sid;
        break;
      }

      // repeated sint32 user_sid = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_user_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_user_sid())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 42, input, this->mutable_user_sid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_visible;
        break;
      }

      // repeated bool visible = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_visible())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 50, input, this->mutable_visible())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osmpbf.dense_info_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osmpbf.dense_info_t)
  return false;
#undef DO_
}

void dense_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osmpbf.dense_info_t)
  // repeated int32 version = 1 [packed = true];
  if (this->version_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_version_cached_byte_size_);
  }
  for (int i = 0; i < this->version_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->version(i), output);
  }

  // repeated sint64 timestamp = 2 [packed = true];
  if (this->timestamp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_timestamp_cached_byte_size_);
  }
  for (int i = 0; i < this->timestamp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->timestamp(i), output);
  }

  // repeated sint64 changeset = 3 [packed = true];
  if (this->changeset_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_changeset_cached_byte_size_);
  }
  for (int i = 0; i < this->changeset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->changeset(i), output);
  }

  // repeated sint32 uid = 4 [packed = true];
  if (this->uid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_uid_cached_byte_size_);
  }
  for (int i = 0; i < this->uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->uid(i), output);
  }

  // repeated sint32 user_sid = 5 [packed = true];
  if (this->user_sid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_user_sid_cached_byte_size_);
  }
  for (int i = 0; i < this->user_sid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->user_sid(i), output);
  }

  // repeated bool visible = 6 [packed = true];
  if (this->visible_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_visible_cached_byte_size_);
  }
  for (int i = 0; i < this->visible_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->visible(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:osmpbf.dense_info_t)
}

int dense_info_t::ByteSize() const {
  int total_size = 0;

  // repeated int32 version = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->version_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->version(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _version_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 timestamp = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->timestamp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->timestamp(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _timestamp_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 changeset = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->changeset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->changeset(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _changeset_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint32 uid = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->uid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _uid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint32 user_sid = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->user_sid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->user_sid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _user_sid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool visible = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->visible_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _visible_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dense_info_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const dense_info_t*>(&from));
}

void dense_info_t::MergeFrom(const dense_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  version_.MergeFrom(from.version_);
  timestamp_.MergeFrom(from.timestamp_);
  changeset_.MergeFrom(from.changeset_);
  uid_.MergeFrom(from.uid_);
  user_sid_.MergeFrom(from.user_sid_);
  visible_.MergeFrom(from.visible_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void dense_info_t::CopyFrom(const dense_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dense_info_t::IsInitialized() const {

  return true;
}

void dense_info_t::Swap(dense_info_t* other) {
  if (other != this) {
    version_.Swap(&other->version_);
    timestamp_.Swap(&other->timestamp_);
    changeset_.Swap(&other->changeset_);
    uid_.Swap(&other->uid_);
    user_sid_.Swap(&other->user_sid_);
    visible_.Swap(&other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string dense_info_t::GetTypeName() const {
  return "osmpbf.dense_info_t";
}


// ===================================================================

#ifndef _MSC_VER
const int change_set_t::kIdFieldNumber;
#endif  // !_MSC_VER

change_set_t::change_set_t()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osmpbf.change_set_t)
}

void change_set_t::InitAsDefaultInstance() {
}

change_set_t::change_set_t(const change_set_t& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osmpbf.change_set_t)
}

void change_set_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

change_set_t::~change_set_t() {
  // @@protoc_insertion_point(destructor:osmpbf.change_set_t)
  SharedDtor();
}

void change_set_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void change_set_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const change_set_t& change_set_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmformat_2eproto();
#endif
  return *default_instance_;
}

change_set_t* change_set_t::default_instance_ = NULL;

change_set_t* change_set_t::New() const {
  return new change_set_t;
}

void change_set_t::Clear() {
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool change_set_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:osmpbf.change_set_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osmpbf.change_set_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osmpbf.change_set_t)
  return false;
#undef DO_
}

void change_set_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osmpbf.change_set_t)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:osmpbf.change_set_t)
}

int change_set_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void change_set_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const change_set_t*>(&from));
}

void change_set_t::MergeFrom(const change_set_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void change_set_t::CopyFrom(const change_set_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_set_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void change_set_t::Swap(change_set_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string change_set_t::GetTypeName() const {
  return "osmpbf.change_set_t";
}


// ===================================================================

#ifndef _MSC_VER
const int node_t::kIdFieldNumber;
const int node_t::kKeysFieldNumber;
const int node_t::kValsFieldNumber;
const int node_t::kInfoFieldNumber;
const int node_t::kLatFieldNumber;
const int node_t::kLonFieldNumber;
#endif  // !_MSC_VER

node_t::node_t()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osmpbf.node_t)
}

void node_t::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::osmpbf::info_t*>(
      ::osmpbf::info_t::internal_default_instance());
#else
  info_ = const_cast< ::osmpbf::info_t*>(&::osmpbf::info_t::default_instance());
#endif
}

node_t::node_t(const node_t& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osmpbf.node_t)
}

void node_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  info_ = NULL;
  lat_ = GOOGLE_LONGLONG(0);
  lon_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

node_t::~node_t() {
  // @@protoc_insertion_point(destructor:osmpbf.node_t)
  SharedDtor();
}

void node_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void node_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const node_t& node_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmformat_2eproto();
#endif
  return *default_instance_;
}

node_t* node_t::default_instance_ = NULL;

node_t* node_t::New() const {
  return new node_t;
}

void node_t::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<node_t*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 57) {
    ZR_(lat_, lon_);
    id_ = GOOGLE_LONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::osmpbf::info_t::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  keys_.Clear();
  vals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool node_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:osmpbf.node_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated uint32 keys = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keys())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vals;
        break;
      }

      // repeated uint32 vals = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_vals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vals())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_vals())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .osmpbf.info_t info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lat;
        break;
      }

      // required sint64 lat = 8;
      case 8: {
        if (tag == 64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lon;
        break;
      }

      // required sint64 lon = 9;
      case 9: {
        if (tag == 72) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osmpbf.node_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osmpbf.node_t)
  return false;
#undef DO_
}

void node_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osmpbf.node_t)
  // required sint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->id(), output);
  }

  // repeated uint32 keys = 2 [packed = true];
  if (this->keys_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_keys_cached_byte_size_);
  }
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->keys(i), output);
  }

  // repeated uint32 vals = 3 [packed = true];
  if (this->vals_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vals_cached_byte_size_);
  }
  for (int i = 0; i < this->vals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->vals(i), output);
  }

  // optional .osmpbf.info_t info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->info(), output);
  }

  // required sint64 lat = 8;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->lat(), output);
  }

  // required sint64 lon = 9;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(9, this->lon(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:osmpbf.node_t)
}

int node_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->id());
    }

    // optional .osmpbf.info_t info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required sint64 lat = 8;
    if (has_lat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->lat());
    }

    // required sint64 lon = 9;
    if (has_lon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->lon());
    }

  }
  // repeated uint32 keys = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->keys(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _keys_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 vals = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->vals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vals(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vals_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void node_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const node_t*>(&from));
}

void node_t::MergeFrom(const node_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  vals_.MergeFrom(from.vals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_info()) {
      mutable_info()->::osmpbf::info_t::MergeFrom(from.info());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void node_t::CopyFrom(const node_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000031) != 0x00000031) return false;

  return true;
}

void node_t::Swap(node_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    keys_.Swap(&other->keys_);
    vals_.Swap(&other->vals_);
    std::swap(info_, other->info_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string node_t::GetTypeName() const {
  return "osmpbf.node_t";
}


// ===================================================================

#ifndef _MSC_VER
const int dense_nodes_t::kIdFieldNumber;
const int dense_nodes_t::kDenseinfoFieldNumber;
const int dense_nodes_t::kLatFieldNumber;
const int dense_nodes_t::kLonFieldNumber;
const int dense_nodes_t::kKeysValsFieldNumber;
#endif  // !_MSC_VER

dense_nodes_t::dense_nodes_t()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osmpbf.dense_nodes_t)
}

void dense_nodes_t::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  denseinfo_ = const_cast< ::osmpbf::dense_info_t*>(
      ::osmpbf::dense_info_t::internal_default_instance());
#else
  denseinfo_ = const_cast< ::osmpbf::dense_info_t*>(&::osmpbf::dense_info_t::default_instance());
#endif
}

dense_nodes_t::dense_nodes_t(const dense_nodes_t& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osmpbf.dense_nodes_t)
}

void dense_nodes_t::SharedCtor() {
  _cached_size_ = 0;
  denseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dense_nodes_t::~dense_nodes_t() {
  // @@protoc_insertion_point(destructor:osmpbf.dense_nodes_t)
  SharedDtor();
}

void dense_nodes_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete denseinfo_;
  }
}

void dense_nodes_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const dense_nodes_t& dense_nodes_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmformat_2eproto();
#endif
  return *default_instance_;
}

dense_nodes_t* dense_nodes_t::default_instance_ = NULL;

dense_nodes_t* dense_nodes_t::New() const {
  return new dense_nodes_t;
}

void dense_nodes_t::Clear() {
  if (has_denseinfo()) {
    if (denseinfo_ != NULL) denseinfo_->::osmpbf::dense_info_t::Clear();
  }
  id_.Clear();
  lat_.Clear();
  lon_.Clear();
  keys_vals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool dense_nodes_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:osmpbf.dense_nodes_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 id = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_id())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 10, input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_denseinfo;
        break;
      }

      // optional .osmpbf.dense_info_t denseinfo = 5;
      case 5: {
        if (tag == 42) {
         parse_denseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_denseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_lat;
        break;
      }

      // repeated sint64 lat = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_lat())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 66, input, this->mutable_lat())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_lon;
        break;
      }

      // repeated sint64 lon = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_lon())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 74, input, this->mutable_lon())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_keys_vals;
        break;
      }

      // repeated int32 keys_vals = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_keys_vals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_keys_vals())));
        } else if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 82, input, this->mutable_keys_vals())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osmpbf.dense_nodes_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osmpbf.dense_nodes_t)
  return false;
#undef DO_
}

void dense_nodes_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osmpbf.dense_nodes_t)
  // repeated sint64 id = 1 [packed = true];
  if (this->id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_id_cached_byte_size_);
  }
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->id(i), output);
  }

  // optional .osmpbf.dense_info_t denseinfo = 5;
  if (has_denseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->denseinfo(), output);
  }

  // repeated sint64 lat = 8 [packed = true];
  if (this->lat_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lat_cached_byte_size_);
  }
  for (int i = 0; i < this->lat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->lat(i), output);
  }

  // repeated sint64 lon = 9 [packed = true];
  if (this->lon_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lon_cached_byte_size_);
  }
  for (int i = 0; i < this->lon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->lon(i), output);
  }

  // repeated int32 keys_vals = 10 [packed = true];
  if (this->keys_vals_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_keys_vals_cached_byte_size_);
  }
  for (int i = 0; i < this->keys_vals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->keys_vals(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:osmpbf.dense_nodes_t)
}

int dense_nodes_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .osmpbf.dense_info_t denseinfo = 5;
    if (has_denseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->denseinfo());
    }

  }
  // repeated sint64 id = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 lat = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->lat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->lat(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lat_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 lon = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->lon_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->lon(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lon_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 keys_vals = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->keys_vals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->keys_vals(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _keys_vals_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dense_nodes_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const dense_nodes_t*>(&from));
}

void dense_nodes_t::MergeFrom(const dense_nodes_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  lat_.MergeFrom(from.lat_);
  lon_.MergeFrom(from.lon_);
  keys_vals_.MergeFrom(from.keys_vals_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_denseinfo()) {
      mutable_denseinfo()->::osmpbf::dense_info_t::MergeFrom(from.denseinfo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void dense_nodes_t::CopyFrom(const dense_nodes_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dense_nodes_t::IsInitialized() const {

  return true;
}

void dense_nodes_t::Swap(dense_nodes_t* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(denseinfo_, other->denseinfo_);
    lat_.Swap(&other->lat_);
    lon_.Swap(&other->lon_);
    keys_vals_.Swap(&other->keys_vals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string dense_nodes_t::GetTypeName() const {
  return "osmpbf.dense_nodes_t";
}


// ===================================================================

#ifndef _MSC_VER
const int way_t::kIdFieldNumber;
const int way_t::kKeysFieldNumber;
const int way_t::kValsFieldNumber;
const int way_t::kInfoFieldNumber;
const int way_t::kRefsFieldNumber;
#endif  // !_MSC_VER

way_t::way_t()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osmpbf.way_t)
}

void way_t::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::osmpbf::info_t*>(
      ::osmpbf::info_t::internal_default_instance());
#else
  info_ = const_cast< ::osmpbf::info_t*>(&::osmpbf::info_t::default_instance());
#endif
}

way_t::way_t(const way_t& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osmpbf.way_t)
}

void way_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

way_t::~way_t() {
  // @@protoc_insertion_point(destructor:osmpbf.way_t)
  SharedDtor();
}

void way_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void way_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const way_t& way_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmformat_2eproto();
#endif
  return *default_instance_;
}

way_t* way_t::default_instance_ = NULL;

way_t* way_t::New() const {
  return new way_t;
}

void way_t::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::osmpbf::info_t::Clear();
    }
  }
  keys_.Clear();
  vals_.Clear();
  refs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool way_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:osmpbf.way_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated uint32 keys = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keys())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vals;
        break;
      }

      // repeated uint32 vals = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_vals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vals())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_vals())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .osmpbf.info_t info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_refs;
        break;
      }

      // repeated sint64 refs = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_refs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_refs())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 66, input, this->mutable_refs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osmpbf.way_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osmpbf.way_t)
  return false;
#undef DO_
}

void way_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osmpbf.way_t)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated uint32 keys = 2 [packed = true];
  if (this->keys_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_keys_cached_byte_size_);
  }
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->keys(i), output);
  }

  // repeated uint32 vals = 3 [packed = true];
  if (this->vals_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vals_cached_byte_size_);
  }
  for (int i = 0; i < this->vals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->vals(i), output);
  }

  // optional .osmpbf.info_t info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->info(), output);
  }

  // repeated sint64 refs = 8 [packed = true];
  if (this->refs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_refs_cached_byte_size_);
  }
  for (int i = 0; i < this->refs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->refs(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:osmpbf.way_t)
}

int way_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .osmpbf.info_t info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated uint32 keys = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->keys(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _keys_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 vals = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->vals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vals(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vals_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 refs = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->refs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->refs(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _refs_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void way_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const way_t*>(&from));
}

void way_t::MergeFrom(const way_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  vals_.MergeFrom(from.vals_);
  refs_.MergeFrom(from.refs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_info()) {
      mutable_info()->::osmpbf::info_t::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void way_t::CopyFrom(const way_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool way_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void way_t::Swap(way_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    keys_.Swap(&other->keys_);
    vals_.Swap(&other->vals_);
    std::swap(info_, other->info_);
    refs_.Swap(&other->refs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string way_t::GetTypeName() const {
  return "osmpbf.way_t";
}


// ===================================================================

bool relation_t_member_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const relation_t_member_type_t relation_t::NODE;
const relation_t_member_type_t relation_t::WAY;
const relation_t_member_type_t relation_t::RELATION;
const relation_t_member_type_t relation_t::member_type_t_MIN;
const relation_t_member_type_t relation_t::member_type_t_MAX;
const int relation_t::member_type_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int relation_t::kIdFieldNumber;
const int relation_t::kKeysFieldNumber;
const int relation_t::kValsFieldNumber;
const int relation_t::kInfoFieldNumber;
const int relation_t::kRolesSidFieldNumber;
const int relation_t::kMemidsFieldNumber;
const int relation_t::kTypesFieldNumber;
#endif  // !_MSC_VER

relation_t::relation_t()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osmpbf.relation_t)
}

void relation_t::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::osmpbf::info_t*>(
      ::osmpbf::info_t::internal_default_instance());
#else
  info_ = const_cast< ::osmpbf::info_t*>(&::osmpbf::info_t::default_instance());
#endif
}

relation_t::relation_t(const relation_t& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:osmpbf.relation_t)
}

void relation_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

relation_t::~relation_t() {
  // @@protoc_insertion_point(destructor:osmpbf.relation_t)
  SharedDtor();
}

void relation_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void relation_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const relation_t& relation_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmformat_2eproto();
#endif
  return *default_instance_;
}

relation_t* relation_t::default_instance_ = NULL;

relation_t* relation_t::New() const {
  return new relation_t;
}

void relation_t::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::osmpbf::info_t::Clear();
    }
  }
  keys_.Clear();
  vals_.Clear();
  roles_sid_.Clear();
  memids_.Clear();
  types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool relation_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:osmpbf.relation_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated uint32 keys = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keys())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vals;
        break;
      }

      // repeated uint32 vals = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_vals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vals())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_vals())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .osmpbf.info_t info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_roles_sid;
        break;
      }

      // repeated int32 roles_sid = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_roles_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roles_sid())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66, input, this->mutable_roles_sid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_memids;
        break;
      }

      // repeated sint64 memids = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_memids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_memids())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 74, input, this->mutable_memids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_types;
        break;
      }

      // repeated .osmpbf.relation_t.member_type_t types = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_types:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::osmpbf::relation_t_member_type_t_IsValid(value)) {
              add_types(static_cast< ::osmpbf::relation_t_member_type_t >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::osmpbf::relation_t_member_type_t_IsValid(value)) {
            add_types(static_cast< ::osmpbf::relation_t_member_type_t >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osmpbf.relation_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osmpbf.relation_t)
  return false;
#undef DO_
}

void relation_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osmpbf.relation_t)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated uint32 keys = 2 [packed = true];
  if (this->keys_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_keys_cached_byte_size_);
  }
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->keys(i), output);
  }

  // repeated uint32 vals = 3 [packed = true];
  if (this->vals_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vals_cached_byte_size_);
  }
  for (int i = 0; i < this->vals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->vals(i), output);
  }

  // optional .osmpbf.info_t info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->info(), output);
  }

  // repeated int32 roles_sid = 8 [packed = true];
  if (this->roles_sid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_roles_sid_cached_byte_size_);
  }
  for (int i = 0; i < this->roles_sid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->roles_sid(i), output);
  }

  // repeated sint64 memids = 9 [packed = true];
  if (this->memids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_memids_cached_byte_size_);
  }
  for (int i = 0; i < this->memids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->memids(i), output);
  }

  // repeated .osmpbf.relation_t.member_type_t types = 10 [packed = true];
  if (this->types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_types_cached_byte_size_);
  }
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->types(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:osmpbf.relation_t)
}

int relation_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .osmpbf.info_t info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated uint32 keys = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->keys(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _keys_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 vals = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->vals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vals(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vals_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 roles_sid = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->roles_sid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roles_sid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _roles_sid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 memids = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->memids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->memids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _memids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .osmpbf.relation_t.member_type_t types = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->types(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _types_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void relation_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const relation_t*>(&from));
}

void relation_t::MergeFrom(const relation_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  vals_.MergeFrom(from.vals_);
  roles_sid_.MergeFrom(from.roles_sid_);
  memids_.MergeFrom(from.memids_);
  types_.MergeFrom(from.types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_info()) {
      mutable_info()->::osmpbf::info_t::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void relation_t::CopyFrom(const relation_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool relation_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void relation_t::Swap(relation_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    keys_.Swap(&other->keys_);
    vals_.Swap(&other->vals_);
    std::swap(info_, other->info_);
    roles_sid_.Swap(&other->roles_sid_);
    memids_.Swap(&other->memids_);
    types_.Swap(&other->types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string relation_t::GetTypeName() const {
  return "osmpbf.relation_t";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace osmpbf

// @@protoc_insertion_point(global_scope)
