// Copyright (c) 2015 Urtashev Arslan. All rights reserved.
// Contacts: <urtashev@gmail.com>
//   
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//           
//   The above copyright notice and this permission notice shall be included
//   in all copies or substantial portions of the Software.
//              
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#ifndef GEO_BASE_GEO_BASE_H_
#define GEO_BASE_GEO_BASE_H_

#include "common.h"
#include "io.h"
#include "location.h"

#include <functional>
#include <memory>
#include <vector>

namespace geo_base {

typedef std::function<void (const char*, const char*)> KeyValueVisitor;

// typedef std::function<void (RegionID region_id)> RegionVisitor;

// GeoBase is a immutable storage of geographical data (data generated by
// GeoBaseGenerate and stored on disk in special format).
// GeoBase uses memory mapping of data file for fast initialization and
// optimal using of RAM. You do not pay for geographical polygons that are
// not requested. But some queries may be slower (few milliseconds) than
// others because at the time of their execution will be read from disk.
// You can use tmpfs for very fast execution of all queries (few microseconds).
// Working with GeoBase is thread safe, but behavior is undefined if you 
// destroy data file.
class GeoBase {
 public:
  // LookupInfo is a struct that stores the polygon id that contains the point.
  // The structure stores a list of regions in nesting order.
  struct LookupInfo {
    PolygonID polygon_id;
    std::vector<RegionID> regions;
  };

   // Call open and mmap on file, stored on disk by path.
   // Throws exception with strerror(errno) if open or mmap returns error.
  explicit GeoBase(const char* path);
    
  // All memory will be touched, so no lookups will be slow. Be careful, all
  // memory of data file will be loaded from disk. Returns simple checksum.
  uint32_t TouchMemory() const;

  // Lookup RegionID by Location.
  RegionID Lookup(const Location& location, LookupInfo* info = NULL) const;

  // Lookup value by key (stored as key-value data in GeoData file) for
  // given region. Searching is done by binary search.
  const char* GetValue(RegionID region_id, const char* key) const;

  // Iterate through all key-values for a given region in sorted order
  // by key and call visitor callback 
  void ForEachKV(RegionID region_id, KeyValueVisitor visitor) const;

  // TODO:
  // Iterate through all parents (including given region) of given region
  // in nesting order.
  // void ForEachParent(RegionID region_id, RegionVisitor visitor) const;

  ~GeoBase();

 private:
  class Impl;
  Impl* impl;

  GeoBase(const GeoBase&) = delete;
  GeoBase& operator = (const GeoBase&) = delete;
};

typedef std::unique_ptr<GeoBase> GeoBasePtr;

} // namespace geo_base

#endif // GEO_BASE_GEO_BASE_H
