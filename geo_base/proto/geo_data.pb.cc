// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geo_base/proto/geo_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "geo_base/proto/geo_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace geo_base {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* geo_data_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  geo_data_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_geo_5fbase_2fproto_2fgeo_5fdata_2eproto() {
  protobuf_AddDesc_geo_5fbase_2fproto_2fgeo_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "geo_base/proto/geo_data.proto");
  GOOGLE_CHECK(file != NULL);
  geo_data_t_descriptor_ = file->message_type(0);
  static const int geo_data_t_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, points_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, edges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, edges_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, edge_refs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, edge_refs_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, parts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, parts_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, polygons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, polygons_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, polygon_refs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, polygon_refs_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, boxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, boxes_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, blobs_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, kvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, kvs_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, regions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, regions_number_),
  };
  geo_data_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      geo_data_t_descriptor_,
      geo_data_t::default_instance_,
      geo_data_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(geo_data_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(geo_data_t, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_geo_5fbase_2fproto_2fgeo_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      geo_data_t_descriptor_, &geo_data_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_geo_5fbase_2fproto_2fgeo_5fdata_2eproto() {
  delete geo_data_t::default_instance_;
  delete geo_data_t_reflection_;
}

void protobuf_AddDesc_geo_5fbase_2fproto_2fgeo_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035geo_base/proto/geo_data.proto\022\016geo_bas"
    "e.proto\"\274\003\n\ngeo_data_t\022\r\n\005magic\030\001 \001(\004\022\017\n"
    "\007version\030\002 \001(\004\022\016\n\006points\030\003 \001(\004\022\025\n\rpoints"
    "_number\030\004 \001(\004\022\r\n\005edges\030\005 \001(\004\022\024\n\014edges_nu"
    "mber\030\006 \001(\004\022\021\n\tedge_refs\030\007 \001(\004\022\030\n\020edge_re"
    "fs_number\030\010 \001(\004\022\r\n\005parts\030\t \001(\004\022\024\n\014parts_"
    "number\030\n \001(\004\022\020\n\010polygons\030\013 \001(\004\022\027\n\017polygo"
    "ns_number\030\014 \001(\004\022\024\n\014polygon_refs\030\r \001(\004\022\033\n"
    "\023polygon_refs_number\030\016 \001(\004\022\r\n\005boxes\030\017 \001("
    "\004\022\024\n\014boxes_number\030\020 \001(\004\022\r\n\005blobs\030\021 \001(\004\022\024"
    "\n\014blobs_number\030\022 \001(\004\022\013\n\003kvs\030\023 \001(\004\022\022\n\nkvs"
    "_number\030\024 \001(\004\022\017\n\007regions\030\025 \001(\004\022\026\n\016region"
    "s_number\030\026 \001(\004", 494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "geo_base/proto/geo_data.proto", &protobuf_RegisterTypes);
  geo_data_t::default_instance_ = new geo_data_t();
  geo_data_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_geo_5fbase_2fproto_2fgeo_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_geo_5fbase_2fproto_2fgeo_5fdata_2eproto {
  StaticDescriptorInitializer_geo_5fbase_2fproto_2fgeo_5fdata_2eproto() {
    protobuf_AddDesc_geo_5fbase_2fproto_2fgeo_5fdata_2eproto();
  }
} static_descriptor_initializer_geo_5fbase_2fproto_2fgeo_5fdata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int geo_data_t::kMagicFieldNumber;
const int geo_data_t::kVersionFieldNumber;
const int geo_data_t::kPointsFieldNumber;
const int geo_data_t::kPointsNumberFieldNumber;
const int geo_data_t::kEdgesFieldNumber;
const int geo_data_t::kEdgesNumberFieldNumber;
const int geo_data_t::kEdgeRefsFieldNumber;
const int geo_data_t::kEdgeRefsNumberFieldNumber;
const int geo_data_t::kPartsFieldNumber;
const int geo_data_t::kPartsNumberFieldNumber;
const int geo_data_t::kPolygonsFieldNumber;
const int geo_data_t::kPolygonsNumberFieldNumber;
const int geo_data_t::kPolygonRefsFieldNumber;
const int geo_data_t::kPolygonRefsNumberFieldNumber;
const int geo_data_t::kBoxesFieldNumber;
const int geo_data_t::kBoxesNumberFieldNumber;
const int geo_data_t::kBlobsFieldNumber;
const int geo_data_t::kBlobsNumberFieldNumber;
const int geo_data_t::kKvsFieldNumber;
const int geo_data_t::kKvsNumberFieldNumber;
const int geo_data_t::kRegionsFieldNumber;
const int geo_data_t::kRegionsNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

geo_data_t::geo_data_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.proto.geo_data_t)
}

void geo_data_t::InitAsDefaultInstance() {
}

geo_data_t::geo_data_t(const geo_data_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.proto.geo_data_t)
}

void geo_data_t::SharedCtor() {
  _cached_size_ = 0;
  magic_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_ULONGLONG(0);
  points_ = GOOGLE_ULONGLONG(0);
  points_number_ = GOOGLE_ULONGLONG(0);
  edges_ = GOOGLE_ULONGLONG(0);
  edges_number_ = GOOGLE_ULONGLONG(0);
  edge_refs_ = GOOGLE_ULONGLONG(0);
  edge_refs_number_ = GOOGLE_ULONGLONG(0);
  parts_ = GOOGLE_ULONGLONG(0);
  parts_number_ = GOOGLE_ULONGLONG(0);
  polygons_ = GOOGLE_ULONGLONG(0);
  polygons_number_ = GOOGLE_ULONGLONG(0);
  polygon_refs_ = GOOGLE_ULONGLONG(0);
  polygon_refs_number_ = GOOGLE_ULONGLONG(0);
  boxes_ = GOOGLE_ULONGLONG(0);
  boxes_number_ = GOOGLE_ULONGLONG(0);
  blobs_ = GOOGLE_ULONGLONG(0);
  blobs_number_ = GOOGLE_ULONGLONG(0);
  kvs_ = GOOGLE_ULONGLONG(0);
  kvs_number_ = GOOGLE_ULONGLONG(0);
  regions_ = GOOGLE_ULONGLONG(0);
  regions_number_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

geo_data_t::~geo_data_t() {
  // @@protoc_insertion_point(destructor:geo_base.proto.geo_data_t)
  SharedDtor();
}

void geo_data_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void geo_data_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* geo_data_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return geo_data_t_descriptor_;
}

const geo_data_t& geo_data_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_geo_5fbase_2fproto_2fgeo_5fdata_2eproto();
  return *default_instance_;
}

geo_data_t* geo_data_t::default_instance_ = NULL;

geo_data_t* geo_data_t::New(::google::protobuf::Arena* arena) const {
  geo_data_t* n = new geo_data_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void geo_data_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<geo_data_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(magic_, edge_refs_number_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(parts_, boxes_number_);
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ZR_(blobs_, regions_number_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool geo_data_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.proto.geo_data_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 magic = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_points;
        break;
      }

      // optional uint64 points = 3;
      case 3: {
        if (tag == 24) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_points_number;
        break;
      }

      // optional uint64 points_number = 4;
      case 4: {
        if (tag == 32) {
         parse_points_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &points_number_)));
          set_has_points_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_edges;
        break;
      }

      // optional uint64 edges = 5;
      case 5: {
        if (tag == 40) {
         parse_edges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &edges_)));
          set_has_edges();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_edges_number;
        break;
      }

      // optional uint64 edges_number = 6;
      case 6: {
        if (tag == 48) {
         parse_edges_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &edges_number_)));
          set_has_edges_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_edge_refs;
        break;
      }

      // optional uint64 edge_refs = 7;
      case 7: {
        if (tag == 56) {
         parse_edge_refs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &edge_refs_)));
          set_has_edge_refs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_edge_refs_number;
        break;
      }

      // optional uint64 edge_refs_number = 8;
      case 8: {
        if (tag == 64) {
         parse_edge_refs_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &edge_refs_number_)));
          set_has_edge_refs_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_parts;
        break;
      }

      // optional uint64 parts = 9;
      case 9: {
        if (tag == 72) {
         parse_parts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parts_)));
          set_has_parts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_parts_number;
        break;
      }

      // optional uint64 parts_number = 10;
      case 10: {
        if (tag == 80) {
         parse_parts_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parts_number_)));
          set_has_parts_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_polygons;
        break;
      }

      // optional uint64 polygons = 11;
      case 11: {
        if (tag == 88) {
         parse_polygons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &polygons_)));
          set_has_polygons();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_polygons_number;
        break;
      }

      // optional uint64 polygons_number = 12;
      case 12: {
        if (tag == 96) {
         parse_polygons_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &polygons_number_)));
          set_has_polygons_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_polygon_refs;
        break;
      }

      // optional uint64 polygon_refs = 13;
      case 13: {
        if (tag == 104) {
         parse_polygon_refs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &polygon_refs_)));
          set_has_polygon_refs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_polygon_refs_number;
        break;
      }

      // optional uint64 polygon_refs_number = 14;
      case 14: {
        if (tag == 112) {
         parse_polygon_refs_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &polygon_refs_number_)));
          set_has_polygon_refs_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_boxes;
        break;
      }

      // optional uint64 boxes = 15;
      case 15: {
        if (tag == 120) {
         parse_boxes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &boxes_)));
          set_has_boxes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_boxes_number;
        break;
      }

      // optional uint64 boxes_number = 16;
      case 16: {
        if (tag == 128) {
         parse_boxes_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &boxes_number_)));
          set_has_boxes_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_blobs;
        break;
      }

      // optional uint64 blobs = 17;
      case 17: {
        if (tag == 136) {
         parse_blobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blobs_)));
          set_has_blobs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_blobs_number;
        break;
      }

      // optional uint64 blobs_number = 18;
      case 18: {
        if (tag == 144) {
         parse_blobs_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blobs_number_)));
          set_has_blobs_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_kvs;
        break;
      }

      // optional uint64 kvs = 19;
      case 19: {
        if (tag == 152) {
         parse_kvs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kvs_)));
          set_has_kvs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_kvs_number;
        break;
      }

      // optional uint64 kvs_number = 20;
      case 20: {
        if (tag == 160) {
         parse_kvs_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kvs_number_)));
          set_has_kvs_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_regions;
        break;
      }

      // optional uint64 regions = 21;
      case 21: {
        if (tag == 168) {
         parse_regions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &regions_)));
          set_has_regions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_regions_number;
        break;
      }

      // optional uint64 regions_number = 22;
      case 22: {
        if (tag == 176) {
         parse_regions_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &regions_number_)));
          set_has_regions_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.proto.geo_data_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.proto.geo_data_t)
  return false;
#undef DO_
}

void geo_data_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.proto.geo_data_t)
  // optional uint64 magic = 1;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->magic(), output);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  // optional uint64 points = 3;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->points(), output);
  }

  // optional uint64 points_number = 4;
  if (has_points_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->points_number(), output);
  }

  // optional uint64 edges = 5;
  if (has_edges()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->edges(), output);
  }

  // optional uint64 edges_number = 6;
  if (has_edges_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->edges_number(), output);
  }

  // optional uint64 edge_refs = 7;
  if (has_edge_refs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->edge_refs(), output);
  }

  // optional uint64 edge_refs_number = 8;
  if (has_edge_refs_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->edge_refs_number(), output);
  }

  // optional uint64 parts = 9;
  if (has_parts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->parts(), output);
  }

  // optional uint64 parts_number = 10;
  if (has_parts_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->parts_number(), output);
  }

  // optional uint64 polygons = 11;
  if (has_polygons()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->polygons(), output);
  }

  // optional uint64 polygons_number = 12;
  if (has_polygons_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->polygons_number(), output);
  }

  // optional uint64 polygon_refs = 13;
  if (has_polygon_refs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->polygon_refs(), output);
  }

  // optional uint64 polygon_refs_number = 14;
  if (has_polygon_refs_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->polygon_refs_number(), output);
  }

  // optional uint64 boxes = 15;
  if (has_boxes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->boxes(), output);
  }

  // optional uint64 boxes_number = 16;
  if (has_boxes_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->boxes_number(), output);
  }

  // optional uint64 blobs = 17;
  if (has_blobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->blobs(), output);
  }

  // optional uint64 blobs_number = 18;
  if (has_blobs_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->blobs_number(), output);
  }

  // optional uint64 kvs = 19;
  if (has_kvs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->kvs(), output);
  }

  // optional uint64 kvs_number = 20;
  if (has_kvs_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->kvs_number(), output);
  }

  // optional uint64 regions = 21;
  if (has_regions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->regions(), output);
  }

  // optional uint64 regions_number = 22;
  if (has_regions_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->regions_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.proto.geo_data_t)
}

::google::protobuf::uint8* geo_data_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.proto.geo_data_t)
  // optional uint64 magic = 1;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->magic(), target);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  // optional uint64 points = 3;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->points(), target);
  }

  // optional uint64 points_number = 4;
  if (has_points_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->points_number(), target);
  }

  // optional uint64 edges = 5;
  if (has_edges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->edges(), target);
  }

  // optional uint64 edges_number = 6;
  if (has_edges_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->edges_number(), target);
  }

  // optional uint64 edge_refs = 7;
  if (has_edge_refs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->edge_refs(), target);
  }

  // optional uint64 edge_refs_number = 8;
  if (has_edge_refs_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->edge_refs_number(), target);
  }

  // optional uint64 parts = 9;
  if (has_parts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->parts(), target);
  }

  // optional uint64 parts_number = 10;
  if (has_parts_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->parts_number(), target);
  }

  // optional uint64 polygons = 11;
  if (has_polygons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->polygons(), target);
  }

  // optional uint64 polygons_number = 12;
  if (has_polygons_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->polygons_number(), target);
  }

  // optional uint64 polygon_refs = 13;
  if (has_polygon_refs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->polygon_refs(), target);
  }

  // optional uint64 polygon_refs_number = 14;
  if (has_polygon_refs_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->polygon_refs_number(), target);
  }

  // optional uint64 boxes = 15;
  if (has_boxes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->boxes(), target);
  }

  // optional uint64 boxes_number = 16;
  if (has_boxes_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->boxes_number(), target);
  }

  // optional uint64 blobs = 17;
  if (has_blobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->blobs(), target);
  }

  // optional uint64 blobs_number = 18;
  if (has_blobs_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->blobs_number(), target);
  }

  // optional uint64 kvs = 19;
  if (has_kvs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->kvs(), target);
  }

  // optional uint64 kvs_number = 20;
  if (has_kvs_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->kvs_number(), target);
  }

  // optional uint64 regions = 21;
  if (has_regions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->regions(), target);
  }

  // optional uint64 regions_number = 22;
  if (has_regions_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->regions_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.proto.geo_data_t)
  return target;
}

int geo_data_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 magic = 1;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->magic());
    }

    // optional uint64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // optional uint64 points = 3;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->points());
    }

    // optional uint64 points_number = 4;
    if (has_points_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->points_number());
    }

    // optional uint64 edges = 5;
    if (has_edges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->edges());
    }

    // optional uint64 edges_number = 6;
    if (has_edges_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->edges_number());
    }

    // optional uint64 edge_refs = 7;
    if (has_edge_refs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->edge_refs());
    }

    // optional uint64 edge_refs_number = 8;
    if (has_edge_refs_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->edge_refs_number());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 parts = 9;
    if (has_parts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parts());
    }

    // optional uint64 parts_number = 10;
    if (has_parts_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parts_number());
    }

    // optional uint64 polygons = 11;
    if (has_polygons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->polygons());
    }

    // optional uint64 polygons_number = 12;
    if (has_polygons_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->polygons_number());
    }

    // optional uint64 polygon_refs = 13;
    if (has_polygon_refs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->polygon_refs());
    }

    // optional uint64 polygon_refs_number = 14;
    if (has_polygon_refs_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->polygon_refs_number());
    }

    // optional uint64 boxes = 15;
    if (has_boxes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->boxes());
    }

    // optional uint64 boxes_number = 16;
    if (has_boxes_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->boxes_number());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional uint64 blobs = 17;
    if (has_blobs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blobs());
    }

    // optional uint64 blobs_number = 18;
    if (has_blobs_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blobs_number());
    }

    // optional uint64 kvs = 19;
    if (has_kvs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kvs());
    }

    // optional uint64 kvs_number = 20;
    if (has_kvs_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kvs_number());
    }

    // optional uint64 regions = 21;
    if (has_regions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->regions());
    }

    // optional uint64 regions_number = 22;
    if (has_regions_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->regions_number());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void geo_data_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const geo_data_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const geo_data_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void geo_data_t::MergeFrom(const geo_data_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_points_number()) {
      set_points_number(from.points_number());
    }
    if (from.has_edges()) {
      set_edges(from.edges());
    }
    if (from.has_edges_number()) {
      set_edges_number(from.edges_number());
    }
    if (from.has_edge_refs()) {
      set_edge_refs(from.edge_refs());
    }
    if (from.has_edge_refs_number()) {
      set_edge_refs_number(from.edge_refs_number());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_parts()) {
      set_parts(from.parts());
    }
    if (from.has_parts_number()) {
      set_parts_number(from.parts_number());
    }
    if (from.has_polygons()) {
      set_polygons(from.polygons());
    }
    if (from.has_polygons_number()) {
      set_polygons_number(from.polygons_number());
    }
    if (from.has_polygon_refs()) {
      set_polygon_refs(from.polygon_refs());
    }
    if (from.has_polygon_refs_number()) {
      set_polygon_refs_number(from.polygon_refs_number());
    }
    if (from.has_boxes()) {
      set_boxes(from.boxes());
    }
    if (from.has_boxes_number()) {
      set_boxes_number(from.boxes_number());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_blobs()) {
      set_blobs(from.blobs());
    }
    if (from.has_blobs_number()) {
      set_blobs_number(from.blobs_number());
    }
    if (from.has_kvs()) {
      set_kvs(from.kvs());
    }
    if (from.has_kvs_number()) {
      set_kvs_number(from.kvs_number());
    }
    if (from.has_regions()) {
      set_regions(from.regions());
    }
    if (from.has_regions_number()) {
      set_regions_number(from.regions_number());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void geo_data_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void geo_data_t::CopyFrom(const geo_data_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool geo_data_t::IsInitialized() const {

  return true;
}

void geo_data_t::Swap(geo_data_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void geo_data_t::InternalSwap(geo_data_t* other) {
  std::swap(magic_, other->magic_);
  std::swap(version_, other->version_);
  std::swap(points_, other->points_);
  std::swap(points_number_, other->points_number_);
  std::swap(edges_, other->edges_);
  std::swap(edges_number_, other->edges_number_);
  std::swap(edge_refs_, other->edge_refs_);
  std::swap(edge_refs_number_, other->edge_refs_number_);
  std::swap(parts_, other->parts_);
  std::swap(parts_number_, other->parts_number_);
  std::swap(polygons_, other->polygons_);
  std::swap(polygons_number_, other->polygons_number_);
  std::swap(polygon_refs_, other->polygon_refs_);
  std::swap(polygon_refs_number_, other->polygon_refs_number_);
  std::swap(boxes_, other->boxes_);
  std::swap(boxes_number_, other->boxes_number_);
  std::swap(blobs_, other->blobs_);
  std::swap(blobs_number_, other->blobs_number_);
  std::swap(kvs_, other->kvs_);
  std::swap(kvs_number_, other->kvs_number_);
  std::swap(regions_, other->regions_);
  std::swap(regions_number_, other->regions_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata geo_data_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = geo_data_t_descriptor_;
  metadata.reflection = geo_data_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// geo_data_t

// optional uint64 magic = 1;
bool geo_data_t::has_magic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void geo_data_t::set_has_magic() {
  _has_bits_[0] |= 0x00000001u;
}
void geo_data_t::clear_has_magic() {
  _has_bits_[0] &= ~0x00000001u;
}
void geo_data_t::clear_magic() {
  magic_ = GOOGLE_ULONGLONG(0);
  clear_has_magic();
}
 ::google::protobuf::uint64 geo_data_t::magic() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.magic)
  return magic_;
}
 void geo_data_t::set_magic(::google::protobuf::uint64 value) {
  set_has_magic();
  magic_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.magic)
}

// optional uint64 version = 2;
bool geo_data_t::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void geo_data_t::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void geo_data_t::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void geo_data_t::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::uint64 geo_data_t::version() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.version)
  return version_;
}
 void geo_data_t::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.version)
}

// optional uint64 points = 3;
bool geo_data_t::has_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void geo_data_t::set_has_points() {
  _has_bits_[0] |= 0x00000004u;
}
void geo_data_t::clear_has_points() {
  _has_bits_[0] &= ~0x00000004u;
}
void geo_data_t::clear_points() {
  points_ = GOOGLE_ULONGLONG(0);
  clear_has_points();
}
 ::google::protobuf::uint64 geo_data_t::points() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.points)
  return points_;
}
 void geo_data_t::set_points(::google::protobuf::uint64 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.points)
}

// optional uint64 points_number = 4;
bool geo_data_t::has_points_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void geo_data_t::set_has_points_number() {
  _has_bits_[0] |= 0x00000008u;
}
void geo_data_t::clear_has_points_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void geo_data_t::clear_points_number() {
  points_number_ = GOOGLE_ULONGLONG(0);
  clear_has_points_number();
}
 ::google::protobuf::uint64 geo_data_t::points_number() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.points_number)
  return points_number_;
}
 void geo_data_t::set_points_number(::google::protobuf::uint64 value) {
  set_has_points_number();
  points_number_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.points_number)
}

// optional uint64 edges = 5;
bool geo_data_t::has_edges() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void geo_data_t::set_has_edges() {
  _has_bits_[0] |= 0x00000010u;
}
void geo_data_t::clear_has_edges() {
  _has_bits_[0] &= ~0x00000010u;
}
void geo_data_t::clear_edges() {
  edges_ = GOOGLE_ULONGLONG(0);
  clear_has_edges();
}
 ::google::protobuf::uint64 geo_data_t::edges() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.edges)
  return edges_;
}
 void geo_data_t::set_edges(::google::protobuf::uint64 value) {
  set_has_edges();
  edges_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.edges)
}

// optional uint64 edges_number = 6;
bool geo_data_t::has_edges_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void geo_data_t::set_has_edges_number() {
  _has_bits_[0] |= 0x00000020u;
}
void geo_data_t::clear_has_edges_number() {
  _has_bits_[0] &= ~0x00000020u;
}
void geo_data_t::clear_edges_number() {
  edges_number_ = GOOGLE_ULONGLONG(0);
  clear_has_edges_number();
}
 ::google::protobuf::uint64 geo_data_t::edges_number() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.edges_number)
  return edges_number_;
}
 void geo_data_t::set_edges_number(::google::protobuf::uint64 value) {
  set_has_edges_number();
  edges_number_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.edges_number)
}

// optional uint64 edge_refs = 7;
bool geo_data_t::has_edge_refs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void geo_data_t::set_has_edge_refs() {
  _has_bits_[0] |= 0x00000040u;
}
void geo_data_t::clear_has_edge_refs() {
  _has_bits_[0] &= ~0x00000040u;
}
void geo_data_t::clear_edge_refs() {
  edge_refs_ = GOOGLE_ULONGLONG(0);
  clear_has_edge_refs();
}
 ::google::protobuf::uint64 geo_data_t::edge_refs() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.edge_refs)
  return edge_refs_;
}
 void geo_data_t::set_edge_refs(::google::protobuf::uint64 value) {
  set_has_edge_refs();
  edge_refs_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.edge_refs)
}

// optional uint64 edge_refs_number = 8;
bool geo_data_t::has_edge_refs_number() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void geo_data_t::set_has_edge_refs_number() {
  _has_bits_[0] |= 0x00000080u;
}
void geo_data_t::clear_has_edge_refs_number() {
  _has_bits_[0] &= ~0x00000080u;
}
void geo_data_t::clear_edge_refs_number() {
  edge_refs_number_ = GOOGLE_ULONGLONG(0);
  clear_has_edge_refs_number();
}
 ::google::protobuf::uint64 geo_data_t::edge_refs_number() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.edge_refs_number)
  return edge_refs_number_;
}
 void geo_data_t::set_edge_refs_number(::google::protobuf::uint64 value) {
  set_has_edge_refs_number();
  edge_refs_number_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.edge_refs_number)
}

// optional uint64 parts = 9;
bool geo_data_t::has_parts() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void geo_data_t::set_has_parts() {
  _has_bits_[0] |= 0x00000100u;
}
void geo_data_t::clear_has_parts() {
  _has_bits_[0] &= ~0x00000100u;
}
void geo_data_t::clear_parts() {
  parts_ = GOOGLE_ULONGLONG(0);
  clear_has_parts();
}
 ::google::protobuf::uint64 geo_data_t::parts() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.parts)
  return parts_;
}
 void geo_data_t::set_parts(::google::protobuf::uint64 value) {
  set_has_parts();
  parts_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.parts)
}

// optional uint64 parts_number = 10;
bool geo_data_t::has_parts_number() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void geo_data_t::set_has_parts_number() {
  _has_bits_[0] |= 0x00000200u;
}
void geo_data_t::clear_has_parts_number() {
  _has_bits_[0] &= ~0x00000200u;
}
void geo_data_t::clear_parts_number() {
  parts_number_ = GOOGLE_ULONGLONG(0);
  clear_has_parts_number();
}
 ::google::protobuf::uint64 geo_data_t::parts_number() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.parts_number)
  return parts_number_;
}
 void geo_data_t::set_parts_number(::google::protobuf::uint64 value) {
  set_has_parts_number();
  parts_number_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.parts_number)
}

// optional uint64 polygons = 11;
bool geo_data_t::has_polygons() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void geo_data_t::set_has_polygons() {
  _has_bits_[0] |= 0x00000400u;
}
void geo_data_t::clear_has_polygons() {
  _has_bits_[0] &= ~0x00000400u;
}
void geo_data_t::clear_polygons() {
  polygons_ = GOOGLE_ULONGLONG(0);
  clear_has_polygons();
}
 ::google::protobuf::uint64 geo_data_t::polygons() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.polygons)
  return polygons_;
}
 void geo_data_t::set_polygons(::google::protobuf::uint64 value) {
  set_has_polygons();
  polygons_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.polygons)
}

// optional uint64 polygons_number = 12;
bool geo_data_t::has_polygons_number() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void geo_data_t::set_has_polygons_number() {
  _has_bits_[0] |= 0x00000800u;
}
void geo_data_t::clear_has_polygons_number() {
  _has_bits_[0] &= ~0x00000800u;
}
void geo_data_t::clear_polygons_number() {
  polygons_number_ = GOOGLE_ULONGLONG(0);
  clear_has_polygons_number();
}
 ::google::protobuf::uint64 geo_data_t::polygons_number() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.polygons_number)
  return polygons_number_;
}
 void geo_data_t::set_polygons_number(::google::protobuf::uint64 value) {
  set_has_polygons_number();
  polygons_number_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.polygons_number)
}

// optional uint64 polygon_refs = 13;
bool geo_data_t::has_polygon_refs() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void geo_data_t::set_has_polygon_refs() {
  _has_bits_[0] |= 0x00001000u;
}
void geo_data_t::clear_has_polygon_refs() {
  _has_bits_[0] &= ~0x00001000u;
}
void geo_data_t::clear_polygon_refs() {
  polygon_refs_ = GOOGLE_ULONGLONG(0);
  clear_has_polygon_refs();
}
 ::google::protobuf::uint64 geo_data_t::polygon_refs() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.polygon_refs)
  return polygon_refs_;
}
 void geo_data_t::set_polygon_refs(::google::protobuf::uint64 value) {
  set_has_polygon_refs();
  polygon_refs_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.polygon_refs)
}

// optional uint64 polygon_refs_number = 14;
bool geo_data_t::has_polygon_refs_number() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void geo_data_t::set_has_polygon_refs_number() {
  _has_bits_[0] |= 0x00002000u;
}
void geo_data_t::clear_has_polygon_refs_number() {
  _has_bits_[0] &= ~0x00002000u;
}
void geo_data_t::clear_polygon_refs_number() {
  polygon_refs_number_ = GOOGLE_ULONGLONG(0);
  clear_has_polygon_refs_number();
}
 ::google::protobuf::uint64 geo_data_t::polygon_refs_number() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.polygon_refs_number)
  return polygon_refs_number_;
}
 void geo_data_t::set_polygon_refs_number(::google::protobuf::uint64 value) {
  set_has_polygon_refs_number();
  polygon_refs_number_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.polygon_refs_number)
}

// optional uint64 boxes = 15;
bool geo_data_t::has_boxes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void geo_data_t::set_has_boxes() {
  _has_bits_[0] |= 0x00004000u;
}
void geo_data_t::clear_has_boxes() {
  _has_bits_[0] &= ~0x00004000u;
}
void geo_data_t::clear_boxes() {
  boxes_ = GOOGLE_ULONGLONG(0);
  clear_has_boxes();
}
 ::google::protobuf::uint64 geo_data_t::boxes() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.boxes)
  return boxes_;
}
 void geo_data_t::set_boxes(::google::protobuf::uint64 value) {
  set_has_boxes();
  boxes_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.boxes)
}

// optional uint64 boxes_number = 16;
bool geo_data_t::has_boxes_number() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void geo_data_t::set_has_boxes_number() {
  _has_bits_[0] |= 0x00008000u;
}
void geo_data_t::clear_has_boxes_number() {
  _has_bits_[0] &= ~0x00008000u;
}
void geo_data_t::clear_boxes_number() {
  boxes_number_ = GOOGLE_ULONGLONG(0);
  clear_has_boxes_number();
}
 ::google::protobuf::uint64 geo_data_t::boxes_number() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.boxes_number)
  return boxes_number_;
}
 void geo_data_t::set_boxes_number(::google::protobuf::uint64 value) {
  set_has_boxes_number();
  boxes_number_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.boxes_number)
}

// optional uint64 blobs = 17;
bool geo_data_t::has_blobs() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void geo_data_t::set_has_blobs() {
  _has_bits_[0] |= 0x00010000u;
}
void geo_data_t::clear_has_blobs() {
  _has_bits_[0] &= ~0x00010000u;
}
void geo_data_t::clear_blobs() {
  blobs_ = GOOGLE_ULONGLONG(0);
  clear_has_blobs();
}
 ::google::protobuf::uint64 geo_data_t::blobs() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.blobs)
  return blobs_;
}
 void geo_data_t::set_blobs(::google::protobuf::uint64 value) {
  set_has_blobs();
  blobs_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.blobs)
}

// optional uint64 blobs_number = 18;
bool geo_data_t::has_blobs_number() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void geo_data_t::set_has_blobs_number() {
  _has_bits_[0] |= 0x00020000u;
}
void geo_data_t::clear_has_blobs_number() {
  _has_bits_[0] &= ~0x00020000u;
}
void geo_data_t::clear_blobs_number() {
  blobs_number_ = GOOGLE_ULONGLONG(0);
  clear_has_blobs_number();
}
 ::google::protobuf::uint64 geo_data_t::blobs_number() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.blobs_number)
  return blobs_number_;
}
 void geo_data_t::set_blobs_number(::google::protobuf::uint64 value) {
  set_has_blobs_number();
  blobs_number_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.blobs_number)
}

// optional uint64 kvs = 19;
bool geo_data_t::has_kvs() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void geo_data_t::set_has_kvs() {
  _has_bits_[0] |= 0x00040000u;
}
void geo_data_t::clear_has_kvs() {
  _has_bits_[0] &= ~0x00040000u;
}
void geo_data_t::clear_kvs() {
  kvs_ = GOOGLE_ULONGLONG(0);
  clear_has_kvs();
}
 ::google::protobuf::uint64 geo_data_t::kvs() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.kvs)
  return kvs_;
}
 void geo_data_t::set_kvs(::google::protobuf::uint64 value) {
  set_has_kvs();
  kvs_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.kvs)
}

// optional uint64 kvs_number = 20;
bool geo_data_t::has_kvs_number() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void geo_data_t::set_has_kvs_number() {
  _has_bits_[0] |= 0x00080000u;
}
void geo_data_t::clear_has_kvs_number() {
  _has_bits_[0] &= ~0x00080000u;
}
void geo_data_t::clear_kvs_number() {
  kvs_number_ = GOOGLE_ULONGLONG(0);
  clear_has_kvs_number();
}
 ::google::protobuf::uint64 geo_data_t::kvs_number() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.kvs_number)
  return kvs_number_;
}
 void geo_data_t::set_kvs_number(::google::protobuf::uint64 value) {
  set_has_kvs_number();
  kvs_number_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.kvs_number)
}

// optional uint64 regions = 21;
bool geo_data_t::has_regions() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void geo_data_t::set_has_regions() {
  _has_bits_[0] |= 0x00100000u;
}
void geo_data_t::clear_has_regions() {
  _has_bits_[0] &= ~0x00100000u;
}
void geo_data_t::clear_regions() {
  regions_ = GOOGLE_ULONGLONG(0);
  clear_has_regions();
}
 ::google::protobuf::uint64 geo_data_t::regions() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.regions)
  return regions_;
}
 void geo_data_t::set_regions(::google::protobuf::uint64 value) {
  set_has_regions();
  regions_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.regions)
}

// optional uint64 regions_number = 22;
bool geo_data_t::has_regions_number() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void geo_data_t::set_has_regions_number() {
  _has_bits_[0] |= 0x00200000u;
}
void geo_data_t::clear_has_regions_number() {
  _has_bits_[0] &= ~0x00200000u;
}
void geo_data_t::clear_regions_number() {
  regions_number_ = GOOGLE_ULONGLONG(0);
  clear_has_regions_number();
}
 ::google::protobuf::uint64 geo_data_t::regions_number() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.geo_data_t.regions_number)
  return regions_number_;
}
 void geo_data_t::set_regions_number(::google::protobuf::uint64 value) {
  set_has_regions_number();
  regions_number_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.geo_data_t.regions_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace geo_base

// @@protoc_insertion_point(global_scope)
