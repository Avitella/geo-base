// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geo_base/proto/def/region.proto

#ifndef PROTOBUF_geo_5fbase_2fproto_2fdef_2fregion_2eproto__INCLUDED
#define PROTOBUF_geo_5fbase_2fproto_2fdef_2fregion_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace geo_base {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_geo_5fbase_2fproto_2fdef_2fregion_2eproto();
void protobuf_AssignDesc_geo_5fbase_2fproto_2fdef_2fregion_2eproto();
void protobuf_ShutdownFile_geo_5fbase_2fproto_2fdef_2fregion_2eproto();

class kv_t;
class location_t;
class polygon_t;
class region_t;

enum polygon_t_type_t {
  polygon_t_type_t_TYPE_UNKNOWN = 0,
  polygon_t_type_t_TYPE_INNER = 1,
  polygon_t_type_t_TYPE_OUTER = 2
};
bool polygon_t_type_t_IsValid(int value);
const polygon_t_type_t polygon_t_type_t_type_t_MIN = polygon_t_type_t_TYPE_UNKNOWN;
const polygon_t_type_t polygon_t_type_t_type_t_MAX = polygon_t_type_t_TYPE_OUTER;
const int polygon_t_type_t_type_t_ARRAYSIZE = polygon_t_type_t_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* polygon_t_type_t_descriptor();
inline const ::std::string& polygon_t_type_t_Name(polygon_t_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    polygon_t_type_t_descriptor(), value);
}
inline bool polygon_t_type_t_Parse(
    const ::std::string& name, polygon_t_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<polygon_t_type_t>(
    polygon_t_type_t_descriptor(), name, value);
}
// ===================================================================

class location_t : public ::google::protobuf::Message {
 public:
  location_t();
  virtual ~location_t();

  location_t(const location_t& from);

  inline location_t& operator=(const location_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const location_t& default_instance();

  void UnsafeArenaSwap(location_t* other);
  void Swap(location_t* other);

  // implements Message ----------------------------------------------

  inline location_t* New() const { return New(NULL); }

  location_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const location_t& from);
  void MergeFrom(const location_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(location_t* other);
  protected:
  explicit location_t(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double lat = 1;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  double lat() const;
  void set_lat(double value);

  // required double lon = 2;
  bool has_lon() const;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  double lon() const;
  void set_lon(double value);

  // @@protoc_insertion_point(class_scope:geo_base.proto.location_t)
 private:
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lon();
  inline void clear_has_lon();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double lat_;
  double lon_;
  friend void  protobuf_AddDesc_geo_5fbase_2fproto_2fdef_2fregion_2eproto();
  friend void protobuf_AssignDesc_geo_5fbase_2fproto_2fdef_2fregion_2eproto();
  friend void protobuf_ShutdownFile_geo_5fbase_2fproto_2fdef_2fregion_2eproto();

  void InitAsDefaultInstance();
  static location_t* default_instance_;
};
// -------------------------------------------------------------------

class polygon_t : public ::google::protobuf::Message {
 public:
  polygon_t();
  virtual ~polygon_t();

  polygon_t(const polygon_t& from);

  inline polygon_t& operator=(const polygon_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const polygon_t& default_instance();

  void UnsafeArenaSwap(polygon_t* other);
  void Swap(polygon_t* other);

  // implements Message ----------------------------------------------

  inline polygon_t* New() const { return New(NULL); }

  polygon_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const polygon_t& from);
  void MergeFrom(const polygon_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(polygon_t* other);
  protected:
  explicit polygon_t(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef polygon_t_type_t type_t;
  static const type_t TYPE_UNKNOWN = polygon_t_type_t_TYPE_UNKNOWN;
  static const type_t TYPE_INNER = polygon_t_type_t_TYPE_INNER;
  static const type_t TYPE_OUTER = polygon_t_type_t_TYPE_OUTER;
  static inline bool type_t_IsValid(int value) {
    return polygon_t_type_t_IsValid(value);
  }
  static const type_t type_t_MIN =
    polygon_t_type_t_type_t_MIN;
  static const type_t type_t_MAX =
    polygon_t_type_t_type_t_MAX;
  static const int type_t_ARRAYSIZE =
    polygon_t_type_t_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type_t_descriptor() {
    return polygon_t_type_t_descriptor();
  }
  static inline const ::std::string& type_t_Name(type_t value) {
    return polygon_t_type_t_Name(value);
  }
  static inline bool type_t_Parse(const ::std::string& name,
      type_t* value) {
    return polygon_t_type_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 polygon_id = 1;
  bool has_polygon_id() const;
  void clear_polygon_id();
  static const int kPolygonIdFieldNumber = 1;
  ::google::protobuf::uint64 polygon_id() const;
  void set_polygon_id(::google::protobuf::uint64 value);

  // repeated .geo_base.proto.location_t locations = 2;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 2;
  const ::geo_base::proto::location_t& locations(int index) const;
  ::geo_base::proto::location_t* mutable_locations(int index);
  ::geo_base::proto::location_t* add_locations();
  ::google::protobuf::RepeatedPtrField< ::geo_base::proto::location_t >*
      mutable_locations();
  const ::google::protobuf::RepeatedPtrField< ::geo_base::proto::location_t >&
      locations() const;

  // required .geo_base.proto.polygon_t.type_t type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::geo_base::proto::polygon_t_type_t type() const;
  void set_type(::geo_base::proto::polygon_t_type_t value);

  // @@protoc_insertion_point(class_scope:geo_base.proto.polygon_t)
 private:
  inline void set_has_polygon_id();
  inline void clear_has_polygon_id();
  inline void set_has_type();
  inline void clear_has_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 polygon_id_;
  ::google::protobuf::RepeatedPtrField< ::geo_base::proto::location_t > locations_;
  int type_;
  friend void  protobuf_AddDesc_geo_5fbase_2fproto_2fdef_2fregion_2eproto();
  friend void protobuf_AssignDesc_geo_5fbase_2fproto_2fdef_2fregion_2eproto();
  friend void protobuf_ShutdownFile_geo_5fbase_2fproto_2fdef_2fregion_2eproto();

  void InitAsDefaultInstance();
  static polygon_t* default_instance_;
};
// -------------------------------------------------------------------

class kv_t : public ::google::protobuf::Message {
 public:
  kv_t();
  virtual ~kv_t();

  kv_t(const kv_t& from);

  inline kv_t& operator=(const kv_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const kv_t& default_instance();

  void UnsafeArenaSwap(kv_t* other);
  void Swap(kv_t* other);

  // implements Message ----------------------------------------------

  inline kv_t* New() const { return New(NULL); }

  kv_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const kv_t& from);
  void MergeFrom(const kv_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(kv_t* other);
  protected:
  explicit kv_t(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string k = 1;
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 1;
  const ::std::string& k() const;
  void set_k(const ::std::string& value);
  void set_k(const char* value);
  void set_k(const char* value, size_t size);
  ::std::string* mutable_k();
  ::std::string* release_k();
  void set_allocated_k(::std::string* k);
  ::std::string* unsafe_arena_release_k();
  void unsafe_arena_set_allocated_k(
      ::std::string* k);

  // required string v = 2;
  bool has_v() const;
  void clear_v();
  static const int kVFieldNumber = 2;
  const ::std::string& v() const;
  void set_v(const ::std::string& value);
  void set_v(const char* value);
  void set_v(const char* value, size_t size);
  ::std::string* mutable_v();
  ::std::string* release_v();
  void set_allocated_v(::std::string* v);
  ::std::string* unsafe_arena_release_v();
  void unsafe_arena_set_allocated_v(
      ::std::string* v);

  // @@protoc_insertion_point(class_scope:geo_base.proto.kv_t)
 private:
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_v();
  inline void clear_has_v();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr k_;
  ::google::protobuf::internal::ArenaStringPtr v_;
  friend void  protobuf_AddDesc_geo_5fbase_2fproto_2fdef_2fregion_2eproto();
  friend void protobuf_AssignDesc_geo_5fbase_2fproto_2fdef_2fregion_2eproto();
  friend void protobuf_ShutdownFile_geo_5fbase_2fproto_2fdef_2fregion_2eproto();

  void InitAsDefaultInstance();
  static kv_t* default_instance_;
};
// -------------------------------------------------------------------

class region_t : public ::google::protobuf::Message {
 public:
  region_t();
  virtual ~region_t();

  region_t(const region_t& from);

  inline region_t& operator=(const region_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const region_t& default_instance();

  void UnsafeArenaSwap(region_t* other);
  void Swap(region_t* other);

  // implements Message ----------------------------------------------

  inline region_t* New() const { return New(NULL); }

  region_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const region_t& from);
  void MergeFrom(const region_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(region_t* other);
  protected:
  explicit region_t(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 region_id = 1;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::uint64 region_id() const;
  void set_region_id(::google::protobuf::uint64 value);

  // optional uint64 parent_id = 2;
  bool has_parent_id() const;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 2;
  ::google::protobuf::uint64 parent_id() const;
  void set_parent_id(::google::protobuf::uint64 value);

  // repeated .geo_base.proto.polygon_t polygons = 3;
  int polygons_size() const;
  void clear_polygons();
  static const int kPolygonsFieldNumber = 3;
  const ::geo_base::proto::polygon_t& polygons(int index) const;
  ::geo_base::proto::polygon_t* mutable_polygons(int index);
  ::geo_base::proto::polygon_t* add_polygons();
  ::google::protobuf::RepeatedPtrField< ::geo_base::proto::polygon_t >*
      mutable_polygons();
  const ::google::protobuf::RepeatedPtrField< ::geo_base::proto::polygon_t >&
      polygons() const;

  // repeated .geo_base.proto.kv_t kvs = 4;
  int kvs_size() const;
  void clear_kvs();
  static const int kKvsFieldNumber = 4;
  const ::geo_base::proto::kv_t& kvs(int index) const;
  ::geo_base::proto::kv_t* mutable_kvs(int index);
  ::geo_base::proto::kv_t* add_kvs();
  ::google::protobuf::RepeatedPtrField< ::geo_base::proto::kv_t >*
      mutable_kvs();
  const ::google::protobuf::RepeatedPtrField< ::geo_base::proto::kv_t >&
      kvs() const;

  // repeated string blobs = 5;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 5;
  const ::std::string& blobs(int index) const;
  ::std::string* mutable_blobs(int index);
  void set_blobs(int index, const ::std::string& value);
  void set_blobs(int index, const char* value);
  void set_blobs(int index, const char* value, size_t size);
  ::std::string* add_blobs();
  void add_blobs(const ::std::string& value);
  void add_blobs(const char* value);
  void add_blobs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& blobs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_blobs();

  // @@protoc_insertion_point(class_scope:geo_base.proto.region_t)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 region_id_;
  ::google::protobuf::uint64 parent_id_;
  ::google::protobuf::RepeatedPtrField< ::geo_base::proto::polygon_t > polygons_;
  ::google::protobuf::RepeatedPtrField< ::geo_base::proto::kv_t > kvs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> blobs_;
  friend void  protobuf_AddDesc_geo_5fbase_2fproto_2fdef_2fregion_2eproto();
  friend void protobuf_AssignDesc_geo_5fbase_2fproto_2fdef_2fregion_2eproto();
  friend void protobuf_ShutdownFile_geo_5fbase_2fproto_2fdef_2fregion_2eproto();

  void InitAsDefaultInstance();
  static region_t* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// location_t

// required double lat = 1;
inline bool location_t::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void location_t::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void location_t::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void location_t::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double location_t::lat() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.location_t.lat)
  return lat_;
}
inline void location_t::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.location_t.lat)
}

// required double lon = 2;
inline bool location_t::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void location_t::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void location_t::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void location_t::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double location_t::lon() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.location_t.lon)
  return lon_;
}
inline void location_t::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.location_t.lon)
}

// -------------------------------------------------------------------

// polygon_t

// required uint64 polygon_id = 1;
inline bool polygon_t::has_polygon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void polygon_t::set_has_polygon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void polygon_t::clear_has_polygon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void polygon_t::clear_polygon_id() {
  polygon_id_ = GOOGLE_ULONGLONG(0);
  clear_has_polygon_id();
}
inline ::google::protobuf::uint64 polygon_t::polygon_id() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.polygon_t.polygon_id)
  return polygon_id_;
}
inline void polygon_t::set_polygon_id(::google::protobuf::uint64 value) {
  set_has_polygon_id();
  polygon_id_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.polygon_t.polygon_id)
}

// repeated .geo_base.proto.location_t locations = 2;
inline int polygon_t::locations_size() const {
  return locations_.size();
}
inline void polygon_t::clear_locations() {
  locations_.Clear();
}
inline const ::geo_base::proto::location_t& polygon_t::locations(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.proto.polygon_t.locations)
  return locations_.Get(index);
}
inline ::geo_base::proto::location_t* polygon_t::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.proto.polygon_t.locations)
  return locations_.Mutable(index);
}
inline ::geo_base::proto::location_t* polygon_t::add_locations() {
  // @@protoc_insertion_point(field_add:geo_base.proto.polygon_t.locations)
  return locations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::geo_base::proto::location_t >*
polygon_t::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.proto.polygon_t.locations)
  return &locations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::geo_base::proto::location_t >&
polygon_t::locations() const {
  // @@protoc_insertion_point(field_list:geo_base.proto.polygon_t.locations)
  return locations_;
}

// required .geo_base.proto.polygon_t.type_t type = 3;
inline bool polygon_t::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void polygon_t::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void polygon_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void polygon_t::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::geo_base::proto::polygon_t_type_t polygon_t::type() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.polygon_t.type)
  return static_cast< ::geo_base::proto::polygon_t_type_t >(type_);
}
inline void polygon_t::set_type(::geo_base::proto::polygon_t_type_t value) {
  assert(::geo_base::proto::polygon_t_type_t_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.polygon_t.type)
}

// -------------------------------------------------------------------

// kv_t

// required string k = 1;
inline bool kv_t::has_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void kv_t::set_has_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void kv_t::clear_has_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void kv_t::clear_k() {
  k_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_k();
}
inline const ::std::string& kv_t::k() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.kv_t.k)
  return k_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void kv_t::set_k(const ::std::string& value) {
  set_has_k();
  k_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.proto.kv_t.k)
}
inline void kv_t::set_k(const char* value) {
  set_has_k();
  k_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.proto.kv_t.k)
}
inline void kv_t::set_k(const char* value,
    size_t size) {
  set_has_k();
  k_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.proto.kv_t.k)
}
inline ::std::string* kv_t::mutable_k() {
  set_has_k();
  // @@protoc_insertion_point(field_mutable:geo_base.proto.kv_t.k)
  return k_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* kv_t::release_k() {
  clear_has_k();
  return k_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* kv_t::unsafe_arena_release_k() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_k();
  return k_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void kv_t::set_allocated_k(::std::string* k) {
  if (k != NULL) {
    set_has_k();
  } else {
    clear_has_k();
  }
  k_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.proto.kv_t.k)
}
inline void kv_t::unsafe_arena_set_allocated_k(
    ::std::string* k) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (k != NULL) {
    set_has_k();
  } else {
    clear_has_k();
  }
  k_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      k, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.proto.kv_t.k)
}

// required string v = 2;
inline bool kv_t::has_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void kv_t::set_has_v() {
  _has_bits_[0] |= 0x00000002u;
}
inline void kv_t::clear_has_v() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void kv_t::clear_v() {
  v_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_v();
}
inline const ::std::string& kv_t::v() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.kv_t.v)
  return v_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void kv_t::set_v(const ::std::string& value) {
  set_has_v();
  v_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.proto.kv_t.v)
}
inline void kv_t::set_v(const char* value) {
  set_has_v();
  v_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.proto.kv_t.v)
}
inline void kv_t::set_v(const char* value,
    size_t size) {
  set_has_v();
  v_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.proto.kv_t.v)
}
inline ::std::string* kv_t::mutable_v() {
  set_has_v();
  // @@protoc_insertion_point(field_mutable:geo_base.proto.kv_t.v)
  return v_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* kv_t::release_v() {
  clear_has_v();
  return v_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* kv_t::unsafe_arena_release_v() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_v();
  return v_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void kv_t::set_allocated_v(::std::string* v) {
  if (v != NULL) {
    set_has_v();
  } else {
    clear_has_v();
  }
  v_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.proto.kv_t.v)
}
inline void kv_t::unsafe_arena_set_allocated_v(
    ::std::string* v) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (v != NULL) {
    set_has_v();
  } else {
    clear_has_v();
  }
  v_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      v, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.proto.kv_t.v)
}

// -------------------------------------------------------------------

// region_t

// required uint64 region_id = 1;
inline bool region_t::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void region_t::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void region_t::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void region_t::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
  clear_has_region_id();
}
inline ::google::protobuf::uint64 region_t::region_id() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.region_t.region_id)
  return region_id_;
}
inline void region_t::set_region_id(::google::protobuf::uint64 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.region_t.region_id)
}

// optional uint64 parent_id = 2;
inline bool region_t::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void region_t::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void region_t::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void region_t::clear_parent_id() {
  parent_id_ = GOOGLE_ULONGLONG(0);
  clear_has_parent_id();
}
inline ::google::protobuf::uint64 region_t::parent_id() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.region_t.parent_id)
  return parent_id_;
}
inline void region_t::set_parent_id(::google::protobuf::uint64 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.region_t.parent_id)
}

// repeated .geo_base.proto.polygon_t polygons = 3;
inline int region_t::polygons_size() const {
  return polygons_.size();
}
inline void region_t::clear_polygons() {
  polygons_.Clear();
}
inline const ::geo_base::proto::polygon_t& region_t::polygons(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.proto.region_t.polygons)
  return polygons_.Get(index);
}
inline ::geo_base::proto::polygon_t* region_t::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.proto.region_t.polygons)
  return polygons_.Mutable(index);
}
inline ::geo_base::proto::polygon_t* region_t::add_polygons() {
  // @@protoc_insertion_point(field_add:geo_base.proto.region_t.polygons)
  return polygons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::geo_base::proto::polygon_t >*
region_t::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.proto.region_t.polygons)
  return &polygons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::geo_base::proto::polygon_t >&
region_t::polygons() const {
  // @@protoc_insertion_point(field_list:geo_base.proto.region_t.polygons)
  return polygons_;
}

// repeated .geo_base.proto.kv_t kvs = 4;
inline int region_t::kvs_size() const {
  return kvs_.size();
}
inline void region_t::clear_kvs() {
  kvs_.Clear();
}
inline const ::geo_base::proto::kv_t& region_t::kvs(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.proto.region_t.kvs)
  return kvs_.Get(index);
}
inline ::geo_base::proto::kv_t* region_t::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.proto.region_t.kvs)
  return kvs_.Mutable(index);
}
inline ::geo_base::proto::kv_t* region_t::add_kvs() {
  // @@protoc_insertion_point(field_add:geo_base.proto.region_t.kvs)
  return kvs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::geo_base::proto::kv_t >*
region_t::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.proto.region_t.kvs)
  return &kvs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::geo_base::proto::kv_t >&
region_t::kvs() const {
  // @@protoc_insertion_point(field_list:geo_base.proto.region_t.kvs)
  return kvs_;
}

// repeated string blobs = 5;
inline int region_t::blobs_size() const {
  return blobs_.size();
}
inline void region_t::clear_blobs() {
  blobs_.Clear();
}
inline const ::std::string& region_t::blobs(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.proto.region_t.blobs)
  return blobs_.Get(index);
}
inline ::std::string* region_t::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.proto.region_t.blobs)
  return blobs_.Mutable(index);
}
inline void region_t::set_blobs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:geo_base.proto.region_t.blobs)
  blobs_.Mutable(index)->assign(value);
}
inline void region_t::set_blobs(int index, const char* value) {
  blobs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:geo_base.proto.region_t.blobs)
}
inline void region_t::set_blobs(int index, const char* value, size_t size) {
  blobs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:geo_base.proto.region_t.blobs)
}
inline ::std::string* region_t::add_blobs() {
  return blobs_.Add();
}
inline void region_t::add_blobs(const ::std::string& value) {
  blobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:geo_base.proto.region_t.blobs)
}
inline void region_t::add_blobs(const char* value) {
  blobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:geo_base.proto.region_t.blobs)
}
inline void region_t::add_blobs(const char* value, size_t size) {
  blobs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:geo_base.proto.region_t.blobs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
region_t::blobs() const {
  // @@protoc_insertion_point(field_list:geo_base.proto.region_t.blobs)
  return blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
region_t::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.proto.region_t.blobs)
  return &blobs_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace geo_base

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::geo_base::proto::polygon_t_type_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::geo_base::proto::polygon_t_type_t>() {
  return ::geo_base::proto::polygon_t_type_t_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geo_5fbase_2fproto_2fdef_2fregion_2eproto__INCLUDED
