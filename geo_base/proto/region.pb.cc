// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: region.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "region.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace geo_base {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* location_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  location_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* polygon_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  polygon_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* polygon_t_type_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* kv_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  kv_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* region_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  region_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* region_t_option_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_region_2eproto() {
  protobuf_AddDesc_region_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "region.proto");
  GOOGLE_CHECK(file != NULL);
  location_t_descriptor_ = file->message_type(0);
  static const int location_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_t, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_t, lon_),
  };
  location_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      location_t_descriptor_,
      location_t::default_instance_,
      location_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(location_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(location_t, _internal_metadata_),
      -1);
  polygon_t_descriptor_ = file->message_type(1);
  static const int polygon_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(polygon_t, polygon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(polygon_t, locations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(polygon_t, type_),
  };
  polygon_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      polygon_t_descriptor_,
      polygon_t::default_instance_,
      polygon_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(polygon_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(polygon_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(polygon_t, _internal_metadata_),
      -1);
  polygon_t_type_t_descriptor_ = polygon_t_descriptor_->enum_type(0);
  kv_t_descriptor_ = file->message_type(2);
  static const int kv_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kv_t, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kv_t, v_),
  };
  kv_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      kv_t_descriptor_,
      kv_t::default_instance_,
      kv_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kv_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(kv_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kv_t, _internal_metadata_),
      -1);
  region_t_descriptor_ = file->message_type(3);
  static const int region_t_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(region_t, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(region_t, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(region_t, polygons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(region_t, kvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(region_t, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(region_t, options_),
  };
  region_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      region_t_descriptor_,
      region_t::default_instance_,
      region_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(region_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(region_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(region_t, _internal_metadata_),
      -1);
  region_t_option_t_descriptor_ = region_t_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_region_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      location_t_descriptor_, &location_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      polygon_t_descriptor_, &polygon_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      kv_t_descriptor_, &kv_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      region_t_descriptor_, &region_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_region_2eproto() {
  delete location_t::default_instance_;
  delete location_t_reflection_;
  delete polygon_t::default_instance_;
  delete polygon_t_reflection_;
  delete kv_t::default_instance_;
  delete kv_t_reflection_;
  delete region_t::default_instance_;
  delete region_t_reflection_;
}

void protobuf_AddDesc_region_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014region.proto\022\016geo_base.proto\"&\n\nlocati"
    "on_t\022\013\n\003lat\030\001 \002(\001\022\013\n\003lon\030\002 \002(\001\"\272\001\n\tpolyg"
    "on_t\022\022\n\npolygon_id\030\001 \002(\004\022-\n\tlocations\030\002 "
    "\003(\0132\032.geo_base.proto.location_t\022.\n\004type\030"
    "\003 \002(\0162 .geo_base.proto.polygon_t.type_t\""
    ":\n\006type_t\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_INNE"
    "R\020\001\022\016\n\nTYPE_OUTER\020\002\"\034\n\004kv_t\022\t\n\001k\030\001 \002(\t\022\t"
    "\n\001v\030\002 \002(\t\"\366\002\n\010region_t\022\021\n\tregion_id\030\001 \002("
    "\004\022\021\n\tparent_id\030\002 \001(\004\022+\n\010polygons\030\003 \003(\0132\031"
    ".geo_base.proto.polygon_t\022!\n\003kvs\030\004 \003(\0132\024"
    ".geo_base.proto.kv_t\022\r\n\005blobs\030\005 \003(\t\022\017\n\007o"
    "ptions\030\006 \002(\004\"\323\001\n\010option_t\022\017\n\013OPTION_ZERO"
    "\020\000\022\"\n\036OPTION_BOUNDARY_ADMINISTRATIVE\020\001\022\027"
    "\n\023OPTION_PLACE_ISLAND\020\002\022\025\n\021OPTION_PLACE_"
    "TOWN\020\003\022\025\n\021OPTION_PLACE_CITY\020\004\022\030\n\024OPTION_"
    "PLACE_VILLAGE\020\005\022\030\n\024OPTION_PLACE_BOROUGH\020"
    "\006\022\027\n\023OPTION_PLACE_SUBURB\020\007B\003\370\001\001", 671);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "region.proto", &protobuf_RegisterTypes);
  location_t::default_instance_ = new location_t();
  polygon_t::default_instance_ = new polygon_t();
  kv_t::default_instance_ = new kv_t();
  region_t::default_instance_ = new region_t();
  location_t::default_instance_->InitAsDefaultInstance();
  polygon_t::default_instance_->InitAsDefaultInstance();
  kv_t::default_instance_->InitAsDefaultInstance();
  region_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_region_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_region_2eproto {
  StaticDescriptorInitializer_region_2eproto() {
    protobuf_AddDesc_region_2eproto();
  }
} static_descriptor_initializer_region_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int location_t::kLatFieldNumber;
const int location_t::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

location_t::location_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.proto.location_t)
}

location_t::location_t(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:geo_base.proto.location_t)
}

void location_t::InitAsDefaultInstance() {
}

location_t::location_t(const location_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.proto.location_t)
}

void location_t::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

location_t::~location_t() {
  // @@protoc_insertion_point(destructor:geo_base.proto.location_t)
  SharedDtor();
}

void location_t::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void location_t::ArenaDtor(void* object) {
  location_t* _this = reinterpret_cast< location_t* >(object);
  (void)_this;
}
void location_t::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void location_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* location_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return location_t_descriptor_;
}

const location_t& location_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_region_2eproto();
  return *default_instance_;
}

location_t* location_t::default_instance_ = NULL;

location_t* location_t::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<location_t>(arena);
}

void location_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<location_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lat_, lon_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool location_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.proto.location_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lat = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lon;
        break;
      }

      // required double lon = 2;
      case 2: {
        if (tag == 17) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.proto.location_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.proto.location_t)
  return false;
#undef DO_
}

void location_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.proto.location_t)
  // required double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // required double lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.proto.location_t)
}

::google::protobuf::uint8* location_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.proto.location_t)
  // required double lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // required double lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.proto.location_t)
  return target;
}

int location_t::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_lat()) {
    // required double lat = 1;
    total_size += 1 + 8;
  }

  if (has_lon()) {
    // required double lon = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int location_t::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double lat = 1;
    total_size += 1 + 8;

    // required double lon = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void location_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const location_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const location_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void location_t::MergeFrom(const location_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void location_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void location_t::CopyFrom(const location_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool location_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void location_t::Swap(location_t* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    location_t temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void location_t::UnsafeArenaSwap(location_t* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void location_t::InternalSwap(location_t* other) {
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata location_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = location_t_descriptor_;
  metadata.reflection = location_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// location_t

// required double lat = 1;
bool location_t::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void location_t::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
void location_t::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
void location_t::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
 double location_t::lat() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.location_t.lat)
  return lat_;
}
 void location_t::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.location_t.lat)
}

// required double lon = 2;
bool location_t::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void location_t::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
void location_t::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
void location_t::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
 double location_t::lon() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.location_t.lon)
  return lon_;
}
 void location_t::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.location_t.lon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* polygon_t_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return polygon_t_type_t_descriptor_;
}
bool polygon_t_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const polygon_t_type_t polygon_t::TYPE_UNKNOWN;
const polygon_t_type_t polygon_t::TYPE_INNER;
const polygon_t_type_t polygon_t::TYPE_OUTER;
const polygon_t_type_t polygon_t::type_t_MIN;
const polygon_t_type_t polygon_t::type_t_MAX;
const int polygon_t::type_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int polygon_t::kPolygonIdFieldNumber;
const int polygon_t::kLocationsFieldNumber;
const int polygon_t::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

polygon_t::polygon_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.proto.polygon_t)
}

polygon_t::polygon_t(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  locations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:geo_base.proto.polygon_t)
}

void polygon_t::InitAsDefaultInstance() {
}

polygon_t::polygon_t(const polygon_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.proto.polygon_t)
}

void polygon_t::SharedCtor() {
  _cached_size_ = 0;
  polygon_id_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

polygon_t::~polygon_t() {
  // @@protoc_insertion_point(destructor:geo_base.proto.polygon_t)
  SharedDtor();
}

void polygon_t::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void polygon_t::ArenaDtor(void* object) {
  polygon_t* _this = reinterpret_cast< polygon_t* >(object);
  (void)_this;
}
void polygon_t::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void polygon_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* polygon_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return polygon_t_descriptor_;
}

const polygon_t& polygon_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_region_2eproto();
  return *default_instance_;
}

polygon_t* polygon_t::default_instance_ = NULL;

polygon_t* polygon_t::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<polygon_t>(arena);
}

void polygon_t::Clear() {
  if (_has_bits_[0 / 32] & 5u) {
    polygon_id_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  locations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool polygon_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.proto.polygon_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 polygon_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &polygon_id_)));
          set_has_polygon_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_locations;
        break;
      }

      // repeated .geo_base.proto.location_t locations = 2;
      case 2: {
        if (tag == 18) {
         parse_locations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_locations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_locations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .geo_base.proto.polygon_t.type_t type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::geo_base::proto::polygon_t_type_t_IsValid(value)) {
            set_type(static_cast< ::geo_base::proto::polygon_t_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.proto.polygon_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.proto.polygon_t)
  return false;
#undef DO_
}

void polygon_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.proto.polygon_t)
  // required uint64 polygon_id = 1;
  if (has_polygon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->polygon_id(), output);
  }

  // repeated .geo_base.proto.location_t locations = 2;
  for (unsigned int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->locations(i), output);
  }

  // required .geo_base.proto.polygon_t.type_t type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.proto.polygon_t)
}

::google::protobuf::uint8* polygon_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.proto.polygon_t)
  // required uint64 polygon_id = 1;
  if (has_polygon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->polygon_id(), target);
  }

  // repeated .geo_base.proto.location_t locations = 2;
  for (unsigned int i = 0, n = this->locations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->locations(i), target);
  }

  // required .geo_base.proto.polygon_t.type_t type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.proto.polygon_t)
  return target;
}

int polygon_t::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_polygon_id()) {
    // required uint64 polygon_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->polygon_id());
  }

  if (has_type()) {
    // required .geo_base.proto.polygon_t.type_t type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int polygon_t::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required uint64 polygon_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->polygon_id());

    // required .geo_base.proto.polygon_t.type_t type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .geo_base.proto.location_t locations = 2;
  total_size += 1 * this->locations_size();
  for (int i = 0; i < this->locations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->locations(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void polygon_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const polygon_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const polygon_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void polygon_t::MergeFrom(const polygon_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  locations_.MergeFrom(from.locations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_polygon_id()) {
      set_polygon_id(from.polygon_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void polygon_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void polygon_t::CopyFrom(const polygon_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool polygon_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->locations())) return false;
  return true;
}

void polygon_t::Swap(polygon_t* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    polygon_t temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void polygon_t::UnsafeArenaSwap(polygon_t* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void polygon_t::InternalSwap(polygon_t* other) {
  std::swap(polygon_id_, other->polygon_id_);
  locations_.UnsafeArenaSwap(&other->locations_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata polygon_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = polygon_t_descriptor_;
  metadata.reflection = polygon_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// polygon_t

// required uint64 polygon_id = 1;
bool polygon_t::has_polygon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void polygon_t::set_has_polygon_id() {
  _has_bits_[0] |= 0x00000001u;
}
void polygon_t::clear_has_polygon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void polygon_t::clear_polygon_id() {
  polygon_id_ = GOOGLE_ULONGLONG(0);
  clear_has_polygon_id();
}
 ::google::protobuf::uint64 polygon_t::polygon_id() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.polygon_t.polygon_id)
  return polygon_id_;
}
 void polygon_t::set_polygon_id(::google::protobuf::uint64 value) {
  set_has_polygon_id();
  polygon_id_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.polygon_t.polygon_id)
}

// repeated .geo_base.proto.location_t locations = 2;
int polygon_t::locations_size() const {
  return locations_.size();
}
void polygon_t::clear_locations() {
  locations_.Clear();
}
const ::geo_base::proto::location_t& polygon_t::locations(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.proto.polygon_t.locations)
  return locations_.Get(index);
}
::geo_base::proto::location_t* polygon_t::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.proto.polygon_t.locations)
  return locations_.Mutable(index);
}
::geo_base::proto::location_t* polygon_t::add_locations() {
  // @@protoc_insertion_point(field_add:geo_base.proto.polygon_t.locations)
  return locations_.Add();
}
::google::protobuf::RepeatedPtrField< ::geo_base::proto::location_t >*
polygon_t::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.proto.polygon_t.locations)
  return &locations_;
}
const ::google::protobuf::RepeatedPtrField< ::geo_base::proto::location_t >&
polygon_t::locations() const {
  // @@protoc_insertion_point(field_list:geo_base.proto.polygon_t.locations)
  return locations_;
}

// required .geo_base.proto.polygon_t.type_t type = 3;
bool polygon_t::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void polygon_t::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void polygon_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void polygon_t::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::geo_base::proto::polygon_t_type_t polygon_t::type() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.polygon_t.type)
  return static_cast< ::geo_base::proto::polygon_t_type_t >(type_);
}
 void polygon_t::set_type(::geo_base::proto::polygon_t_type_t value) {
  assert(::geo_base::proto::polygon_t_type_t_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.polygon_t.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int kv_t::kKFieldNumber;
const int kv_t::kVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

kv_t::kv_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.proto.kv_t)
}

kv_t::kv_t(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:geo_base.proto.kv_t)
}

void kv_t::InitAsDefaultInstance() {
}

kv_t::kv_t(const kv_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.proto.kv_t)
}

void kv_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

kv_t::~kv_t() {
  // @@protoc_insertion_point(destructor:geo_base.proto.kv_t)
  SharedDtor();
}

void kv_t::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  k_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  v_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void kv_t::ArenaDtor(void* object) {
  kv_t* _this = reinterpret_cast< kv_t* >(object);
  (void)_this;
}
void kv_t::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void kv_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* kv_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kv_t_descriptor_;
}

const kv_t& kv_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_region_2eproto();
  return *default_instance_;
}

kv_t* kv_t::default_instance_ = NULL;

kv_t* kv_t::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<kv_t>(arena);
}

void kv_t::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_k()) {
      k_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (has_v()) {
      v_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool kv_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.proto.kv_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string k = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "geo_base.proto.kv_t.k");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_v;
        break;
      }

      // required string v = 2;
      case 2: {
        if (tag == 18) {
         parse_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->v().data(), this->v().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "geo_base.proto.kv_t.v");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.proto.kv_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.proto.kv_t)
  return false;
#undef DO_
}

void kv_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.proto.kv_t)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_base.proto.kv_t.k");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->k(), output);
  }

  // required string v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->v().data(), this->v().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_base.proto.kv_t.v");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->v(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.proto.kv_t)
}

::google::protobuf::uint8* kv_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.proto.kv_t)
  // required string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_base.proto.kv_t.k");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k(), target);
  }

  // required string v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->v().data(), this->v().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_base.proto.kv_t.v");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->v(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.proto.kv_t)
  return target;
}

int kv_t::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_k()) {
    // required string k = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k());
  }

  if (has_v()) {
    // required string v = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->v());
  }

  return total_size;
}
int kv_t::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string k = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k());

    // required string v = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->v());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void kv_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const kv_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const kv_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void kv_t::MergeFrom(const kv_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void kv_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void kv_t::CopyFrom(const kv_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kv_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void kv_t::Swap(kv_t* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    kv_t temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void kv_t::UnsafeArenaSwap(kv_t* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void kv_t::InternalSwap(kv_t* other) {
  k_.Swap(&other->k_);
  v_.Swap(&other->v_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata kv_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = kv_t_descriptor_;
  metadata.reflection = kv_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// kv_t

// required string k = 1;
bool kv_t::has_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void kv_t::set_has_k() {
  _has_bits_[0] |= 0x00000001u;
}
void kv_t::clear_has_k() {
  _has_bits_[0] &= ~0x00000001u;
}
void kv_t::clear_k() {
  k_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_k();
}
 const ::std::string& kv_t::k() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.kv_t.k)
  return k_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void kv_t::set_k(const ::std::string& value) {
  set_has_k();
  k_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.proto.kv_t.k)
}
 void kv_t::set_k(const char* value) {
  set_has_k();
  k_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.proto.kv_t.k)
}
 void kv_t::set_k(const char* value,
    size_t size) {
  set_has_k();
  k_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.proto.kv_t.k)
}
 ::std::string* kv_t::mutable_k() {
  set_has_k();
  // @@protoc_insertion_point(field_mutable:geo_base.proto.kv_t.k)
  return k_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* kv_t::release_k() {
  clear_has_k();
  return k_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* kv_t::unsafe_arena_release_k() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_k();
  return k_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void kv_t::set_allocated_k(::std::string* k) {
  if (k != NULL) {
    set_has_k();
  } else {
    clear_has_k();
  }
  k_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.proto.kv_t.k)
}
 void kv_t::unsafe_arena_set_allocated_k(
    ::std::string* k) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (k != NULL) {
    set_has_k();
  } else {
    clear_has_k();
  }
  k_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      k, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.proto.kv_t.k)
}

// required string v = 2;
bool kv_t::has_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void kv_t::set_has_v() {
  _has_bits_[0] |= 0x00000002u;
}
void kv_t::clear_has_v() {
  _has_bits_[0] &= ~0x00000002u;
}
void kv_t::clear_v() {
  v_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_v();
}
 const ::std::string& kv_t::v() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.kv_t.v)
  return v_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void kv_t::set_v(const ::std::string& value) {
  set_has_v();
  v_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.proto.kv_t.v)
}
 void kv_t::set_v(const char* value) {
  set_has_v();
  v_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.proto.kv_t.v)
}
 void kv_t::set_v(const char* value,
    size_t size) {
  set_has_v();
  v_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.proto.kv_t.v)
}
 ::std::string* kv_t::mutable_v() {
  set_has_v();
  // @@protoc_insertion_point(field_mutable:geo_base.proto.kv_t.v)
  return v_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* kv_t::release_v() {
  clear_has_v();
  return v_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* kv_t::unsafe_arena_release_v() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_v();
  return v_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void kv_t::set_allocated_v(::std::string* v) {
  if (v != NULL) {
    set_has_v();
  } else {
    clear_has_v();
  }
  v_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.proto.kv_t.v)
}
 void kv_t::unsafe_arena_set_allocated_v(
    ::std::string* v) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (v != NULL) {
    set_has_v();
  } else {
    clear_has_v();
  }
  v_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      v, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.proto.kv_t.v)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* region_t_option_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return region_t_option_t_descriptor_;
}
bool region_t_option_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const region_t_option_t region_t::OPTION_ZERO;
const region_t_option_t region_t::OPTION_BOUNDARY_ADMINISTRATIVE;
const region_t_option_t region_t::OPTION_PLACE_ISLAND;
const region_t_option_t region_t::OPTION_PLACE_TOWN;
const region_t_option_t region_t::OPTION_PLACE_CITY;
const region_t_option_t region_t::OPTION_PLACE_VILLAGE;
const region_t_option_t region_t::OPTION_PLACE_BOROUGH;
const region_t_option_t region_t::OPTION_PLACE_SUBURB;
const region_t_option_t region_t::option_t_MIN;
const region_t_option_t region_t::option_t_MAX;
const int region_t::option_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int region_t::kRegionIdFieldNumber;
const int region_t::kParentIdFieldNumber;
const int region_t::kPolygonsFieldNumber;
const int region_t::kKvsFieldNumber;
const int region_t::kBlobsFieldNumber;
const int region_t::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

region_t::region_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.proto.region_t)
}

region_t::region_t(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  polygons_(arena),
  kvs_(arena),
  blobs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:geo_base.proto.region_t)
}

void region_t::InitAsDefaultInstance() {
}

region_t::region_t(const region_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.proto.region_t)
}

void region_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  region_id_ = GOOGLE_ULONGLONG(0);
  parent_id_ = GOOGLE_ULONGLONG(0);
  options_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

region_t::~region_t() {
  // @@protoc_insertion_point(destructor:geo_base.proto.region_t)
  SharedDtor();
}

void region_t::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void region_t::ArenaDtor(void* object) {
  region_t* _this = reinterpret_cast< region_t* >(object);
  (void)_this;
}
void region_t::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void region_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* region_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return region_t_descriptor_;
}

const region_t& region_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_region_2eproto();
  return *default_instance_;
}

region_t* region_t::default_instance_ = NULL;

region_t* region_t::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<region_t>(arena);
}

void region_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<region_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 35u) {
    ZR_(region_id_, parent_id_);
    options_ = GOOGLE_ULONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  polygons_.Clear();
  kvs_.Clear();
  blobs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool region_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.proto.region_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_parent_id;
        break;
      }

      // optional uint64 parent_id = 2;
      case 2: {
        if (tag == 16) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_polygons;
        break;
      }

      // repeated .geo_base.proto.polygon_t polygons = 3;
      case 3: {
        if (tag == 26) {
         parse_polygons:
          DO_(input->IncrementRecursionDepth());
         parse_loop_polygons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_polygons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_polygons;
        if (input->ExpectTag(34)) goto parse_loop_kvs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .geo_base.proto.kv_t kvs = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kvs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_kvs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_blobs;
        break;
      }

      // repeated string blobs = 5;
      case 5: {
        if (tag == 42) {
         parse_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_blobs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blobs(this->blobs_size() - 1).data(),
            this->blobs(this->blobs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "geo_base.proto.region_t.blobs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_blobs;
        if (input->ExpectTag(48)) goto parse_options;
        break;
      }

      // required uint64 options = 6;
      case 6: {
        if (tag == 48) {
         parse_options:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &options_)));
          set_has_options();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.proto.region_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.proto.region_t)
  return false;
#undef DO_
}

void region_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.proto.region_t)
  // required uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional uint64 parent_id = 2;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->parent_id(), output);
  }

  // repeated .geo_base.proto.polygon_t polygons = 3;
  for (unsigned int i = 0, n = this->polygons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->polygons(i), output);
  }

  // repeated .geo_base.proto.kv_t kvs = 4;
  for (unsigned int i = 0, n = this->kvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->kvs(i), output);
  }

  // repeated string blobs = 5;
  for (int i = 0; i < this->blobs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blobs(i).data(), this->blobs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_base.proto.region_t.blobs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->blobs(i), output);
  }

  // required uint64 options = 6;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->options(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.proto.region_t)
}

::google::protobuf::uint8* region_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.proto.region_t)
  // required uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional uint64 parent_id = 2;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->parent_id(), target);
  }

  // repeated .geo_base.proto.polygon_t polygons = 3;
  for (unsigned int i = 0, n = this->polygons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->polygons(i), target);
  }

  // repeated .geo_base.proto.kv_t kvs = 4;
  for (unsigned int i = 0, n = this->kvs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->kvs(i), target);
  }

  // repeated string blobs = 5;
  for (int i = 0; i < this->blobs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blobs(i).data(), this->blobs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_base.proto.region_t.blobs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->blobs(i), target);
  }

  // required uint64 options = 6;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->options(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.proto.region_t)
  return target;
}

int region_t::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_region_id()) {
    // required uint64 region_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  if (has_options()) {
    // required uint64 options = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->options());
  }

  return total_size;
}
int region_t::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required uint64 region_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());

    // required uint64 options = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->options());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 parent_id = 2;
  if (has_parent_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->parent_id());
  }

  // repeated .geo_base.proto.polygon_t polygons = 3;
  total_size += 1 * this->polygons_size();
  for (int i = 0; i < this->polygons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygons(i));
  }

  // repeated .geo_base.proto.kv_t kvs = 4;
  total_size += 1 * this->kvs_size();
  for (int i = 0; i < this->kvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvs(i));
  }

  // repeated string blobs = 5;
  total_size += 1 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->blobs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void region_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const region_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const region_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void region_t::MergeFrom(const region_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  polygons_.MergeFrom(from.polygons_);
  kvs_.MergeFrom(from.kvs_);
  blobs_.MergeFrom(from.blobs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_options()) {
      set_options(from.options());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void region_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void region_t::CopyFrom(const region_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool region_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->polygons())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->kvs())) return false;
  return true;
}

void region_t::Swap(region_t* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    region_t temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void region_t::UnsafeArenaSwap(region_t* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void region_t::InternalSwap(region_t* other) {
  std::swap(region_id_, other->region_id_);
  std::swap(parent_id_, other->parent_id_);
  polygons_.UnsafeArenaSwap(&other->polygons_);
  kvs_.UnsafeArenaSwap(&other->kvs_);
  blobs_.UnsafeArenaSwap(&other->blobs_);
  std::swap(options_, other->options_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata region_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = region_t_descriptor_;
  metadata.reflection = region_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// region_t

// required uint64 region_id = 1;
bool region_t::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void region_t::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
void region_t::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void region_t::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
  clear_has_region_id();
}
 ::google::protobuf::uint64 region_t::region_id() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.region_t.region_id)
  return region_id_;
}
 void region_t::set_region_id(::google::protobuf::uint64 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.region_t.region_id)
}

// optional uint64 parent_id = 2;
bool region_t::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void region_t::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
void region_t::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void region_t::clear_parent_id() {
  parent_id_ = GOOGLE_ULONGLONG(0);
  clear_has_parent_id();
}
 ::google::protobuf::uint64 region_t::parent_id() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.region_t.parent_id)
  return parent_id_;
}
 void region_t::set_parent_id(::google::protobuf::uint64 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.region_t.parent_id)
}

// repeated .geo_base.proto.polygon_t polygons = 3;
int region_t::polygons_size() const {
  return polygons_.size();
}
void region_t::clear_polygons() {
  polygons_.Clear();
}
const ::geo_base::proto::polygon_t& region_t::polygons(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.proto.region_t.polygons)
  return polygons_.Get(index);
}
::geo_base::proto::polygon_t* region_t::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.proto.region_t.polygons)
  return polygons_.Mutable(index);
}
::geo_base::proto::polygon_t* region_t::add_polygons() {
  // @@protoc_insertion_point(field_add:geo_base.proto.region_t.polygons)
  return polygons_.Add();
}
::google::protobuf::RepeatedPtrField< ::geo_base::proto::polygon_t >*
region_t::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.proto.region_t.polygons)
  return &polygons_;
}
const ::google::protobuf::RepeatedPtrField< ::geo_base::proto::polygon_t >&
region_t::polygons() const {
  // @@protoc_insertion_point(field_list:geo_base.proto.region_t.polygons)
  return polygons_;
}

// repeated .geo_base.proto.kv_t kvs = 4;
int region_t::kvs_size() const {
  return kvs_.size();
}
void region_t::clear_kvs() {
  kvs_.Clear();
}
const ::geo_base::proto::kv_t& region_t::kvs(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.proto.region_t.kvs)
  return kvs_.Get(index);
}
::geo_base::proto::kv_t* region_t::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.proto.region_t.kvs)
  return kvs_.Mutable(index);
}
::geo_base::proto::kv_t* region_t::add_kvs() {
  // @@protoc_insertion_point(field_add:geo_base.proto.region_t.kvs)
  return kvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::geo_base::proto::kv_t >*
region_t::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.proto.region_t.kvs)
  return &kvs_;
}
const ::google::protobuf::RepeatedPtrField< ::geo_base::proto::kv_t >&
region_t::kvs() const {
  // @@protoc_insertion_point(field_list:geo_base.proto.region_t.kvs)
  return kvs_;
}

// repeated string blobs = 5;
int region_t::blobs_size() const {
  return blobs_.size();
}
void region_t::clear_blobs() {
  blobs_.Clear();
}
 const ::std::string& region_t::blobs(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.proto.region_t.blobs)
  return blobs_.Get(index);
}
 ::std::string* region_t::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.proto.region_t.blobs)
  return blobs_.Mutable(index);
}
 void region_t::set_blobs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:geo_base.proto.region_t.blobs)
  blobs_.Mutable(index)->assign(value);
}
 void region_t::set_blobs(int index, const char* value) {
  blobs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:geo_base.proto.region_t.blobs)
}
 void region_t::set_blobs(int index, const char* value, size_t size) {
  blobs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:geo_base.proto.region_t.blobs)
}
 ::std::string* region_t::add_blobs() {
  return blobs_.Add();
}
 void region_t::add_blobs(const ::std::string& value) {
  blobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:geo_base.proto.region_t.blobs)
}
 void region_t::add_blobs(const char* value) {
  blobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:geo_base.proto.region_t.blobs)
}
 void region_t::add_blobs(const char* value, size_t size) {
  blobs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:geo_base.proto.region_t.blobs)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
region_t::blobs() const {
  // @@protoc_insertion_point(field_list:geo_base.proto.region_t.blobs)
  return blobs_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
region_t::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.proto.region_t.blobs)
  return &blobs_;
}

// required uint64 options = 6;
bool region_t::has_options() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void region_t::set_has_options() {
  _has_bits_[0] |= 0x00000020u;
}
void region_t::clear_has_options() {
  _has_bits_[0] &= ~0x00000020u;
}
void region_t::clear_options() {
  options_ = GOOGLE_ULONGLONG(0);
  clear_has_options();
}
 ::google::protobuf::uint64 region_t::options() const {
  // @@protoc_insertion_point(field_get:geo_base.proto.region_t.options)
  return options_;
}
 void region_t::set_options(::google::protobuf::uint64 value) {
  set_has_options();
  options_ = value;
  // @@protoc_insertion_point(field_set:geo_base.proto.region_t.options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace geo_base

// @@protoc_insertion_point(global_scope)
