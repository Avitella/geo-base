// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: open_street_map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "open_street_map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace geo_base {
namespace open_street_map {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* blob_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blob_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* blob_header_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blob_header_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* string_table_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  string_table_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* basic_group_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  basic_group_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* basic_block_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  basic_block_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* node_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  node_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* dense_nodes_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dense_nodes_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* way_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  way_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* relation_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  relation_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* relation_t_member_type_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_open_5fstreet_5fmap_2eproto() {
  protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "open_street_map.proto");
  GOOGLE_CHECK(file != NULL);
  blob_t_descriptor_ = file->message_type(0);
  static const int blob_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blob_t, raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blob_t, raw_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blob_t, zlib_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blob_t, lzma_data_),
  };
  blob_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      blob_t_descriptor_,
      blob_t::default_instance_,
      blob_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blob_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(blob_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blob_t, _internal_metadata_),
      -1);
  blob_header_t_descriptor_ = file->message_type(1);
  static const int blob_header_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blob_header_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blob_header_t, index_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blob_header_t, data_size_),
  };
  blob_header_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      blob_header_t_descriptor_,
      blob_header_t::default_instance_,
      blob_header_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blob_header_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(blob_header_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blob_header_t, _internal_metadata_),
      -1);
  string_table_t_descriptor_ = file->message_type(2);
  static const int string_table_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(string_table_t, s_),
  };
  string_table_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      string_table_t_descriptor_,
      string_table_t::default_instance_,
      string_table_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(string_table_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(string_table_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(string_table_t, _internal_metadata_),
      -1);
  basic_group_t_descriptor_ = file->message_type(3);
  static const int basic_group_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_group_t, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_group_t, dense_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_group_t, ways_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_group_t, relations_),
  };
  basic_group_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      basic_group_t_descriptor_,
      basic_group_t::default_instance_,
      basic_group_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_group_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(basic_group_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_group_t, _internal_metadata_),
      -1);
  basic_block_t_descriptor_ = file->message_type(4);
  static const int basic_block_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_block_t, string_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_block_t, basic_groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_block_t, granularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_block_t, lat_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_block_t, lon_off_),
  };
  basic_block_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      basic_block_t_descriptor_,
      basic_block_t::default_instance_,
      basic_block_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_block_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(basic_block_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basic_block_t, _internal_metadata_),
      -1);
  node_t_descriptor_ = file->message_type(5);
  static const int node_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t, vals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t, lon_),
  };
  node_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      node_t_descriptor_,
      node_t::default_instance_,
      node_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(node_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_t, _internal_metadata_),
      -1);
  dense_nodes_t_descriptor_ = file->message_type(6);
  static const int dense_nodes_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dense_nodes_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dense_nodes_t, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dense_nodes_t, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dense_nodes_t, kvs_),
  };
  dense_nodes_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      dense_nodes_t_descriptor_,
      dense_nodes_t::default_instance_,
      dense_nodes_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dense_nodes_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(dense_nodes_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dense_nodes_t, _internal_metadata_),
      -1);
  way_t_descriptor_ = file->message_type(7);
  static const int way_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way_t, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way_t, vals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way_t, refs_),
  };
  way_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      way_t_descriptor_,
      way_t::default_instance_,
      way_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(way_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way_t, _internal_metadata_),
      -1);
  relation_t_descriptor_ = file->message_type(8);
  static const int relation_t_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation_t, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation_t, vals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation_t, roles_sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation_t, member_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation_t, member_types_),
  };
  relation_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      relation_t_descriptor_,
      relation_t::default_instance_,
      relation_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(relation_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation_t, _internal_metadata_),
      -1);
  relation_t_member_type_t_descriptor_ = relation_t_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_open_5fstreet_5fmap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      blob_t_descriptor_, &blob_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      blob_header_t_descriptor_, &blob_header_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      string_table_t_descriptor_, &string_table_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      basic_group_t_descriptor_, &basic_group_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      basic_block_t_descriptor_, &basic_block_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      node_t_descriptor_, &node_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      dense_nodes_t_descriptor_, &dense_nodes_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      way_t_descriptor_, &way_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      relation_t_descriptor_, &relation_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_open_5fstreet_5fmap_2eproto() {
  delete blob_t::default_instance_;
  delete blob_t_reflection_;
  delete blob_header_t::default_instance_;
  delete blob_header_t_reflection_;
  delete string_table_t::default_instance_;
  delete string_table_t_reflection_;
  delete basic_group_t::default_instance_;
  delete basic_group_t_reflection_;
  delete basic_block_t::default_instance_;
  delete basic_block_t_reflection_;
  delete node_t::default_instance_;
  delete node_t_reflection_;
  delete dense_nodes_t::default_instance_;
  delete dense_nodes_t_reflection_;
  delete way_t::default_instance_;
  delete way_t_reflection_;
  delete relation_t::default_instance_;
  delete relation_t_reflection_;
}

void protobuf_AddDesc_open_5fstreet_5fmap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025open_street_map.proto\022\036geo_base.open_s"
    "treet_map.proto\"M\n\006blob_t\022\013\n\003raw\030\001 \001(\014\022\020"
    "\n\010raw_size\030\002 \001(\005\022\021\n\tzlib_data\030\003 \001(\014\022\021\n\tl"
    "zma_data\030\004 \001(\014\"D\n\rblob_header_t\022\014\n\004type\030"
    "\001 \002(\t\022\022\n\nindex_data\030\002 \001(\014\022\021\n\tdata_size\030\003"
    " \002(\005\"\033\n\016string_table_t\022\t\n\001s\030\001 \003(\014\"\376\001\n\rba"
    "sic_group_t\0225\n\005nodes\030\001 \003(\0132&.geo_base.op"
    "en_street_map.proto.node_t\022B\n\013dense_node"
    "s\030\002 \001(\0132-.geo_base.open_street_map.proto"
    ".dense_nodes_t\0223\n\004ways\030\003 \003(\0132%.geo_base."
    "open_street_map.proto.way_t\022=\n\trelations"
    "\030\004 \003(\0132*.geo_base.open_street_map.proto."
    "relation_t\"\334\001\n\rbasic_block_t\022D\n\014string_t"
    "able\030\001 \002(\0132..geo_base.open_street_map.pr"
    "oto.string_table_t\022C\n\014basic_groups\030\002 \003(\013"
    "2-.geo_base.open_street_map.proto.basic_"
    "group_t\022\030\n\013granularity\030\021 \001(\005:\003100\022\022\n\007lat"
    "_off\030\023 \001(\003:\0010\022\022\n\007lon_off\030\024 \001(\003:\0010\"R\n\006nod"
    "e_t\022\n\n\002id\030\001 \002(\022\022\020\n\004keys\030\002 \003(\rB\002\020\001\022\020\n\004val"
    "s\030\003 \003(\rB\002\020\001\022\013\n\003lat\030\010 \002(\022\022\013\n\003lon\030\t \002(\022\"R\n"
    "\rdense_nodes_t\022\016\n\002id\030\001 \003(\022B\002\020\001\022\017\n\003lat\030\010 "
    "\003(\022B\002\020\001\022\017\n\003lon\030\t \003(\022B\002\020\001\022\017\n\003kvs\030\n \003(\005B\002\020"
    "\001\"I\n\005way_t\022\n\n\002id\030\001 \002(\003\022\020\n\004keys\030\002 \003(\rB\002\020\001"
    "\022\020\n\004vals\030\003 \003(\rB\002\020\001\022\020\n\004refs\030\010 \003(\022B\002\020\001\"\361\001\n"
    "\nrelation_t\022\n\n\002id\030\001 \002(\003\022\020\n\004keys\030\002 \003(\rB\002\020"
    "\001\022\020\n\004vals\030\003 \003(\rB\002\020\001\022\025\n\troles_sid\030\010 \003(\005B\002"
    "\020\001\022\026\n\nmember_ids\030\t \003(\022B\002\020\001\022R\n\014member_typ"
    "es\030\n \003(\01628.geo_base.open_street_map.prot"
    "o.relation_t.member_type_tB\002\020\001\"0\n\rmember"
    "_type_t\022\010\n\004NODE\020\000\022\007\n\003WAY\020\001\022\014\n\010RELATION\020\002"
    "B\003\370\001\001", 1205);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "open_street_map.proto", &protobuf_RegisterTypes);
  blob_t::default_instance_ = new blob_t();
  blob_header_t::default_instance_ = new blob_header_t();
  string_table_t::default_instance_ = new string_table_t();
  basic_group_t::default_instance_ = new basic_group_t();
  basic_block_t::default_instance_ = new basic_block_t();
  node_t::default_instance_ = new node_t();
  dense_nodes_t::default_instance_ = new dense_nodes_t();
  way_t::default_instance_ = new way_t();
  relation_t::default_instance_ = new relation_t();
  blob_t::default_instance_->InitAsDefaultInstance();
  blob_header_t::default_instance_->InitAsDefaultInstance();
  string_table_t::default_instance_->InitAsDefaultInstance();
  basic_group_t::default_instance_->InitAsDefaultInstance();
  basic_block_t::default_instance_->InitAsDefaultInstance();
  node_t::default_instance_->InitAsDefaultInstance();
  dense_nodes_t::default_instance_->InitAsDefaultInstance();
  way_t::default_instance_->InitAsDefaultInstance();
  relation_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_open_5fstreet_5fmap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_open_5fstreet_5fmap_2eproto {
  StaticDescriptorInitializer_open_5fstreet_5fmap_2eproto() {
    protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  }
} static_descriptor_initializer_open_5fstreet_5fmap_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int blob_t::kRawFieldNumber;
const int blob_t::kRawSizeFieldNumber;
const int blob_t::kZlibDataFieldNumber;
const int blob_t::kLzmaDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

blob_t::blob_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.open_street_map.proto.blob_t)
}

blob_t::blob_t(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:geo_base.open_street_map.proto.blob_t)
}

void blob_t::InitAsDefaultInstance() {
}

blob_t::blob_t(const blob_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.open_street_map.proto.blob_t)
}

void blob_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_size_ = 0;
  zlib_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lzma_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blob_t::~blob_t() {
  // @@protoc_insertion_point(destructor:geo_base.open_street_map.proto.blob_t)
  SharedDtor();
}

void blob_t::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  raw_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  zlib_data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  lzma_data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void blob_t::ArenaDtor(void* object) {
  blob_t* _this = reinterpret_cast< blob_t* >(object);
  (void)_this;
}
void blob_t::RegisterArenaDtor(::google::protobuf::Arena* /* arena */) {
}
void blob_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blob_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blob_t_descriptor_;
}

const blob_t& blob_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  return *default_instance_;
}

blob_t* blob_t::default_instance_ = NULL;

blob_t* blob_t::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<blob_t>(arena);
}

void blob_t::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_raw()) {
      raw_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    raw_size_ = 0;
    if (has_zlib_data()) {
      zlib_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (has_lzma_data()) {
      lzma_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool blob_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.open_street_map.proto.blob_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes raw = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_raw_size;
        break;
      }

      // optional int32 raw_size = 2;
      case 2: {
        if (tag == 16) {
         parse_raw_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raw_size_)));
          set_has_raw_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_zlib_data;
        break;
      }

      // optional bytes zlib_data = 3;
      case 3: {
        if (tag == 26) {
         parse_zlib_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_zlib_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lzma_data;
        break;
      }

      // optional bytes lzma_data = 4;
      case 4: {
        if (tag == 34) {
         parse_lzma_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lzma_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.open_street_map.proto.blob_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.open_street_map.proto.blob_t)
  return false;
#undef DO_
}

void blob_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.open_street_map.proto.blob_t)
  // optional bytes raw = 1;
  if (has_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->raw(), output);
  }

  // optional int32 raw_size = 2;
  if (has_raw_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->raw_size(), output);
  }

  // optional bytes zlib_data = 3;
  if (has_zlib_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->zlib_data(), output);
  }

  // optional bytes lzma_data = 4;
  if (has_lzma_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->lzma_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.open_street_map.proto.blob_t)
}

::google::protobuf::uint8* blob_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.open_street_map.proto.blob_t)
  // optional bytes raw = 1;
  if (has_raw()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->raw(), target);
  }

  // optional int32 raw_size = 2;
  if (has_raw_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->raw_size(), target);
  }

  // optional bytes zlib_data = 3;
  if (has_zlib_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->zlib_data(), target);
  }

  // optional bytes lzma_data = 4;
  if (has_lzma_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->lzma_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.open_street_map.proto.blob_t)
  return target;
}

int blob_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes raw = 1;
    if (has_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw());
    }

    // optional int32 raw_size = 2;
    if (has_raw_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raw_size());
    }

    // optional bytes zlib_data = 3;
    if (has_zlib_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->zlib_data());
    }

    // optional bytes lzma_data = 4;
    if (has_lzma_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lzma_data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blob_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const blob_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const blob_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blob_t::MergeFrom(const blob_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raw()) {
      set_raw(from.raw());
    }
    if (from.has_raw_size()) {
      set_raw_size(from.raw_size());
    }
    if (from.has_zlib_data()) {
      set_zlib_data(from.zlib_data());
    }
    if (from.has_lzma_data()) {
      set_lzma_data(from.lzma_data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void blob_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blob_t::CopyFrom(const blob_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blob_t::IsInitialized() const {

  return true;
}

void blob_t::Swap(blob_t* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    blob_t temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void blob_t::UnsafeArenaSwap(blob_t* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void blob_t::InternalSwap(blob_t* other) {
  raw_.Swap(&other->raw_);
  std::swap(raw_size_, other->raw_size_);
  zlib_data_.Swap(&other->zlib_data_);
  lzma_data_.Swap(&other->lzma_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata blob_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blob_t_descriptor_;
  metadata.reflection = blob_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// blob_t

// optional bytes raw = 1;
bool blob_t::has_raw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void blob_t::set_has_raw() {
  _has_bits_[0] |= 0x00000001u;
}
void blob_t::clear_has_raw() {
  _has_bits_[0] &= ~0x00000001u;
}
void blob_t::clear_raw() {
  raw_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_raw();
}
 const ::std::string& blob_t::raw() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_t.raw)
  return raw_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void blob_t::set_raw(const ::std::string& value) {
  set_has_raw();
  raw_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_t.raw)
}
 void blob_t::set_raw(const char* value) {
  set_has_raw();
  raw_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.open_street_map.proto.blob_t.raw)
}
 void blob_t::set_raw(const void* value,
    size_t size) {
  set_has_raw();
  raw_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.open_street_map.proto.blob_t.raw)
}
 ::std::string* blob_t::mutable_raw() {
  set_has_raw();
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.blob_t.raw)
  return raw_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* blob_t::release_raw() {
  clear_has_raw();
  return raw_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* blob_t::unsafe_arena_release_raw() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_raw();
  return raw_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void blob_t::set_allocated_raw(::std::string* raw) {
  if (raw != NULL) {
    set_has_raw();
  } else {
    clear_has_raw();
  }
  raw_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_t.raw)
}
 void blob_t::unsafe_arena_set_allocated_raw(
    ::std::string* raw) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (raw != NULL) {
    set_has_raw();
  } else {
    clear_has_raw();
  }
  raw_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      raw, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_t.raw)
}

// optional int32 raw_size = 2;
bool blob_t::has_raw_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void blob_t::set_has_raw_size() {
  _has_bits_[0] |= 0x00000002u;
}
void blob_t::clear_has_raw_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void blob_t::clear_raw_size() {
  raw_size_ = 0;
  clear_has_raw_size();
}
 ::google::protobuf::int32 blob_t::raw_size() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_t.raw_size)
  return raw_size_;
}
 void blob_t::set_raw_size(::google::protobuf::int32 value) {
  set_has_raw_size();
  raw_size_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_t.raw_size)
}

// optional bytes zlib_data = 3;
bool blob_t::has_zlib_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void blob_t::set_has_zlib_data() {
  _has_bits_[0] |= 0x00000004u;
}
void blob_t::clear_has_zlib_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void blob_t::clear_zlib_data() {
  zlib_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_zlib_data();
}
 const ::std::string& blob_t::zlib_data() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_t.zlib_data)
  return zlib_data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void blob_t::set_zlib_data(const ::std::string& value) {
  set_has_zlib_data();
  zlib_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_t.zlib_data)
}
 void blob_t::set_zlib_data(const char* value) {
  set_has_zlib_data();
  zlib_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.open_street_map.proto.blob_t.zlib_data)
}
 void blob_t::set_zlib_data(const void* value,
    size_t size) {
  set_has_zlib_data();
  zlib_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.open_street_map.proto.blob_t.zlib_data)
}
 ::std::string* blob_t::mutable_zlib_data() {
  set_has_zlib_data();
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.blob_t.zlib_data)
  return zlib_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* blob_t::release_zlib_data() {
  clear_has_zlib_data();
  return zlib_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* blob_t::unsafe_arena_release_zlib_data() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_zlib_data();
  return zlib_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void blob_t::set_allocated_zlib_data(::std::string* zlib_data) {
  if (zlib_data != NULL) {
    set_has_zlib_data();
  } else {
    clear_has_zlib_data();
  }
  zlib_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zlib_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_t.zlib_data)
}
 void blob_t::unsafe_arena_set_allocated_zlib_data(
    ::std::string* zlib_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zlib_data != NULL) {
    set_has_zlib_data();
  } else {
    clear_has_zlib_data();
  }
  zlib_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zlib_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_t.zlib_data)
}

// optional bytes lzma_data = 4;
bool blob_t::has_lzma_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void blob_t::set_has_lzma_data() {
  _has_bits_[0] |= 0x00000008u;
}
void blob_t::clear_has_lzma_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void blob_t::clear_lzma_data() {
  lzma_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_lzma_data();
}
 const ::std::string& blob_t::lzma_data() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_t.lzma_data)
  return lzma_data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void blob_t::set_lzma_data(const ::std::string& value) {
  set_has_lzma_data();
  lzma_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_t.lzma_data)
}
 void blob_t::set_lzma_data(const char* value) {
  set_has_lzma_data();
  lzma_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.open_street_map.proto.blob_t.lzma_data)
}
 void blob_t::set_lzma_data(const void* value,
    size_t size) {
  set_has_lzma_data();
  lzma_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.open_street_map.proto.blob_t.lzma_data)
}
 ::std::string* blob_t::mutable_lzma_data() {
  set_has_lzma_data();
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.blob_t.lzma_data)
  return lzma_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* blob_t::release_lzma_data() {
  clear_has_lzma_data();
  return lzma_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* blob_t::unsafe_arena_release_lzma_data() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_lzma_data();
  return lzma_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void blob_t::set_allocated_lzma_data(::std::string* lzma_data) {
  if (lzma_data != NULL) {
    set_has_lzma_data();
  } else {
    clear_has_lzma_data();
  }
  lzma_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lzma_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_t.lzma_data)
}
 void blob_t::unsafe_arena_set_allocated_lzma_data(
    ::std::string* lzma_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (lzma_data != NULL) {
    set_has_lzma_data();
  } else {
    clear_has_lzma_data();
  }
  lzma_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      lzma_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_t.lzma_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int blob_header_t::kTypeFieldNumber;
const int blob_header_t::kIndexDataFieldNumber;
const int blob_header_t::kDataSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

blob_header_t::blob_header_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.open_street_map.proto.blob_header_t)
}

blob_header_t::blob_header_t(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:geo_base.open_street_map.proto.blob_header_t)
}

void blob_header_t::InitAsDefaultInstance() {
}

blob_header_t::blob_header_t(const blob_header_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.open_street_map.proto.blob_header_t)
}

void blob_header_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blob_header_t::~blob_header_t() {
  // @@protoc_insertion_point(destructor:geo_base.open_street_map.proto.blob_header_t)
  SharedDtor();
}

void blob_header_t::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  index_data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void blob_header_t::ArenaDtor(void* object) {
  blob_header_t* _this = reinterpret_cast< blob_header_t* >(object);
  (void)_this;
}
void blob_header_t::RegisterArenaDtor(::google::protobuf::Arena* /* arena */) {
}
void blob_header_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blob_header_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blob_header_t_descriptor_;
}

const blob_header_t& blob_header_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  return *default_instance_;
}

blob_header_t* blob_header_t::default_instance_ = NULL;

blob_header_t* blob_header_t::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<blob_header_t>(arena);
}

void blob_header_t::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_type()) {
      type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (has_index_data()) {
      index_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    data_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool blob_header_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.open_street_map.proto.blob_header_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "geo_base.open_street_map.proto.blob_header_t.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_index_data;
        break;
      }

      // optional bytes index_data = 2;
      case 2: {
        if (tag == 18) {
         parse_index_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_index_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data_size;
        break;
      }

      // required int32 data_size = 3;
      case 3: {
        if (tag == 24) {
         parse_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_size_)));
          set_has_data_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.open_street_map.proto.blob_header_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.open_street_map.proto.blob_header_t)
  return false;
#undef DO_
}

void blob_header_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.open_street_map.proto.blob_header_t)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_base.open_street_map.proto.blob_header_t.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional bytes index_data = 2;
  if (has_index_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->index_data(), output);
  }

  // required int32 data_size = 3;
  if (has_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->data_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.open_street_map.proto.blob_header_t)
}

::google::protobuf::uint8* blob_header_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.open_street_map.proto.blob_header_t)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_base.open_street_map.proto.blob_header_t.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional bytes index_data = 2;
  if (has_index_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->index_data(), target);
  }

  // required int32 data_size = 3;
  if (has_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->data_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.open_street_map.proto.blob_header_t)
  return target;
}

int blob_header_t::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_data_size()) {
    // required int32 data_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data_size());
  }

  return total_size;
}
int blob_header_t::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required int32 data_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes index_data = 2;
  if (has_index_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->index_data());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blob_header_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const blob_header_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const blob_header_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blob_header_t::MergeFrom(const blob_header_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index_data()) {
      set_index_data(from.index_data());
    }
    if (from.has_data_size()) {
      set_data_size(from.data_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void blob_header_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blob_header_t::CopyFrom(const blob_header_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blob_header_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void blob_header_t::Swap(blob_header_t* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    blob_header_t temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void blob_header_t::UnsafeArenaSwap(blob_header_t* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void blob_header_t::InternalSwap(blob_header_t* other) {
  type_.Swap(&other->type_);
  index_data_.Swap(&other->index_data_);
  std::swap(data_size_, other->data_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata blob_header_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blob_header_t_descriptor_;
  metadata.reflection = blob_header_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// blob_header_t

// required string type = 1;
bool blob_header_t::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void blob_header_t::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void blob_header_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void blob_header_t::clear_type() {
  type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_type();
}
 const ::std::string& blob_header_t::type() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_header_t.type)
  return type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void blob_header_t::set_type(const ::std::string& value) {
  set_has_type();
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_header_t.type)
}
 void blob_header_t::set_type(const char* value) {
  set_has_type();
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.open_street_map.proto.blob_header_t.type)
}
 void blob_header_t::set_type(const char* value,
    size_t size) {
  set_has_type();
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.open_street_map.proto.blob_header_t.type)
}
 ::std::string* blob_header_t::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.blob_header_t.type)
  return type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* blob_header_t::release_type() {
  clear_has_type();
  return type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* blob_header_t::unsafe_arena_release_type() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_type();
  return type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void blob_header_t::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_header_t.type)
}
 void blob_header_t::unsafe_arena_set_allocated_type(
    ::std::string* type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_header_t.type)
}

// optional bytes index_data = 2;
bool blob_header_t::has_index_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void blob_header_t::set_has_index_data() {
  _has_bits_[0] |= 0x00000002u;
}
void blob_header_t::clear_has_index_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void blob_header_t::clear_index_data() {
  index_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_index_data();
}
 const ::std::string& blob_header_t::index_data() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_header_t.index_data)
  return index_data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void blob_header_t::set_index_data(const ::std::string& value) {
  set_has_index_data();
  index_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_header_t.index_data)
}
 void blob_header_t::set_index_data(const char* value) {
  set_has_index_data();
  index_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.open_street_map.proto.blob_header_t.index_data)
}
 void blob_header_t::set_index_data(const void* value,
    size_t size) {
  set_has_index_data();
  index_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.open_street_map.proto.blob_header_t.index_data)
}
 ::std::string* blob_header_t::mutable_index_data() {
  set_has_index_data();
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.blob_header_t.index_data)
  return index_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* blob_header_t::release_index_data() {
  clear_has_index_data();
  return index_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* blob_header_t::unsafe_arena_release_index_data() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_index_data();
  return index_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void blob_header_t::set_allocated_index_data(::std::string* index_data) {
  if (index_data != NULL) {
    set_has_index_data();
  } else {
    clear_has_index_data();
  }
  index_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_header_t.index_data)
}
 void blob_header_t::unsafe_arena_set_allocated_index_data(
    ::std::string* index_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (index_data != NULL) {
    set_has_index_data();
  } else {
    clear_has_index_data();
  }
  index_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      index_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_header_t.index_data)
}

// required int32 data_size = 3;
bool blob_header_t::has_data_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void blob_header_t::set_has_data_size() {
  _has_bits_[0] |= 0x00000004u;
}
void blob_header_t::clear_has_data_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void blob_header_t::clear_data_size() {
  data_size_ = 0;
  clear_has_data_size();
}
 ::google::protobuf::int32 blob_header_t::data_size() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_header_t.data_size)
  return data_size_;
}
 void blob_header_t::set_data_size(::google::protobuf::int32 value) {
  set_has_data_size();
  data_size_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_header_t.data_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int string_table_t::kSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

string_table_t::string_table_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.open_street_map.proto.string_table_t)
}

string_table_t::string_table_t(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  s_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:geo_base.open_street_map.proto.string_table_t)
}

void string_table_t::InitAsDefaultInstance() {
}

string_table_t::string_table_t(const string_table_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.open_street_map.proto.string_table_t)
}

void string_table_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

string_table_t::~string_table_t() {
  // @@protoc_insertion_point(destructor:geo_base.open_street_map.proto.string_table_t)
  SharedDtor();
}

void string_table_t::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void string_table_t::ArenaDtor(void* object) {
  string_table_t* _this = reinterpret_cast< string_table_t* >(object);
  (void)_this;
}
void string_table_t::RegisterArenaDtor(::google::protobuf::Arena* /* arena */) {
}
void string_table_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* string_table_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return string_table_t_descriptor_;
}

const string_table_t& string_table_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  return *default_instance_;
}

string_table_t* string_table_t::default_instance_ = NULL;

string_table_t* string_table_t::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<string_table_t>(arena);
}

void string_table_t::Clear() {
  s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool string_table_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.open_street_map.proto.string_table_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes s = 1;
      case 1: {
        if (tag == 10) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_s;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.open_street_map.proto.string_table_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.open_street_map.proto.string_table_t)
  return false;
#undef DO_
}

void string_table_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.open_street_map.proto.string_table_t)
  // repeated bytes s = 1;
  for (int i = 0; i < this->s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->s(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.open_street_map.proto.string_table_t)
}

::google::protobuf::uint8* string_table_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.open_street_map.proto.string_table_t)
  // repeated bytes s = 1;
  for (int i = 0; i < this->s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->s(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.open_street_map.proto.string_table_t)
  return target;
}

int string_table_t::ByteSize() const {
  int total_size = 0;

  // repeated bytes s = 1;
  total_size += 1 * this->s_size();
  for (int i = 0; i < this->s_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->s(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void string_table_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const string_table_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const string_table_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void string_table_t::MergeFrom(const string_table_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  s_.MergeFrom(from.s_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void string_table_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void string_table_t::CopyFrom(const string_table_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool string_table_t::IsInitialized() const {

  return true;
}

void string_table_t::Swap(string_table_t* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    string_table_t temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void string_table_t::UnsafeArenaSwap(string_table_t* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void string_table_t::InternalSwap(string_table_t* other) {
  s_.UnsafeArenaSwap(&other->s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata string_table_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = string_table_t_descriptor_;
  metadata.reflection = string_table_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// string_table_t

// repeated bytes s = 1;
int string_table_t::s_size() const {
  return s_.size();
}
void string_table_t::clear_s() {
  s_.Clear();
}
 const ::std::string& string_table_t::s(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.string_table_t.s)
  return s_.Get(index);
}
 ::std::string* string_table_t::mutable_s(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.string_table_t.s)
  return s_.Mutable(index);
}
 void string_table_t::set_s(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.string_table_t.s)
  s_.Mutable(index)->assign(value);
}
 void string_table_t::set_s(int index, const char* value) {
  s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:geo_base.open_street_map.proto.string_table_t.s)
}
 void string_table_t::set_s(int index, const void* value, size_t size) {
  s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:geo_base.open_street_map.proto.string_table_t.s)
}
 ::std::string* string_table_t::add_s() {
  return s_.Add();
}
 void string_table_t::add_s(const ::std::string& value) {
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.string_table_t.s)
}
 void string_table_t::add_s(const char* value) {
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:geo_base.open_street_map.proto.string_table_t.s)
}
 void string_table_t::add_s(const void* value, size_t size) {
  s_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:geo_base.open_street_map.proto.string_table_t.s)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
string_table_t::s() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.string_table_t.s)
  return s_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
string_table_t::mutable_s() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.string_table_t.s)
  return &s_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void basic_group_t::_slow_mutable_dense_nodes() {
  dense_nodes_ = ::google::protobuf::Arena::CreateMessage< ::geo_base::open_street_map::proto::dense_nodes_t >(
      GetArenaNoVirtual());
}
::geo_base::open_street_map::proto::dense_nodes_t* basic_group_t::_slow_release_dense_nodes() {
  if (dense_nodes_ == NULL) {
    return NULL;
  } else {
    ::geo_base::open_street_map::proto::dense_nodes_t* temp = new ::geo_base::open_street_map::proto::dense_nodes_t;
    temp->MergeFrom(*dense_nodes_);
    dense_nodes_ = NULL;
    return temp;
  }
}
::geo_base::open_street_map::proto::dense_nodes_t* basic_group_t::unsafe_arena_release_dense_nodes() {
  clear_has_dense_nodes();
  ::geo_base::open_street_map::proto::dense_nodes_t* temp = dense_nodes_;
  dense_nodes_ = NULL;
  return temp;
}
void basic_group_t::_slow_set_allocated_dense_nodes(
    ::google::protobuf::Arena* message_arena, ::geo_base::open_street_map::proto::dense_nodes_t** dense_nodes) {
    if (message_arena != NULL &&
        ::google::protobuf::Arena::GetArena(*dense_nodes) == NULL) {
      message_arena->Own(*dense_nodes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*dense_nodes)) {
      ::geo_base::open_street_map::proto::dense_nodes_t* new_dense_nodes =
            ::google::protobuf::Arena::CreateMessage< ::geo_base::open_street_map::proto::dense_nodes_t >(
            message_arena);
      new_dense_nodes->CopyFrom(**dense_nodes);
      *dense_nodes = new_dense_nodes;
    }
}
void basic_group_t::unsafe_arena_set_allocated_dense_nodes(
    ::geo_base::open_street_map::proto::dense_nodes_t* dense_nodes) {
  if (GetArenaNoVirtual() == NULL) {
    delete dense_nodes_;
  }
  dense_nodes_ = dense_nodes;
  if (dense_nodes) {
    set_has_dense_nodes();
  } else {
    clear_has_dense_nodes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:geo_base.open_street_map.proto.basic_group_t.dense_nodes)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int basic_group_t::kNodesFieldNumber;
const int basic_group_t::kDenseNodesFieldNumber;
const int basic_group_t::kWaysFieldNumber;
const int basic_group_t::kRelationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

basic_group_t::basic_group_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.open_street_map.proto.basic_group_t)
}

basic_group_t::basic_group_t(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  nodes_(arena),
  ways_(arena),
  relations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:geo_base.open_street_map.proto.basic_group_t)
}

void basic_group_t::InitAsDefaultInstance() {
  dense_nodes_ = const_cast< ::geo_base::open_street_map::proto::dense_nodes_t*>(&::geo_base::open_street_map::proto::dense_nodes_t::default_instance());
}

basic_group_t::basic_group_t(const basic_group_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.open_street_map.proto.basic_group_t)
}

void basic_group_t::SharedCtor() {
  _cached_size_ = 0;
  dense_nodes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

basic_group_t::~basic_group_t() {
  // @@protoc_insertion_point(destructor:geo_base.open_street_map.proto.basic_group_t)
  SharedDtor();
}

void basic_group_t::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete dense_nodes_;
  }
}

void basic_group_t::ArenaDtor(void* object) {
  basic_group_t* _this = reinterpret_cast< basic_group_t* >(object);
  (void)_this;
}
void basic_group_t::RegisterArenaDtor(::google::protobuf::Arena* /* arena */) {
}
void basic_group_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* basic_group_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return basic_group_t_descriptor_;
}

const basic_group_t& basic_group_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  return *default_instance_;
}

basic_group_t* basic_group_t::default_instance_ = NULL;

basic_group_t* basic_group_t::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<basic_group_t>(arena);
}

void basic_group_t::Clear() {
  if (has_dense_nodes()) {
    if (dense_nodes_ != NULL) dense_nodes_->::geo_base::open_street_map::proto::dense_nodes_t::Clear();
  }
  nodes_.Clear();
  ways_.Clear();
  relations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool basic_group_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.open_street_map.proto.basic_group_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .geo_base.open_street_map.proto.node_t nodes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_nodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_dense_nodes;
        break;
      }

      // optional .geo_base.open_street_map.proto.dense_nodes_t dense_nodes = 2;
      case 2: {
        if (tag == 18) {
         parse_dense_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dense_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ways;
        break;
      }

      // repeated .geo_base.open_street_map.proto.way_t ways = 3;
      case 3: {
        if (tag == 26) {
         parse_ways:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ways:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ways()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_ways;
        if (input->ExpectTag(34)) goto parse_loop_relations;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .geo_base.open_street_map.proto.relation_t relations = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_relations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_relations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_relations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.open_street_map.proto.basic_group_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.open_street_map.proto.basic_group_t)
  return false;
#undef DO_
}

void basic_group_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.open_street_map.proto.basic_group_t)
  // repeated .geo_base.open_street_map.proto.node_t nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  // optional .geo_base.open_street_map.proto.dense_nodes_t dense_nodes = 2;
  if (has_dense_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dense_nodes_, output);
  }

  // repeated .geo_base.open_street_map.proto.way_t ways = 3;
  for (unsigned int i = 0, n = this->ways_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ways(i), output);
  }

  // repeated .geo_base.open_street_map.proto.relation_t relations = 4;
  for (unsigned int i = 0, n = this->relations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->relations(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.open_street_map.proto.basic_group_t)
}

::google::protobuf::uint8* basic_group_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.open_street_map.proto.basic_group_t)
  // repeated .geo_base.open_street_map.proto.node_t nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }

  // optional .geo_base.open_street_map.proto.dense_nodes_t dense_nodes = 2;
  if (has_dense_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->dense_nodes_, target);
  }

  // repeated .geo_base.open_street_map.proto.way_t ways = 3;
  for (unsigned int i = 0, n = this->ways_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ways(i), target);
  }

  // repeated .geo_base.open_street_map.proto.relation_t relations = 4;
  for (unsigned int i = 0, n = this->relations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->relations(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.open_street_map.proto.basic_group_t)
  return target;
}

int basic_group_t::ByteSize() const {
  int total_size = 0;

  // optional .geo_base.open_street_map.proto.dense_nodes_t dense_nodes = 2;
  if (has_dense_nodes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dense_nodes_);
  }

  // repeated .geo_base.open_street_map.proto.node_t nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  // repeated .geo_base.open_street_map.proto.way_t ways = 3;
  total_size += 1 * this->ways_size();
  for (int i = 0; i < this->ways_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ways(i));
  }

  // repeated .geo_base.open_street_map.proto.relation_t relations = 4;
  total_size += 1 * this->relations_size();
  for (int i = 0; i < this->relations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relations(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void basic_group_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const basic_group_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const basic_group_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void basic_group_t::MergeFrom(const basic_group_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nodes_.MergeFrom(from.nodes_);
  ways_.MergeFrom(from.ways_);
  relations_.MergeFrom(from.relations_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dense_nodes()) {
      mutable_dense_nodes()->::geo_base::open_street_map::proto::dense_nodes_t::MergeFrom(from.dense_nodes());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void basic_group_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void basic_group_t::CopyFrom(const basic_group_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basic_group_t::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->nodes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ways())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->relations())) return false;
  return true;
}

void basic_group_t::Swap(basic_group_t* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    basic_group_t temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void basic_group_t::UnsafeArenaSwap(basic_group_t* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void basic_group_t::InternalSwap(basic_group_t* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  std::swap(dense_nodes_, other->dense_nodes_);
  ways_.UnsafeArenaSwap(&other->ways_);
  relations_.UnsafeArenaSwap(&other->relations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata basic_group_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = basic_group_t_descriptor_;
  metadata.reflection = basic_group_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// basic_group_t

// repeated .geo_base.open_street_map.proto.node_t nodes = 1;
int basic_group_t::nodes_size() const {
  return nodes_.size();
}
void basic_group_t::clear_nodes() {
  nodes_.Clear();
}
const ::geo_base::open_street_map::proto::node_t& basic_group_t::nodes(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_group_t.nodes)
  return nodes_.Get(index);
}
::geo_base::open_street_map::proto::node_t* basic_group_t::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.basic_group_t.nodes)
  return nodes_.Mutable(index);
}
::geo_base::open_street_map::proto::node_t* basic_group_t::add_nodes() {
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.basic_group_t.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::node_t >*
basic_group_t::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.basic_group_t.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::node_t >&
basic_group_t::nodes() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.basic_group_t.nodes)
  return nodes_;
}

// optional .geo_base.open_street_map.proto.dense_nodes_t dense_nodes = 2;
bool basic_group_t::has_dense_nodes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void basic_group_t::set_has_dense_nodes() {
  _has_bits_[0] |= 0x00000002u;
}
void basic_group_t::clear_has_dense_nodes() {
  _has_bits_[0] &= ~0x00000002u;
}
void basic_group_t::clear_dense_nodes() {
  if (dense_nodes_ != NULL) dense_nodes_->::geo_base::open_street_map::proto::dense_nodes_t::Clear();
  clear_has_dense_nodes();
}
const ::geo_base::open_street_map::proto::dense_nodes_t& basic_group_t::dense_nodes() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_group_t.dense_nodes)
  return dense_nodes_ != NULL ? *dense_nodes_ : *default_instance_->dense_nodes_;
}
::geo_base::open_street_map::proto::dense_nodes_t* basic_group_t::mutable_dense_nodes() {
  set_has_dense_nodes();
  if (dense_nodes_ == NULL) {
    _slow_mutable_dense_nodes();
  }
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.basic_group_t.dense_nodes)
  return dense_nodes_;
}
::geo_base::open_street_map::proto::dense_nodes_t* basic_group_t::release_dense_nodes() {
  clear_has_dense_nodes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dense_nodes();
  } else {
    ::geo_base::open_street_map::proto::dense_nodes_t* temp = dense_nodes_;
    dense_nodes_ = NULL;
    return temp;
  }
}
 void basic_group_t::set_allocated_dense_nodes(::geo_base::open_street_map::proto::dense_nodes_t* dense_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dense_nodes_;
  }
  if (dense_nodes != NULL) {
    _slow_set_allocated_dense_nodes(message_arena, &dense_nodes);
  }
  dense_nodes_ = dense_nodes;
  if (dense_nodes) {
    set_has_dense_nodes();
  } else {
    clear_has_dense_nodes();
  }
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.basic_group_t.dense_nodes)
}

// repeated .geo_base.open_street_map.proto.way_t ways = 3;
int basic_group_t::ways_size() const {
  return ways_.size();
}
void basic_group_t::clear_ways() {
  ways_.Clear();
}
const ::geo_base::open_street_map::proto::way_t& basic_group_t::ways(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_group_t.ways)
  return ways_.Get(index);
}
::geo_base::open_street_map::proto::way_t* basic_group_t::mutable_ways(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.basic_group_t.ways)
  return ways_.Mutable(index);
}
::geo_base::open_street_map::proto::way_t* basic_group_t::add_ways() {
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.basic_group_t.ways)
  return ways_.Add();
}
::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::way_t >*
basic_group_t::mutable_ways() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.basic_group_t.ways)
  return &ways_;
}
const ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::way_t >&
basic_group_t::ways() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.basic_group_t.ways)
  return ways_;
}

// repeated .geo_base.open_street_map.proto.relation_t relations = 4;
int basic_group_t::relations_size() const {
  return relations_.size();
}
void basic_group_t::clear_relations() {
  relations_.Clear();
}
const ::geo_base::open_street_map::proto::relation_t& basic_group_t::relations(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_group_t.relations)
  return relations_.Get(index);
}
::geo_base::open_street_map::proto::relation_t* basic_group_t::mutable_relations(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.basic_group_t.relations)
  return relations_.Mutable(index);
}
::geo_base::open_street_map::proto::relation_t* basic_group_t::add_relations() {
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.basic_group_t.relations)
  return relations_.Add();
}
::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::relation_t >*
basic_group_t::mutable_relations() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.basic_group_t.relations)
  return &relations_;
}
const ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::relation_t >&
basic_group_t::relations() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.basic_group_t.relations)
  return relations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void basic_block_t::_slow_mutable_string_table() {
  string_table_ = ::google::protobuf::Arena::CreateMessage< ::geo_base::open_street_map::proto::string_table_t >(
      GetArenaNoVirtual());
}
::geo_base::open_street_map::proto::string_table_t* basic_block_t::_slow_release_string_table() {
  if (string_table_ == NULL) {
    return NULL;
  } else {
    ::geo_base::open_street_map::proto::string_table_t* temp = new ::geo_base::open_street_map::proto::string_table_t;
    temp->MergeFrom(*string_table_);
    string_table_ = NULL;
    return temp;
  }
}
::geo_base::open_street_map::proto::string_table_t* basic_block_t::unsafe_arena_release_string_table() {
  clear_has_string_table();
  ::geo_base::open_street_map::proto::string_table_t* temp = string_table_;
  string_table_ = NULL;
  return temp;
}
void basic_block_t::_slow_set_allocated_string_table(
    ::google::protobuf::Arena* message_arena, ::geo_base::open_street_map::proto::string_table_t** string_table) {
    if (message_arena != NULL &&
        ::google::protobuf::Arena::GetArena(*string_table) == NULL) {
      message_arena->Own(*string_table);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*string_table)) {
      ::geo_base::open_street_map::proto::string_table_t* new_string_table =
            ::google::protobuf::Arena::CreateMessage< ::geo_base::open_street_map::proto::string_table_t >(
            message_arena);
      new_string_table->CopyFrom(**string_table);
      *string_table = new_string_table;
    }
}
void basic_block_t::unsafe_arena_set_allocated_string_table(
    ::geo_base::open_street_map::proto::string_table_t* string_table) {
  if (GetArenaNoVirtual() == NULL) {
    delete string_table_;
  }
  string_table_ = string_table;
  if (string_table) {
    set_has_string_table();
  } else {
    clear_has_string_table();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:geo_base.open_street_map.proto.basic_block_t.string_table)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int basic_block_t::kStringTableFieldNumber;
const int basic_block_t::kBasicGroupsFieldNumber;
const int basic_block_t::kGranularityFieldNumber;
const int basic_block_t::kLatOffFieldNumber;
const int basic_block_t::kLonOffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

basic_block_t::basic_block_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.open_street_map.proto.basic_block_t)
}

basic_block_t::basic_block_t(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  basic_groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:geo_base.open_street_map.proto.basic_block_t)
}

void basic_block_t::InitAsDefaultInstance() {
  string_table_ = const_cast< ::geo_base::open_street_map::proto::string_table_t*>(&::geo_base::open_street_map::proto::string_table_t::default_instance());
}

basic_block_t::basic_block_t(const basic_block_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.open_street_map.proto.basic_block_t)
}

void basic_block_t::SharedCtor() {
  _cached_size_ = 0;
  string_table_ = NULL;
  granularity_ = 100;
  lat_off_ = GOOGLE_LONGLONG(0);
  lon_off_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

basic_block_t::~basic_block_t() {
  // @@protoc_insertion_point(destructor:geo_base.open_street_map.proto.basic_block_t)
  SharedDtor();
}

void basic_block_t::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete string_table_;
  }
}

void basic_block_t::ArenaDtor(void* object) {
  basic_block_t* _this = reinterpret_cast< basic_block_t* >(object);
  (void)_this;
}
void basic_block_t::RegisterArenaDtor(::google::protobuf::Arena* /* arena */) {
}
void basic_block_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* basic_block_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return basic_block_t_descriptor_;
}

const basic_block_t& basic_block_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  return *default_instance_;
}

basic_block_t* basic_block_t::default_instance_ = NULL;

basic_block_t* basic_block_t::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<basic_block_t>(arena);
}

void basic_block_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<basic_block_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 29u) {
    ZR_(lat_off_, lon_off_);
    if (has_string_table()) {
      if (string_table_ != NULL) string_table_->::geo_base::open_street_map::proto::string_table_t::Clear();
    }
    granularity_ = 100;
  }

#undef ZR_HELPER_
#undef ZR_

  basic_groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool basic_block_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.open_street_map.proto.basic_block_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .geo_base.open_street_map.proto.string_table_t string_table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_basic_groups;
        break;
      }

      // repeated .geo_base.open_street_map.proto.basic_group_t basic_groups = 2;
      case 2: {
        if (tag == 18) {
         parse_basic_groups:
          DO_(input->IncrementRecursionDepth());
         parse_loop_basic_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_basic_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_basic_groups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(136)) goto parse_granularity;
        break;
      }

      // optional int32 granularity = 17 [default = 100];
      case 17: {
        if (tag == 136) {
         parse_granularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &granularity_)));
          set_has_granularity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_lat_off;
        break;
      }

      // optional int64 lat_off = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_lat_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lat_off_)));
          set_has_lat_off();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_lon_off;
        break;
      }

      // optional int64 lon_off = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_lon_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lon_off_)));
          set_has_lon_off();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.open_street_map.proto.basic_block_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.open_street_map.proto.basic_block_t)
  return false;
#undef DO_
}

void basic_block_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.open_street_map.proto.basic_block_t)
  // required .geo_base.open_street_map.proto.string_table_t string_table = 1;
  if (has_string_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->string_table_, output);
  }

  // repeated .geo_base.open_street_map.proto.basic_group_t basic_groups = 2;
  for (unsigned int i = 0, n = this->basic_groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->basic_groups(i), output);
  }

  // optional int32 granularity = 17 [default = 100];
  if (has_granularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->granularity(), output);
  }

  // optional int64 lat_off = 19 [default = 0];
  if (has_lat_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->lat_off(), output);
  }

  // optional int64 lon_off = 20 [default = 0];
  if (has_lon_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->lon_off(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.open_street_map.proto.basic_block_t)
}

::google::protobuf::uint8* basic_block_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.open_street_map.proto.basic_block_t)
  // required .geo_base.open_street_map.proto.string_table_t string_table = 1;
  if (has_string_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->string_table_, target);
  }

  // repeated .geo_base.open_street_map.proto.basic_group_t basic_groups = 2;
  for (unsigned int i = 0, n = this->basic_groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->basic_groups(i), target);
  }

  // optional int32 granularity = 17 [default = 100];
  if (has_granularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->granularity(), target);
  }

  // optional int64 lat_off = 19 [default = 0];
  if (has_lat_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->lat_off(), target);
  }

  // optional int64 lon_off = 20 [default = 0];
  if (has_lon_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->lon_off(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.open_street_map.proto.basic_block_t)
  return target;
}

int basic_block_t::ByteSize() const {
  int total_size = 0;

  // required .geo_base.open_street_map.proto.string_table_t string_table = 1;
  if (has_string_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->string_table_);
  }
  if (_has_bits_[2 / 32] & 28u) {
    // optional int32 granularity = 17 [default = 100];
    if (has_granularity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->granularity());
    }

    // optional int64 lat_off = 19 [default = 0];
    if (has_lat_off()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lat_off());
    }

    // optional int64 lon_off = 20 [default = 0];
    if (has_lon_off()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lon_off());
    }

  }
  // repeated .geo_base.open_street_map.proto.basic_group_t basic_groups = 2;
  total_size += 1 * this->basic_groups_size();
  for (int i = 0; i < this->basic_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basic_groups(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void basic_block_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const basic_block_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const basic_block_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void basic_block_t::MergeFrom(const basic_block_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  basic_groups_.MergeFrom(from.basic_groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_table()) {
      mutable_string_table()->::geo_base::open_street_map::proto::string_table_t::MergeFrom(from.string_table());
    }
    if (from.has_granularity()) {
      set_granularity(from.granularity());
    }
    if (from.has_lat_off()) {
      set_lat_off(from.lat_off());
    }
    if (from.has_lon_off()) {
      set_lon_off(from.lon_off());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void basic_block_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void basic_block_t::CopyFrom(const basic_block_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basic_block_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->basic_groups())) return false;
  return true;
}

void basic_block_t::Swap(basic_block_t* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    basic_block_t temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void basic_block_t::UnsafeArenaSwap(basic_block_t* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void basic_block_t::InternalSwap(basic_block_t* other) {
  std::swap(string_table_, other->string_table_);
  basic_groups_.UnsafeArenaSwap(&other->basic_groups_);
  std::swap(granularity_, other->granularity_);
  std::swap(lat_off_, other->lat_off_);
  std::swap(lon_off_, other->lon_off_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata basic_block_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = basic_block_t_descriptor_;
  metadata.reflection = basic_block_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// basic_block_t

// required .geo_base.open_street_map.proto.string_table_t string_table = 1;
bool basic_block_t::has_string_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void basic_block_t::set_has_string_table() {
  _has_bits_[0] |= 0x00000001u;
}
void basic_block_t::clear_has_string_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void basic_block_t::clear_string_table() {
  if (string_table_ != NULL) string_table_->::geo_base::open_street_map::proto::string_table_t::Clear();
  clear_has_string_table();
}
const ::geo_base::open_street_map::proto::string_table_t& basic_block_t::string_table() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_block_t.string_table)
  return string_table_ != NULL ? *string_table_ : *default_instance_->string_table_;
}
::geo_base::open_street_map::proto::string_table_t* basic_block_t::mutable_string_table() {
  set_has_string_table();
  if (string_table_ == NULL) {
    _slow_mutable_string_table();
  }
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.basic_block_t.string_table)
  return string_table_;
}
::geo_base::open_street_map::proto::string_table_t* basic_block_t::release_string_table() {
  clear_has_string_table();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_string_table();
  } else {
    ::geo_base::open_street_map::proto::string_table_t* temp = string_table_;
    string_table_ = NULL;
    return temp;
  }
}
 void basic_block_t::set_allocated_string_table(::geo_base::open_street_map::proto::string_table_t* string_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete string_table_;
  }
  if (string_table != NULL) {
    _slow_set_allocated_string_table(message_arena, &string_table);
  }
  string_table_ = string_table;
  if (string_table) {
    set_has_string_table();
  } else {
    clear_has_string_table();
  }
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.basic_block_t.string_table)
}

// repeated .geo_base.open_street_map.proto.basic_group_t basic_groups = 2;
int basic_block_t::basic_groups_size() const {
  return basic_groups_.size();
}
void basic_block_t::clear_basic_groups() {
  basic_groups_.Clear();
}
const ::geo_base::open_street_map::proto::basic_group_t& basic_block_t::basic_groups(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_block_t.basic_groups)
  return basic_groups_.Get(index);
}
::geo_base::open_street_map::proto::basic_group_t* basic_block_t::mutable_basic_groups(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.basic_block_t.basic_groups)
  return basic_groups_.Mutable(index);
}
::geo_base::open_street_map::proto::basic_group_t* basic_block_t::add_basic_groups() {
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.basic_block_t.basic_groups)
  return basic_groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::basic_group_t >*
basic_block_t::mutable_basic_groups() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.basic_block_t.basic_groups)
  return &basic_groups_;
}
const ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::basic_group_t >&
basic_block_t::basic_groups() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.basic_block_t.basic_groups)
  return basic_groups_;
}

// optional int32 granularity = 17 [default = 100];
bool basic_block_t::has_granularity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void basic_block_t::set_has_granularity() {
  _has_bits_[0] |= 0x00000004u;
}
void basic_block_t::clear_has_granularity() {
  _has_bits_[0] &= ~0x00000004u;
}
void basic_block_t::clear_granularity() {
  granularity_ = 100;
  clear_has_granularity();
}
 ::google::protobuf::int32 basic_block_t::granularity() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_block_t.granularity)
  return granularity_;
}
 void basic_block_t::set_granularity(::google::protobuf::int32 value) {
  set_has_granularity();
  granularity_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.basic_block_t.granularity)
}

// optional int64 lat_off = 19 [default = 0];
bool basic_block_t::has_lat_off() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void basic_block_t::set_has_lat_off() {
  _has_bits_[0] |= 0x00000008u;
}
void basic_block_t::clear_has_lat_off() {
  _has_bits_[0] &= ~0x00000008u;
}
void basic_block_t::clear_lat_off() {
  lat_off_ = GOOGLE_LONGLONG(0);
  clear_has_lat_off();
}
 ::google::protobuf::int64 basic_block_t::lat_off() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_block_t.lat_off)
  return lat_off_;
}
 void basic_block_t::set_lat_off(::google::protobuf::int64 value) {
  set_has_lat_off();
  lat_off_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.basic_block_t.lat_off)
}

// optional int64 lon_off = 20 [default = 0];
bool basic_block_t::has_lon_off() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void basic_block_t::set_has_lon_off() {
  _has_bits_[0] |= 0x00000010u;
}
void basic_block_t::clear_has_lon_off() {
  _has_bits_[0] &= ~0x00000010u;
}
void basic_block_t::clear_lon_off() {
  lon_off_ = GOOGLE_LONGLONG(0);
  clear_has_lon_off();
}
 ::google::protobuf::int64 basic_block_t::lon_off() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_block_t.lon_off)
  return lon_off_;
}
 void basic_block_t::set_lon_off(::google::protobuf::int64 value) {
  set_has_lon_off();
  lon_off_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.basic_block_t.lon_off)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int node_t::kIdFieldNumber;
const int node_t::kKeysFieldNumber;
const int node_t::kValsFieldNumber;
const int node_t::kLatFieldNumber;
const int node_t::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

node_t::node_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.open_street_map.proto.node_t)
}

node_t::node_t(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  keys_(arena),
  vals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:geo_base.open_street_map.proto.node_t)
}

void node_t::InitAsDefaultInstance() {
}

node_t::node_t(const node_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.open_street_map.proto.node_t)
}

void node_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  lat_ = GOOGLE_LONGLONG(0);
  lon_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

node_t::~node_t() {
  // @@protoc_insertion_point(destructor:geo_base.open_street_map.proto.node_t)
  SharedDtor();
}

void node_t::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void node_t::ArenaDtor(void* object) {
  node_t* _this = reinterpret_cast< node_t* >(object);
  (void)_this;
}
void node_t::RegisterArenaDtor(::google::protobuf::Arena* /* arena */) {
}
void node_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* node_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return node_t_descriptor_;
}

const node_t& node_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  return *default_instance_;
}

node_t* node_t::default_instance_ = NULL;

node_t* node_t::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<node_t>(arena);
}

void node_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<node_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 25u) {
    ZR_(lat_, lon_);
    id_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  keys_.Clear();
  vals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool node_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.open_street_map.proto.node_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated uint32 keys = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keys())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vals;
        break;
      }

      // repeated uint32 vals = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_vals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vals())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_vals())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lat;
        break;
      }

      // required sint64 lat = 8;
      case 8: {
        if (tag == 64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lon;
        break;
      }

      // required sint64 lon = 9;
      case 9: {
        if (tag == 72) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.open_street_map.proto.node_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.open_street_map.proto.node_t)
  return false;
#undef DO_
}

void node_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.open_street_map.proto.node_t)
  // required sint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->id(), output);
  }

  // repeated uint32 keys = 2 [packed = true];
  if (this->keys_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_keys_cached_byte_size_);
  }
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->keys(i), output);
  }

  // repeated uint32 vals = 3 [packed = true];
  if (this->vals_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vals_cached_byte_size_);
  }
  for (int i = 0; i < this->vals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->vals(i), output);
  }

  // required sint64 lat = 8;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->lat(), output);
  }

  // required sint64 lon = 9;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(9, this->lon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.open_street_map.proto.node_t)
}

::google::protobuf::uint8* node_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.open_street_map.proto.node_t)
  // required sint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->id(), target);
  }

  // repeated uint32 keys = 2 [packed = true];
  if (this->keys_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _keys_cached_byte_size_, target);
  }
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->keys(i), target);
  }

  // repeated uint32 vals = 3 [packed = true];
  if (this->vals_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vals_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->vals(i), target);
  }

  // required sint64 lat = 8;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->lat(), target);
  }

  // required sint64 lon = 9;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(9, this->lon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.open_street_map.proto.node_t)
  return target;
}

int node_t::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required sint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->id());
  }

  if (has_lat()) {
    // required sint64 lat = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->lat());
  }

  if (has_lon()) {
    // required sint64 lon = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->lon());
  }

  return total_size;
}
int node_t::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required sint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->id());

    // required sint64 lat = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->lat());

    // required sint64 lon = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->lon());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 keys = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->keys(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _keys_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 vals = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->vals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vals(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vals_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void node_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const node_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const node_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void node_t::MergeFrom(const node_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  keys_.MergeFrom(from.keys_);
  vals_.MergeFrom(from.vals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void node_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void node_t::CopyFrom(const node_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  return true;
}

void node_t::Swap(node_t* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    node_t temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void node_t::UnsafeArenaSwap(node_t* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void node_t::InternalSwap(node_t* other) {
  std::swap(id_, other->id_);
  keys_.UnsafeArenaSwap(&other->keys_);
  vals_.UnsafeArenaSwap(&other->vals_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata node_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = node_t_descriptor_;
  metadata.reflection = node_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// node_t

// required sint64 id = 1;
bool node_t::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void node_t::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void node_t::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void node_t::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 node_t::id() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.node_t.id)
  return id_;
}
 void node_t::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.node_t.id)
}

// repeated uint32 keys = 2 [packed = true];
int node_t::keys_size() const {
  return keys_.size();
}
void node_t::clear_keys() {
  keys_.Clear();
}
 ::google::protobuf::uint32 node_t::keys(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.node_t.keys)
  return keys_.Get(index);
}
 void node_t::set_keys(int index, ::google::protobuf::uint32 value) {
  keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.node_t.keys)
}
 void node_t::add_keys(::google::protobuf::uint32 value) {
  keys_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.node_t.keys)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
node_t::keys() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.node_t.keys)
  return keys_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
node_t::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.node_t.keys)
  return &keys_;
}

// repeated uint32 vals = 3 [packed = true];
int node_t::vals_size() const {
  return vals_.size();
}
void node_t::clear_vals() {
  vals_.Clear();
}
 ::google::protobuf::uint32 node_t::vals(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.node_t.vals)
  return vals_.Get(index);
}
 void node_t::set_vals(int index, ::google::protobuf::uint32 value) {
  vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.node_t.vals)
}
 void node_t::add_vals(::google::protobuf::uint32 value) {
  vals_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.node_t.vals)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
node_t::vals() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.node_t.vals)
  return vals_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
node_t::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.node_t.vals)
  return &vals_;
}

// required sint64 lat = 8;
bool node_t::has_lat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void node_t::set_has_lat() {
  _has_bits_[0] |= 0x00000008u;
}
void node_t::clear_has_lat() {
  _has_bits_[0] &= ~0x00000008u;
}
void node_t::clear_lat() {
  lat_ = GOOGLE_LONGLONG(0);
  clear_has_lat();
}
 ::google::protobuf::int64 node_t::lat() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.node_t.lat)
  return lat_;
}
 void node_t::set_lat(::google::protobuf::int64 value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.node_t.lat)
}

// required sint64 lon = 9;
bool node_t::has_lon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void node_t::set_has_lon() {
  _has_bits_[0] |= 0x00000010u;
}
void node_t::clear_has_lon() {
  _has_bits_[0] &= ~0x00000010u;
}
void node_t::clear_lon() {
  lon_ = GOOGLE_LONGLONG(0);
  clear_has_lon();
}
 ::google::protobuf::int64 node_t::lon() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.node_t.lon)
  return lon_;
}
 void node_t::set_lon(::google::protobuf::int64 value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.node_t.lon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dense_nodes_t::kIdFieldNumber;
const int dense_nodes_t::kLatFieldNumber;
const int dense_nodes_t::kLonFieldNumber;
const int dense_nodes_t::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dense_nodes_t::dense_nodes_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.open_street_map.proto.dense_nodes_t)
}

dense_nodes_t::dense_nodes_t(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  id_(arena),
  lat_(arena),
  lon_(arena),
  kvs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:geo_base.open_street_map.proto.dense_nodes_t)
}

void dense_nodes_t::InitAsDefaultInstance() {
}

dense_nodes_t::dense_nodes_t(const dense_nodes_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.open_street_map.proto.dense_nodes_t)
}

void dense_nodes_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dense_nodes_t::~dense_nodes_t() {
  // @@protoc_insertion_point(destructor:geo_base.open_street_map.proto.dense_nodes_t)
  SharedDtor();
}

void dense_nodes_t::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void dense_nodes_t::ArenaDtor(void* object) {
  dense_nodes_t* _this = reinterpret_cast< dense_nodes_t* >(object);
  (void)_this;
}
void dense_nodes_t::RegisterArenaDtor(::google::protobuf::Arena* /* arena */) {
}
void dense_nodes_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dense_nodes_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dense_nodes_t_descriptor_;
}

const dense_nodes_t& dense_nodes_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  return *default_instance_;
}

dense_nodes_t* dense_nodes_t::default_instance_ = NULL;

dense_nodes_t* dense_nodes_t::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<dense_nodes_t>(arena);
}

void dense_nodes_t::Clear() {
  id_.Clear();
  lat_.Clear();
  lon_.Clear();
  kvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool dense_nodes_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.open_street_map.proto.dense_nodes_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 id = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_id())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 10, input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_lat;
        break;
      }

      // repeated sint64 lat = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_lat())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 66, input, this->mutable_lat())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_lon;
        break;
      }

      // repeated sint64 lon = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_lon())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 74, input, this->mutable_lon())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_kvs;
        break;
      }

      // repeated int32 kvs = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_kvs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kvs())));
        } else if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 82, input, this->mutable_kvs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.open_street_map.proto.dense_nodes_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.open_street_map.proto.dense_nodes_t)
  return false;
#undef DO_
}

void dense_nodes_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.open_street_map.proto.dense_nodes_t)
  // repeated sint64 id = 1 [packed = true];
  if (this->id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_id_cached_byte_size_);
  }
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->id(i), output);
  }

  // repeated sint64 lat = 8 [packed = true];
  if (this->lat_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lat_cached_byte_size_);
  }
  for (int i = 0; i < this->lat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->lat(i), output);
  }

  // repeated sint64 lon = 9 [packed = true];
  if (this->lon_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lon_cached_byte_size_);
  }
  for (int i = 0; i < this->lon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->lon(i), output);
  }

  // repeated int32 kvs = 10 [packed = true];
  if (this->kvs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kvs_cached_byte_size_);
  }
  for (int i = 0; i < this->kvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->kvs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.open_street_map.proto.dense_nodes_t)
}

::google::protobuf::uint8* dense_nodes_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.open_street_map.proto.dense_nodes_t)
  // repeated sint64 id = 1 [packed = true];
  if (this->id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->id(i), target);
  }

  // repeated sint64 lat = 8 [packed = true];
  if (this->lat_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _lat_cached_byte_size_, target);
  }
  for (int i = 0; i < this->lat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->lat(i), target);
  }

  // repeated sint64 lon = 9 [packed = true];
  if (this->lon_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _lon_cached_byte_size_, target);
  }
  for (int i = 0; i < this->lon_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->lon(i), target);
  }

  // repeated int32 kvs = 10 [packed = true];
  if (this->kvs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _kvs_cached_byte_size_, target);
  }
  for (int i = 0; i < this->kvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->kvs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.open_street_map.proto.dense_nodes_t)
  return target;
}

int dense_nodes_t::ByteSize() const {
  int total_size = 0;

  // repeated sint64 id = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 lat = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->lat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->lat(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lat_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 lon = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->lon_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->lon(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lon_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 kvs = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->kvs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->kvs(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _kvs_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dense_nodes_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const dense_nodes_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dense_nodes_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dense_nodes_t::MergeFrom(const dense_nodes_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  id_.MergeFrom(from.id_);
  lat_.MergeFrom(from.lat_);
  lon_.MergeFrom(from.lon_);
  kvs_.MergeFrom(from.kvs_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void dense_nodes_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dense_nodes_t::CopyFrom(const dense_nodes_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dense_nodes_t::IsInitialized() const {

  return true;
}

void dense_nodes_t::Swap(dense_nodes_t* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    dense_nodes_t temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void dense_nodes_t::UnsafeArenaSwap(dense_nodes_t* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void dense_nodes_t::InternalSwap(dense_nodes_t* other) {
  id_.UnsafeArenaSwap(&other->id_);
  lat_.UnsafeArenaSwap(&other->lat_);
  lon_.UnsafeArenaSwap(&other->lon_);
  kvs_.UnsafeArenaSwap(&other->kvs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dense_nodes_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dense_nodes_t_descriptor_;
  metadata.reflection = dense_nodes_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dense_nodes_t

// repeated sint64 id = 1 [packed = true];
int dense_nodes_t::id_size() const {
  return id_.size();
}
void dense_nodes_t::clear_id() {
  id_.Clear();
}
 ::google::protobuf::int64 dense_nodes_t::id(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.dense_nodes_t.id)
  return id_.Get(index);
}
 void dense_nodes_t::set_id(int index, ::google::protobuf::int64 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.dense_nodes_t.id)
}
 void dense_nodes_t::add_id(::google::protobuf::int64 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.dense_nodes_t.id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dense_nodes_t::id() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.dense_nodes_t.id)
  return id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dense_nodes_t::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.dense_nodes_t.id)
  return &id_;
}

// repeated sint64 lat = 8 [packed = true];
int dense_nodes_t::lat_size() const {
  return lat_.size();
}
void dense_nodes_t::clear_lat() {
  lat_.Clear();
}
 ::google::protobuf::int64 dense_nodes_t::lat(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.dense_nodes_t.lat)
  return lat_.Get(index);
}
 void dense_nodes_t::set_lat(int index, ::google::protobuf::int64 value) {
  lat_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.dense_nodes_t.lat)
}
 void dense_nodes_t::add_lat(::google::protobuf::int64 value) {
  lat_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.dense_nodes_t.lat)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dense_nodes_t::lat() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.dense_nodes_t.lat)
  return lat_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dense_nodes_t::mutable_lat() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.dense_nodes_t.lat)
  return &lat_;
}

// repeated sint64 lon = 9 [packed = true];
int dense_nodes_t::lon_size() const {
  return lon_.size();
}
void dense_nodes_t::clear_lon() {
  lon_.Clear();
}
 ::google::protobuf::int64 dense_nodes_t::lon(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.dense_nodes_t.lon)
  return lon_.Get(index);
}
 void dense_nodes_t::set_lon(int index, ::google::protobuf::int64 value) {
  lon_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.dense_nodes_t.lon)
}
 void dense_nodes_t::add_lon(::google::protobuf::int64 value) {
  lon_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.dense_nodes_t.lon)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dense_nodes_t::lon() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.dense_nodes_t.lon)
  return lon_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dense_nodes_t::mutable_lon() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.dense_nodes_t.lon)
  return &lon_;
}

// repeated int32 kvs = 10 [packed = true];
int dense_nodes_t::kvs_size() const {
  return kvs_.size();
}
void dense_nodes_t::clear_kvs() {
  kvs_.Clear();
}
 ::google::protobuf::int32 dense_nodes_t::kvs(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.dense_nodes_t.kvs)
  return kvs_.Get(index);
}
 void dense_nodes_t::set_kvs(int index, ::google::protobuf::int32 value) {
  kvs_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.dense_nodes_t.kvs)
}
 void dense_nodes_t::add_kvs(::google::protobuf::int32 value) {
  kvs_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.dense_nodes_t.kvs)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
dense_nodes_t::kvs() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.dense_nodes_t.kvs)
  return kvs_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
dense_nodes_t::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.dense_nodes_t.kvs)
  return &kvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int way_t::kIdFieldNumber;
const int way_t::kKeysFieldNumber;
const int way_t::kValsFieldNumber;
const int way_t::kRefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

way_t::way_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.open_street_map.proto.way_t)
}

way_t::way_t(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  keys_(arena),
  vals_(arena),
  refs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:geo_base.open_street_map.proto.way_t)
}

void way_t::InitAsDefaultInstance() {
}

way_t::way_t(const way_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.open_street_map.proto.way_t)
}

void way_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

way_t::~way_t() {
  // @@protoc_insertion_point(destructor:geo_base.open_street_map.proto.way_t)
  SharedDtor();
}

void way_t::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void way_t::ArenaDtor(void* object) {
  way_t* _this = reinterpret_cast< way_t* >(object);
  (void)_this;
}
void way_t::RegisterArenaDtor(::google::protobuf::Arena* /* arena */) {
}
void way_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* way_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return way_t_descriptor_;
}

const way_t& way_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  return *default_instance_;
}

way_t* way_t::default_instance_ = NULL;

way_t* way_t::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<way_t>(arena);
}

void way_t::Clear() {
  id_ = GOOGLE_LONGLONG(0);
  keys_.Clear();
  vals_.Clear();
  refs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool way_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.open_street_map.proto.way_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated uint32 keys = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keys())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vals;
        break;
      }

      // repeated uint32 vals = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_vals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vals())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_vals())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_refs;
        break;
      }

      // repeated sint64 refs = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_refs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_refs())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 66, input, this->mutable_refs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.open_street_map.proto.way_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.open_street_map.proto.way_t)
  return false;
#undef DO_
}

void way_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.open_street_map.proto.way_t)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated uint32 keys = 2 [packed = true];
  if (this->keys_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_keys_cached_byte_size_);
  }
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->keys(i), output);
  }

  // repeated uint32 vals = 3 [packed = true];
  if (this->vals_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vals_cached_byte_size_);
  }
  for (int i = 0; i < this->vals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->vals(i), output);
  }

  // repeated sint64 refs = 8 [packed = true];
  if (this->refs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_refs_cached_byte_size_);
  }
  for (int i = 0; i < this->refs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->refs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.open_street_map.proto.way_t)
}

::google::protobuf::uint8* way_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.open_street_map.proto.way_t)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated uint32 keys = 2 [packed = true];
  if (this->keys_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _keys_cached_byte_size_, target);
  }
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->keys(i), target);
  }

  // repeated uint32 vals = 3 [packed = true];
  if (this->vals_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vals_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->vals(i), target);
  }

  // repeated sint64 refs = 8 [packed = true];
  if (this->refs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _refs_cached_byte_size_, target);
  }
  for (int i = 0; i < this->refs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->refs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.open_street_map.proto.way_t)
  return target;
}

int way_t::ByteSize() const {
  int total_size = 0;

  // required int64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }
  // repeated uint32 keys = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->keys(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _keys_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 vals = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->vals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vals(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vals_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 refs = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->refs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->refs(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _refs_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void way_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const way_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const way_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void way_t::MergeFrom(const way_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  keys_.MergeFrom(from.keys_);
  vals_.MergeFrom(from.vals_);
  refs_.MergeFrom(from.refs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void way_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void way_t::CopyFrom(const way_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool way_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void way_t::Swap(way_t* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    way_t temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void way_t::UnsafeArenaSwap(way_t* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void way_t::InternalSwap(way_t* other) {
  std::swap(id_, other->id_);
  keys_.UnsafeArenaSwap(&other->keys_);
  vals_.UnsafeArenaSwap(&other->vals_);
  refs_.UnsafeArenaSwap(&other->refs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata way_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = way_t_descriptor_;
  metadata.reflection = way_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// way_t

// required int64 id = 1;
bool way_t::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void way_t::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void way_t::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void way_t::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 way_t::id() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.way_t.id)
  return id_;
}
 void way_t::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.way_t.id)
}

// repeated uint32 keys = 2 [packed = true];
int way_t::keys_size() const {
  return keys_.size();
}
void way_t::clear_keys() {
  keys_.Clear();
}
 ::google::protobuf::uint32 way_t::keys(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.way_t.keys)
  return keys_.Get(index);
}
 void way_t::set_keys(int index, ::google::protobuf::uint32 value) {
  keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.way_t.keys)
}
 void way_t::add_keys(::google::protobuf::uint32 value) {
  keys_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.way_t.keys)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
way_t::keys() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.way_t.keys)
  return keys_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
way_t::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.way_t.keys)
  return &keys_;
}

// repeated uint32 vals = 3 [packed = true];
int way_t::vals_size() const {
  return vals_.size();
}
void way_t::clear_vals() {
  vals_.Clear();
}
 ::google::protobuf::uint32 way_t::vals(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.way_t.vals)
  return vals_.Get(index);
}
 void way_t::set_vals(int index, ::google::protobuf::uint32 value) {
  vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.way_t.vals)
}
 void way_t::add_vals(::google::protobuf::uint32 value) {
  vals_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.way_t.vals)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
way_t::vals() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.way_t.vals)
  return vals_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
way_t::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.way_t.vals)
  return &vals_;
}

// repeated sint64 refs = 8 [packed = true];
int way_t::refs_size() const {
  return refs_.size();
}
void way_t::clear_refs() {
  refs_.Clear();
}
 ::google::protobuf::int64 way_t::refs(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.way_t.refs)
  return refs_.Get(index);
}
 void way_t::set_refs(int index, ::google::protobuf::int64 value) {
  refs_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.way_t.refs)
}
 void way_t::add_refs(::google::protobuf::int64 value) {
  refs_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.way_t.refs)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
way_t::refs() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.way_t.refs)
  return refs_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
way_t::mutable_refs() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.way_t.refs)
  return &refs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* relation_t_member_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return relation_t_member_type_t_descriptor_;
}
bool relation_t_member_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const relation_t_member_type_t relation_t::NODE;
const relation_t_member_type_t relation_t::WAY;
const relation_t_member_type_t relation_t::RELATION;
const relation_t_member_type_t relation_t::member_type_t_MIN;
const relation_t_member_type_t relation_t::member_type_t_MAX;
const int relation_t::member_type_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int relation_t::kIdFieldNumber;
const int relation_t::kKeysFieldNumber;
const int relation_t::kValsFieldNumber;
const int relation_t::kRolesSidFieldNumber;
const int relation_t::kMemberIdsFieldNumber;
const int relation_t::kMemberTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

relation_t::relation_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_base.open_street_map.proto.relation_t)
}

relation_t::relation_t(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  keys_(arena),
  vals_(arena),
  roles_sid_(arena),
  member_ids_(arena),
  member_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:geo_base.open_street_map.proto.relation_t)
}

void relation_t::InitAsDefaultInstance() {
}

relation_t::relation_t(const relation_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:geo_base.open_street_map.proto.relation_t)
}

void relation_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

relation_t::~relation_t() {
  // @@protoc_insertion_point(destructor:geo_base.open_street_map.proto.relation_t)
  SharedDtor();
}

void relation_t::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void relation_t::ArenaDtor(void* object) {
  relation_t* _this = reinterpret_cast< relation_t* >(object);
  (void)_this;
}
void relation_t::RegisterArenaDtor(::google::protobuf::Arena* /* arena */) {
}
void relation_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* relation_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return relation_t_descriptor_;
}

const relation_t& relation_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  return *default_instance_;
}

relation_t* relation_t::default_instance_ = NULL;

relation_t* relation_t::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<relation_t>(arena);
}

void relation_t::Clear() {
  id_ = GOOGLE_LONGLONG(0);
  keys_.Clear();
  vals_.Clear();
  roles_sid_.Clear();
  member_ids_.Clear();
  member_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool relation_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_base.open_street_map.proto.relation_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated uint32 keys = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keys())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vals;
        break;
      }

      // repeated uint32 vals = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_vals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vals())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_vals())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_roles_sid;
        break;
      }

      // repeated int32 roles_sid = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_roles_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roles_sid())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66, input, this->mutable_roles_sid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_member_ids;
        break;
      }

      // repeated sint64 member_ids = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_member_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_member_ids())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 74, input, this->mutable_member_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_member_types;
        break;
      }

      // repeated .geo_base.open_street_map.proto.relation_t.member_type_t member_types = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_member_types:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::geo_base::open_street_map::proto::relation_t_member_type_t_IsValid(value)) {
              add_member_types(static_cast< ::geo_base::open_street_map::proto::relation_t_member_type_t >(value));
            } else {
              mutable_unknown_fields()->AddVarint(10, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::geo_base::open_street_map::proto::relation_t_member_type_t_IsValid(value)) {
            add_member_types(static_cast< ::geo_base::open_street_map::proto::relation_t_member_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_base.open_street_map.proto.relation_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_base.open_street_map.proto.relation_t)
  return false;
#undef DO_
}

void relation_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_base.open_street_map.proto.relation_t)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated uint32 keys = 2 [packed = true];
  if (this->keys_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_keys_cached_byte_size_);
  }
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->keys(i), output);
  }

  // repeated uint32 vals = 3 [packed = true];
  if (this->vals_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vals_cached_byte_size_);
  }
  for (int i = 0; i < this->vals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->vals(i), output);
  }

  // repeated int32 roles_sid = 8 [packed = true];
  if (this->roles_sid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_roles_sid_cached_byte_size_);
  }
  for (int i = 0; i < this->roles_sid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->roles_sid(i), output);
  }

  // repeated sint64 member_ids = 9 [packed = true];
  if (this->member_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_member_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->member_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->member_ids(i), output);
  }

  // repeated .geo_base.open_street_map.proto.relation_t.member_type_t member_types = 10 [packed = true];
  if (this->member_types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_member_types_cached_byte_size_);
  }
  for (int i = 0; i < this->member_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->member_types(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_base.open_street_map.proto.relation_t)
}

::google::protobuf::uint8* relation_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_base.open_street_map.proto.relation_t)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated uint32 keys = 2 [packed = true];
  if (this->keys_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _keys_cached_byte_size_, target);
  }
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->keys(i), target);
  }

  // repeated uint32 vals = 3 [packed = true];
  if (this->vals_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vals_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->vals(i), target);
  }

  // repeated int32 roles_sid = 8 [packed = true];
  if (this->roles_sid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _roles_sid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->roles_sid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->roles_sid(i), target);
  }

  // repeated sint64 member_ids = 9 [packed = true];
  if (this->member_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _member_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->member_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->member_ids(i), target);
  }

  // repeated .geo_base.open_street_map.proto.relation_t.member_type_t member_types = 10 [packed = true];
  if (this->member_types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _member_types_cached_byte_size_, target);
  }
  for (int i = 0; i < this->member_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->member_types(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_base.open_street_map.proto.relation_t)
  return target;
}

int relation_t::ByteSize() const {
  int total_size = 0;

  // required int64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }
  // repeated uint32 keys = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->keys(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _keys_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 vals = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->vals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vals(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vals_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 roles_sid = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->roles_sid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roles_sid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _roles_sid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 member_ids = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->member_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->member_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _member_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .geo_base.open_street_map.proto.relation_t.member_type_t member_types = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->member_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->member_types(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _member_types_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void relation_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const relation_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const relation_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void relation_t::MergeFrom(const relation_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  keys_.MergeFrom(from.keys_);
  vals_.MergeFrom(from.vals_);
  roles_sid_.MergeFrom(from.roles_sid_);
  member_ids_.MergeFrom(from.member_ids_);
  member_types_.MergeFrom(from.member_types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void relation_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void relation_t::CopyFrom(const relation_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool relation_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void relation_t::Swap(relation_t* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    relation_t temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void relation_t::UnsafeArenaSwap(relation_t* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void relation_t::InternalSwap(relation_t* other) {
  std::swap(id_, other->id_);
  keys_.UnsafeArenaSwap(&other->keys_);
  vals_.UnsafeArenaSwap(&other->vals_);
  roles_sid_.UnsafeArenaSwap(&other->roles_sid_);
  member_ids_.UnsafeArenaSwap(&other->member_ids_);
  member_types_.UnsafeArenaSwap(&other->member_types_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata relation_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = relation_t_descriptor_;
  metadata.reflection = relation_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// relation_t

// required int64 id = 1;
bool relation_t::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void relation_t::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void relation_t::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void relation_t::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 relation_t::id() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.relation_t.id)
  return id_;
}
 void relation_t::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.relation_t.id)
}

// repeated uint32 keys = 2 [packed = true];
int relation_t::keys_size() const {
  return keys_.size();
}
void relation_t::clear_keys() {
  keys_.Clear();
}
 ::google::protobuf::uint32 relation_t::keys(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.relation_t.keys)
  return keys_.Get(index);
}
 void relation_t::set_keys(int index, ::google::protobuf::uint32 value) {
  keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.relation_t.keys)
}
 void relation_t::add_keys(::google::protobuf::uint32 value) {
  keys_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.relation_t.keys)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
relation_t::keys() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.relation_t.keys)
  return keys_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
relation_t::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.relation_t.keys)
  return &keys_;
}

// repeated uint32 vals = 3 [packed = true];
int relation_t::vals_size() const {
  return vals_.size();
}
void relation_t::clear_vals() {
  vals_.Clear();
}
 ::google::protobuf::uint32 relation_t::vals(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.relation_t.vals)
  return vals_.Get(index);
}
 void relation_t::set_vals(int index, ::google::protobuf::uint32 value) {
  vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.relation_t.vals)
}
 void relation_t::add_vals(::google::protobuf::uint32 value) {
  vals_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.relation_t.vals)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
relation_t::vals() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.relation_t.vals)
  return vals_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
relation_t::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.relation_t.vals)
  return &vals_;
}

// repeated int32 roles_sid = 8 [packed = true];
int relation_t::roles_sid_size() const {
  return roles_sid_.size();
}
void relation_t::clear_roles_sid() {
  roles_sid_.Clear();
}
 ::google::protobuf::int32 relation_t::roles_sid(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.relation_t.roles_sid)
  return roles_sid_.Get(index);
}
 void relation_t::set_roles_sid(int index, ::google::protobuf::int32 value) {
  roles_sid_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.relation_t.roles_sid)
}
 void relation_t::add_roles_sid(::google::protobuf::int32 value) {
  roles_sid_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.relation_t.roles_sid)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
relation_t::roles_sid() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.relation_t.roles_sid)
  return roles_sid_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
relation_t::mutable_roles_sid() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.relation_t.roles_sid)
  return &roles_sid_;
}

// repeated sint64 member_ids = 9 [packed = true];
int relation_t::member_ids_size() const {
  return member_ids_.size();
}
void relation_t::clear_member_ids() {
  member_ids_.Clear();
}
 ::google::protobuf::int64 relation_t::member_ids(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.relation_t.member_ids)
  return member_ids_.Get(index);
}
 void relation_t::set_member_ids(int index, ::google::protobuf::int64 value) {
  member_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.relation_t.member_ids)
}
 void relation_t::add_member_ids(::google::protobuf::int64 value) {
  member_ids_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.relation_t.member_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
relation_t::member_ids() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.relation_t.member_ids)
  return member_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
relation_t::mutable_member_ids() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.relation_t.member_ids)
  return &member_ids_;
}

// repeated .geo_base.open_street_map.proto.relation_t.member_type_t member_types = 10 [packed = true];
int relation_t::member_types_size() const {
  return member_types_.size();
}
void relation_t::clear_member_types() {
  member_types_.Clear();
}
 ::geo_base::open_street_map::proto::relation_t_member_type_t relation_t::member_types(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.relation_t.member_types)
  return static_cast< ::geo_base::open_street_map::proto::relation_t_member_type_t >(member_types_.Get(index));
}
 void relation_t::set_member_types(int index, ::geo_base::open_street_map::proto::relation_t_member_type_t value) {
  assert(::geo_base::open_street_map::proto::relation_t_member_type_t_IsValid(value));
  member_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.relation_t.member_types)
}
 void relation_t::add_member_types(::geo_base::open_street_map::proto::relation_t_member_type_t value) {
  assert(::geo_base::open_street_map::proto::relation_t_member_type_t_IsValid(value));
  member_types_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.relation_t.member_types)
}
 const ::google::protobuf::RepeatedField<int>&
relation_t::member_types() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.relation_t.member_types)
  return member_types_;
}
 ::google::protobuf::RepeatedField<int>*
relation_t::mutable_member_types() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.relation_t.member_types)
  return &member_types_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace open_street_map
}  // namespace geo_base

// @@protoc_insertion_point(global_scope)
