// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: open_street_map.proto

#ifndef PROTOBUF_open_5fstreet_5fmap_2eproto__INCLUDED
#define PROTOBUF_open_5fstreet_5fmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace geo_base {
namespace open_street_map {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
void protobuf_AssignDesc_open_5fstreet_5fmap_2eproto();
void protobuf_ShutdownFile_open_5fstreet_5fmap_2eproto();

class basic_block_t;
class basic_group_t;
class blob_header_t;
class blob_t;
class dense_nodes_t;
class node_t;
class relation_t;
class string_table_t;
class way_t;

enum relation_t_member_type_t {
  relation_t_member_type_t_NODE = 0,
  relation_t_member_type_t_WAY = 1,
  relation_t_member_type_t_RELATION = 2
};
bool relation_t_member_type_t_IsValid(int value);
const relation_t_member_type_t relation_t_member_type_t_member_type_t_MIN = relation_t_member_type_t_NODE;
const relation_t_member_type_t relation_t_member_type_t_member_type_t_MAX = relation_t_member_type_t_RELATION;
const int relation_t_member_type_t_member_type_t_ARRAYSIZE = relation_t_member_type_t_member_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* relation_t_member_type_t_descriptor();
inline const ::std::string& relation_t_member_type_t_Name(relation_t_member_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    relation_t_member_type_t_descriptor(), value);
}
inline bool relation_t_member_type_t_Parse(
    const ::std::string& name, relation_t_member_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<relation_t_member_type_t>(
    relation_t_member_type_t_descriptor(), name, value);
}
// ===================================================================

class blob_t : public ::google::protobuf::Message {
 public:
  blob_t();
  virtual ~blob_t();

  blob_t(const blob_t& from);

  inline blob_t& operator=(const blob_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const blob_t& default_instance();

  void UnsafeArenaSwap(blob_t* other);
  void Swap(blob_t* other);

  // implements Message ----------------------------------------------

  inline blob_t* New() const { return New(NULL); }

  blob_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blob_t& from);
  void MergeFrom(const blob_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(blob_t* other);
  protected:
  explicit blob_t(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes raw = 1;
  bool has_raw() const;
  void clear_raw();
  static const int kRawFieldNumber = 1;
  const ::std::string& raw() const;
  void set_raw(const ::std::string& value);
  void set_raw(const char* value);
  void set_raw(const void* value, size_t size);
  ::std::string* mutable_raw();
  ::std::string* release_raw();
  void set_allocated_raw(::std::string* raw);
  ::std::string* unsafe_arena_release_raw();
  void unsafe_arena_set_allocated_raw(
      ::std::string* raw);

  // optional int32 raw_size = 2;
  bool has_raw_size() const;
  void clear_raw_size();
  static const int kRawSizeFieldNumber = 2;
  ::google::protobuf::int32 raw_size() const;
  void set_raw_size(::google::protobuf::int32 value);

  // optional bytes zlib_data = 3;
  bool has_zlib_data() const;
  void clear_zlib_data();
  static const int kZlibDataFieldNumber = 3;
  const ::std::string& zlib_data() const;
  void set_zlib_data(const ::std::string& value);
  void set_zlib_data(const char* value);
  void set_zlib_data(const void* value, size_t size);
  ::std::string* mutable_zlib_data();
  ::std::string* release_zlib_data();
  void set_allocated_zlib_data(::std::string* zlib_data);
  ::std::string* unsafe_arena_release_zlib_data();
  void unsafe_arena_set_allocated_zlib_data(
      ::std::string* zlib_data);

  // optional bytes lzma_data = 4;
  bool has_lzma_data() const;
  void clear_lzma_data();
  static const int kLzmaDataFieldNumber = 4;
  const ::std::string& lzma_data() const;
  void set_lzma_data(const ::std::string& value);
  void set_lzma_data(const char* value);
  void set_lzma_data(const void* value, size_t size);
  ::std::string* mutable_lzma_data();
  ::std::string* release_lzma_data();
  void set_allocated_lzma_data(::std::string* lzma_data);
  ::std::string* unsafe_arena_release_lzma_data();
  void unsafe_arena_set_allocated_lzma_data(
      ::std::string* lzma_data);

  // @@protoc_insertion_point(class_scope:geo_base.open_street_map.proto.blob_t)
 private:
  inline void set_has_raw();
  inline void clear_has_raw();
  inline void set_has_raw_size();
  inline void clear_has_raw_size();
  inline void set_has_zlib_data();
  inline void clear_has_zlib_data();
  inline void set_has_lzma_data();
  inline void clear_has_lzma_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr raw_;
  ::google::protobuf::internal::ArenaStringPtr zlib_data_;
  ::google::protobuf::internal::ArenaStringPtr lzma_data_;
  ::google::protobuf::int32 raw_size_;
  friend void  protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_AssignDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_ShutdownFile_open_5fstreet_5fmap_2eproto();

  void InitAsDefaultInstance();
  static blob_t* default_instance_;
};
// -------------------------------------------------------------------

class blob_header_t : public ::google::protobuf::Message {
 public:
  blob_header_t();
  virtual ~blob_header_t();

  blob_header_t(const blob_header_t& from);

  inline blob_header_t& operator=(const blob_header_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const blob_header_t& default_instance();

  void UnsafeArenaSwap(blob_header_t* other);
  void Swap(blob_header_t* other);

  // implements Message ----------------------------------------------

  inline blob_header_t* New() const { return New(NULL); }

  blob_header_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blob_header_t& from);
  void MergeFrom(const blob_header_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(blob_header_t* other);
  protected:
  explicit blob_header_t(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);
  ::std::string* unsafe_arena_release_type();
  void unsafe_arena_set_allocated_type(
      ::std::string* type);

  // optional bytes index_data = 2;
  bool has_index_data() const;
  void clear_index_data();
  static const int kIndexDataFieldNumber = 2;
  const ::std::string& index_data() const;
  void set_index_data(const ::std::string& value);
  void set_index_data(const char* value);
  void set_index_data(const void* value, size_t size);
  ::std::string* mutable_index_data();
  ::std::string* release_index_data();
  void set_allocated_index_data(::std::string* index_data);
  ::std::string* unsafe_arena_release_index_data();
  void unsafe_arena_set_allocated_index_data(
      ::std::string* index_data);

  // required int32 data_size = 3;
  bool has_data_size() const;
  void clear_data_size();
  static const int kDataSizeFieldNumber = 3;
  ::google::protobuf::int32 data_size() const;
  void set_data_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:geo_base.open_street_map.proto.blob_header_t)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index_data();
  inline void clear_has_index_data();
  inline void set_has_data_size();
  inline void clear_has_data_size();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr index_data_;
  ::google::protobuf::int32 data_size_;
  friend void  protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_AssignDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_ShutdownFile_open_5fstreet_5fmap_2eproto();

  void InitAsDefaultInstance();
  static blob_header_t* default_instance_;
};
// -------------------------------------------------------------------

class string_table_t : public ::google::protobuf::Message {
 public:
  string_table_t();
  virtual ~string_table_t();

  string_table_t(const string_table_t& from);

  inline string_table_t& operator=(const string_table_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const string_table_t& default_instance();

  void UnsafeArenaSwap(string_table_t* other);
  void Swap(string_table_t* other);

  // implements Message ----------------------------------------------

  inline string_table_t* New() const { return New(NULL); }

  string_table_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const string_table_t& from);
  void MergeFrom(const string_table_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(string_table_t* other);
  protected:
  explicit string_table_t(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes s = 1;
  int s_size() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  const ::std::string& s(int index) const;
  ::std::string* mutable_s(int index);
  void set_s(int index, const ::std::string& value);
  void set_s(int index, const char* value);
  void set_s(int index, const void* value, size_t size);
  ::std::string* add_s();
  void add_s(const ::std::string& value);
  void add_s(const char* value);
  void add_s(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& s() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_s();

  // @@protoc_insertion_point(class_scope:geo_base.open_street_map.proto.string_table_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> s_;
  friend void  protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_AssignDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_ShutdownFile_open_5fstreet_5fmap_2eproto();

  void InitAsDefaultInstance();
  static string_table_t* default_instance_;
};
// -------------------------------------------------------------------

class basic_group_t : public ::google::protobuf::Message {
 public:
  basic_group_t();
  virtual ~basic_group_t();

  basic_group_t(const basic_group_t& from);

  inline basic_group_t& operator=(const basic_group_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const basic_group_t& default_instance();

  void UnsafeArenaSwap(basic_group_t* other);
  void Swap(basic_group_t* other);

  // implements Message ----------------------------------------------

  inline basic_group_t* New() const { return New(NULL); }

  basic_group_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const basic_group_t& from);
  void MergeFrom(const basic_group_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(basic_group_t* other);
  protected:
  explicit basic_group_t(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .geo_base.open_street_map.proto.node_t nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  const ::geo_base::open_street_map::proto::node_t& nodes(int index) const;
  ::geo_base::open_street_map::proto::node_t* mutable_nodes(int index);
  ::geo_base::open_street_map::proto::node_t* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::node_t >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::node_t >&
      nodes() const;

  // optional .geo_base.open_street_map.proto.dense_nodes_t dense_nodes = 2;
  bool has_dense_nodes() const;
  void clear_dense_nodes();
  static const int kDenseNodesFieldNumber = 2;
  private:
  void _slow_mutable_dense_nodes();
  void _slow_set_allocated_dense_nodes(
      ::google::protobuf::Arena* message_arena, ::geo_base::open_street_map::proto::dense_nodes_t** dense_nodes);
  ::geo_base::open_street_map::proto::dense_nodes_t* _slow_release_dense_nodes();
  public:
  const ::geo_base::open_street_map::proto::dense_nodes_t& dense_nodes() const;
  ::geo_base::open_street_map::proto::dense_nodes_t* mutable_dense_nodes();
  ::geo_base::open_street_map::proto::dense_nodes_t* release_dense_nodes();
  void set_allocated_dense_nodes(::geo_base::open_street_map::proto::dense_nodes_t* dense_nodes);
  ::geo_base::open_street_map::proto::dense_nodes_t* unsafe_arena_release_dense_nodes();
  void unsafe_arena_set_allocated_dense_nodes(
      ::geo_base::open_street_map::proto::dense_nodes_t* dense_nodes);

  // repeated .geo_base.open_street_map.proto.way_t ways = 3;
  int ways_size() const;
  void clear_ways();
  static const int kWaysFieldNumber = 3;
  const ::geo_base::open_street_map::proto::way_t& ways(int index) const;
  ::geo_base::open_street_map::proto::way_t* mutable_ways(int index);
  ::geo_base::open_street_map::proto::way_t* add_ways();
  ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::way_t >*
      mutable_ways();
  const ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::way_t >&
      ways() const;

  // repeated .geo_base.open_street_map.proto.relation_t relations = 4;
  int relations_size() const;
  void clear_relations();
  static const int kRelationsFieldNumber = 4;
  const ::geo_base::open_street_map::proto::relation_t& relations(int index) const;
  ::geo_base::open_street_map::proto::relation_t* mutable_relations(int index);
  ::geo_base::open_street_map::proto::relation_t* add_relations();
  ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::relation_t >*
      mutable_relations();
  const ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::relation_t >&
      relations() const;

  // @@protoc_insertion_point(class_scope:geo_base.open_street_map.proto.basic_group_t)
 private:
  inline void set_has_dense_nodes();
  inline void clear_has_dense_nodes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::node_t > nodes_;
  ::geo_base::open_street_map::proto::dense_nodes_t* dense_nodes_;
  ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::way_t > ways_;
  ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::relation_t > relations_;
  friend void  protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_AssignDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_ShutdownFile_open_5fstreet_5fmap_2eproto();

  void InitAsDefaultInstance();
  static basic_group_t* default_instance_;
};
// -------------------------------------------------------------------

class basic_block_t : public ::google::protobuf::Message {
 public:
  basic_block_t();
  virtual ~basic_block_t();

  basic_block_t(const basic_block_t& from);

  inline basic_block_t& operator=(const basic_block_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const basic_block_t& default_instance();

  void UnsafeArenaSwap(basic_block_t* other);
  void Swap(basic_block_t* other);

  // implements Message ----------------------------------------------

  inline basic_block_t* New() const { return New(NULL); }

  basic_block_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const basic_block_t& from);
  void MergeFrom(const basic_block_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(basic_block_t* other);
  protected:
  explicit basic_block_t(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .geo_base.open_street_map.proto.string_table_t string_table = 1;
  bool has_string_table() const;
  void clear_string_table();
  static const int kStringTableFieldNumber = 1;
  private:
  void _slow_mutable_string_table();
  void _slow_set_allocated_string_table(
      ::google::protobuf::Arena* message_arena, ::geo_base::open_street_map::proto::string_table_t** string_table);
  ::geo_base::open_street_map::proto::string_table_t* _slow_release_string_table();
  public:
  const ::geo_base::open_street_map::proto::string_table_t& string_table() const;
  ::geo_base::open_street_map::proto::string_table_t* mutable_string_table();
  ::geo_base::open_street_map::proto::string_table_t* release_string_table();
  void set_allocated_string_table(::geo_base::open_street_map::proto::string_table_t* string_table);
  ::geo_base::open_street_map::proto::string_table_t* unsafe_arena_release_string_table();
  void unsafe_arena_set_allocated_string_table(
      ::geo_base::open_street_map::proto::string_table_t* string_table);

  // repeated .geo_base.open_street_map.proto.basic_group_t basic_groups = 2;
  int basic_groups_size() const;
  void clear_basic_groups();
  static const int kBasicGroupsFieldNumber = 2;
  const ::geo_base::open_street_map::proto::basic_group_t& basic_groups(int index) const;
  ::geo_base::open_street_map::proto::basic_group_t* mutable_basic_groups(int index);
  ::geo_base::open_street_map::proto::basic_group_t* add_basic_groups();
  ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::basic_group_t >*
      mutable_basic_groups();
  const ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::basic_group_t >&
      basic_groups() const;

  // optional int32 granularity = 17 [default = 100];
  bool has_granularity() const;
  void clear_granularity();
  static const int kGranularityFieldNumber = 17;
  ::google::protobuf::int32 granularity() const;
  void set_granularity(::google::protobuf::int32 value);

  // optional int64 lat_off = 19 [default = 0];
  bool has_lat_off() const;
  void clear_lat_off();
  static const int kLatOffFieldNumber = 19;
  ::google::protobuf::int64 lat_off() const;
  void set_lat_off(::google::protobuf::int64 value);

  // optional int64 lon_off = 20 [default = 0];
  bool has_lon_off() const;
  void clear_lon_off();
  static const int kLonOffFieldNumber = 20;
  ::google::protobuf::int64 lon_off() const;
  void set_lon_off(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:geo_base.open_street_map.proto.basic_block_t)
 private:
  inline void set_has_string_table();
  inline void clear_has_string_table();
  inline void set_has_granularity();
  inline void clear_has_granularity();
  inline void set_has_lat_off();
  inline void clear_has_lat_off();
  inline void set_has_lon_off();
  inline void clear_has_lon_off();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::geo_base::open_street_map::proto::string_table_t* string_table_;
  ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::basic_group_t > basic_groups_;
  ::google::protobuf::int64 lat_off_;
  ::google::protobuf::int64 lon_off_;
  ::google::protobuf::int32 granularity_;
  friend void  protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_AssignDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_ShutdownFile_open_5fstreet_5fmap_2eproto();

  void InitAsDefaultInstance();
  static basic_block_t* default_instance_;
};
// -------------------------------------------------------------------

class node_t : public ::google::protobuf::Message {
 public:
  node_t();
  virtual ~node_t();

  node_t(const node_t& from);

  inline node_t& operator=(const node_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const node_t& default_instance();

  void UnsafeArenaSwap(node_t* other);
  void Swap(node_t* other);

  // implements Message ----------------------------------------------

  inline node_t* New() const { return New(NULL); }

  node_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node_t& from);
  void MergeFrom(const node_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(node_t* other);
  protected:
  explicit node_t(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // repeated uint32 keys = 2 [packed = true];
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 2;
  ::google::protobuf::uint32 keys(int index) const;
  void set_keys(int index, ::google::protobuf::uint32 value);
  void add_keys(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      keys() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_keys();

  // repeated uint32 vals = 3 [packed = true];
  int vals_size() const;
  void clear_vals();
  static const int kValsFieldNumber = 3;
  ::google::protobuf::uint32 vals(int index) const;
  void set_vals(int index, ::google::protobuf::uint32 value);
  void add_vals(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vals() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vals();

  // required sint64 lat = 8;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 8;
  ::google::protobuf::int64 lat() const;
  void set_lat(::google::protobuf::int64 value);

  // required sint64 lon = 9;
  bool has_lon() const;
  void clear_lon();
  static const int kLonFieldNumber = 9;
  ::google::protobuf::int64 lon() const;
  void set_lon(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:geo_base.open_street_map.proto.node_t)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lon();
  inline void clear_has_lon();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > keys_;
  mutable int _keys_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vals_;
  mutable int _vals_cached_byte_size_;
  ::google::protobuf::int64 lat_;
  ::google::protobuf::int64 lon_;
  friend void  protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_AssignDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_ShutdownFile_open_5fstreet_5fmap_2eproto();

  void InitAsDefaultInstance();
  static node_t* default_instance_;
};
// -------------------------------------------------------------------

class dense_nodes_t : public ::google::protobuf::Message {
 public:
  dense_nodes_t();
  virtual ~dense_nodes_t();

  dense_nodes_t(const dense_nodes_t& from);

  inline dense_nodes_t& operator=(const dense_nodes_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const dense_nodes_t& default_instance();

  void UnsafeArenaSwap(dense_nodes_t* other);
  void Swap(dense_nodes_t* other);

  // implements Message ----------------------------------------------

  inline dense_nodes_t* New() const { return New(NULL); }

  dense_nodes_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dense_nodes_t& from);
  void MergeFrom(const dense_nodes_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(dense_nodes_t* other);
  protected:
  explicit dense_nodes_t(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint64 id = 1 [packed = true];
  int id_size() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id(int index) const;
  void set_id(int index, ::google::protobuf::int64 value);
  void add_id(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_id();

  // repeated sint64 lat = 8 [packed = true];
  int lat_size() const;
  void clear_lat();
  static const int kLatFieldNumber = 8;
  ::google::protobuf::int64 lat(int index) const;
  void set_lat(int index, ::google::protobuf::int64 value);
  void add_lat(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      lat() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_lat();

  // repeated sint64 lon = 9 [packed = true];
  int lon_size() const;
  void clear_lon();
  static const int kLonFieldNumber = 9;
  ::google::protobuf::int64 lon(int index) const;
  void set_lon(int index, ::google::protobuf::int64 value);
  void add_lon(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      lon() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_lon();

  // repeated int32 kvs = 10 [packed = true];
  int kvs_size() const;
  void clear_kvs();
  static const int kKvsFieldNumber = 10;
  ::google::protobuf::int32 kvs(int index) const;
  void set_kvs(int index, ::google::protobuf::int32 value);
  void add_kvs(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      kvs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_kvs();

  // @@protoc_insertion_point(class_scope:geo_base.open_street_map.proto.dense_nodes_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > id_;
  mutable int _id_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > lat_;
  mutable int _lat_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > lon_;
  mutable int _lon_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > kvs_;
  mutable int _kvs_cached_byte_size_;
  friend void  protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_AssignDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_ShutdownFile_open_5fstreet_5fmap_2eproto();

  void InitAsDefaultInstance();
  static dense_nodes_t* default_instance_;
};
// -------------------------------------------------------------------

class way_t : public ::google::protobuf::Message {
 public:
  way_t();
  virtual ~way_t();

  way_t(const way_t& from);

  inline way_t& operator=(const way_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const way_t& default_instance();

  void UnsafeArenaSwap(way_t* other);
  void Swap(way_t* other);

  // implements Message ----------------------------------------------

  inline way_t* New() const { return New(NULL); }

  way_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const way_t& from);
  void MergeFrom(const way_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(way_t* other);
  protected:
  explicit way_t(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // repeated uint32 keys = 2 [packed = true];
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 2;
  ::google::protobuf::uint32 keys(int index) const;
  void set_keys(int index, ::google::protobuf::uint32 value);
  void add_keys(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      keys() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_keys();

  // repeated uint32 vals = 3 [packed = true];
  int vals_size() const;
  void clear_vals();
  static const int kValsFieldNumber = 3;
  ::google::protobuf::uint32 vals(int index) const;
  void set_vals(int index, ::google::protobuf::uint32 value);
  void add_vals(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vals() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vals();

  // repeated sint64 refs = 8 [packed = true];
  int refs_size() const;
  void clear_refs();
  static const int kRefsFieldNumber = 8;
  ::google::protobuf::int64 refs(int index) const;
  void set_refs(int index, ::google::protobuf::int64 value);
  void add_refs(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      refs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_refs();

  // @@protoc_insertion_point(class_scope:geo_base.open_street_map.proto.way_t)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > keys_;
  mutable int _keys_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vals_;
  mutable int _vals_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > refs_;
  mutable int _refs_cached_byte_size_;
  friend void  protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_AssignDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_ShutdownFile_open_5fstreet_5fmap_2eproto();

  void InitAsDefaultInstance();
  static way_t* default_instance_;
};
// -------------------------------------------------------------------

class relation_t : public ::google::protobuf::Message {
 public:
  relation_t();
  virtual ~relation_t();

  relation_t(const relation_t& from);

  inline relation_t& operator=(const relation_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const relation_t& default_instance();

  void UnsafeArenaSwap(relation_t* other);
  void Swap(relation_t* other);

  // implements Message ----------------------------------------------

  inline relation_t* New() const { return New(NULL); }

  relation_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const relation_t& from);
  void MergeFrom(const relation_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(relation_t* other);
  protected:
  explicit relation_t(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef relation_t_member_type_t member_type_t;
  static const member_type_t NODE = relation_t_member_type_t_NODE;
  static const member_type_t WAY = relation_t_member_type_t_WAY;
  static const member_type_t RELATION = relation_t_member_type_t_RELATION;
  static inline bool member_type_t_IsValid(int value) {
    return relation_t_member_type_t_IsValid(value);
  }
  static const member_type_t member_type_t_MIN =
    relation_t_member_type_t_member_type_t_MIN;
  static const member_type_t member_type_t_MAX =
    relation_t_member_type_t_member_type_t_MAX;
  static const int member_type_t_ARRAYSIZE =
    relation_t_member_type_t_member_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  member_type_t_descriptor() {
    return relation_t_member_type_t_descriptor();
  }
  static inline const ::std::string& member_type_t_Name(member_type_t value) {
    return relation_t_member_type_t_Name(value);
  }
  static inline bool member_type_t_Parse(const ::std::string& name,
      member_type_t* value) {
    return relation_t_member_type_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // repeated uint32 keys = 2 [packed = true];
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 2;
  ::google::protobuf::uint32 keys(int index) const;
  void set_keys(int index, ::google::protobuf::uint32 value);
  void add_keys(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      keys() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_keys();

  // repeated uint32 vals = 3 [packed = true];
  int vals_size() const;
  void clear_vals();
  static const int kValsFieldNumber = 3;
  ::google::protobuf::uint32 vals(int index) const;
  void set_vals(int index, ::google::protobuf::uint32 value);
  void add_vals(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vals() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vals();

  // repeated int32 roles_sid = 8 [packed = true];
  int roles_sid_size() const;
  void clear_roles_sid();
  static const int kRolesSidFieldNumber = 8;
  ::google::protobuf::int32 roles_sid(int index) const;
  void set_roles_sid(int index, ::google::protobuf::int32 value);
  void add_roles_sid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      roles_sid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_roles_sid();

  // repeated sint64 member_ids = 9 [packed = true];
  int member_ids_size() const;
  void clear_member_ids();
  static const int kMemberIdsFieldNumber = 9;
  ::google::protobuf::int64 member_ids(int index) const;
  void set_member_ids(int index, ::google::protobuf::int64 value);
  void add_member_ids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      member_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_member_ids();

  // repeated .geo_base.open_street_map.proto.relation_t.member_type_t member_types = 10 [packed = true];
  int member_types_size() const;
  void clear_member_types();
  static const int kMemberTypesFieldNumber = 10;
  ::geo_base::open_street_map::proto::relation_t_member_type_t member_types(int index) const;
  void set_member_types(int index, ::geo_base::open_street_map::proto::relation_t_member_type_t value);
  void add_member_types(::geo_base::open_street_map::proto::relation_t_member_type_t value);
  const ::google::protobuf::RepeatedField<int>& member_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_member_types();

  // @@protoc_insertion_point(class_scope:geo_base.open_street_map.proto.relation_t)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > keys_;
  mutable int _keys_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vals_;
  mutable int _vals_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > roles_sid_;
  mutable int _roles_sid_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > member_ids_;
  mutable int _member_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> member_types_;
  mutable int _member_types_cached_byte_size_;
  friend void  protobuf_AddDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_AssignDesc_open_5fstreet_5fmap_2eproto();
  friend void protobuf_ShutdownFile_open_5fstreet_5fmap_2eproto();

  void InitAsDefaultInstance();
  static relation_t* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// blob_t

// optional bytes raw = 1;
inline bool blob_t::has_raw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blob_t::set_has_raw() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blob_t::clear_has_raw() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blob_t::clear_raw() {
  raw_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_raw();
}
inline const ::std::string& blob_t::raw() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_t.raw)
  return raw_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void blob_t::set_raw(const ::std::string& value) {
  set_has_raw();
  raw_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_t.raw)
}
inline void blob_t::set_raw(const char* value) {
  set_has_raw();
  raw_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.open_street_map.proto.blob_t.raw)
}
inline void blob_t::set_raw(const void* value,
    size_t size) {
  set_has_raw();
  raw_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.open_street_map.proto.blob_t.raw)
}
inline ::std::string* blob_t::mutable_raw() {
  set_has_raw();
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.blob_t.raw)
  return raw_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* blob_t::release_raw() {
  clear_has_raw();
  return raw_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* blob_t::unsafe_arena_release_raw() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_raw();
  return raw_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void blob_t::set_allocated_raw(::std::string* raw) {
  if (raw != NULL) {
    set_has_raw();
  } else {
    clear_has_raw();
  }
  raw_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_t.raw)
}
inline void blob_t::unsafe_arena_set_allocated_raw(
    ::std::string* raw) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (raw != NULL) {
    set_has_raw();
  } else {
    clear_has_raw();
  }
  raw_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      raw, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_t.raw)
}

// optional int32 raw_size = 2;
inline bool blob_t::has_raw_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blob_t::set_has_raw_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blob_t::clear_has_raw_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blob_t::clear_raw_size() {
  raw_size_ = 0;
  clear_has_raw_size();
}
inline ::google::protobuf::int32 blob_t::raw_size() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_t.raw_size)
  return raw_size_;
}
inline void blob_t::set_raw_size(::google::protobuf::int32 value) {
  set_has_raw_size();
  raw_size_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_t.raw_size)
}

// optional bytes zlib_data = 3;
inline bool blob_t::has_zlib_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blob_t::set_has_zlib_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blob_t::clear_has_zlib_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blob_t::clear_zlib_data() {
  zlib_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_zlib_data();
}
inline const ::std::string& blob_t::zlib_data() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_t.zlib_data)
  return zlib_data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void blob_t::set_zlib_data(const ::std::string& value) {
  set_has_zlib_data();
  zlib_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_t.zlib_data)
}
inline void blob_t::set_zlib_data(const char* value) {
  set_has_zlib_data();
  zlib_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.open_street_map.proto.blob_t.zlib_data)
}
inline void blob_t::set_zlib_data(const void* value,
    size_t size) {
  set_has_zlib_data();
  zlib_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.open_street_map.proto.blob_t.zlib_data)
}
inline ::std::string* blob_t::mutable_zlib_data() {
  set_has_zlib_data();
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.blob_t.zlib_data)
  return zlib_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* blob_t::release_zlib_data() {
  clear_has_zlib_data();
  return zlib_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* blob_t::unsafe_arena_release_zlib_data() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_zlib_data();
  return zlib_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void blob_t::set_allocated_zlib_data(::std::string* zlib_data) {
  if (zlib_data != NULL) {
    set_has_zlib_data();
  } else {
    clear_has_zlib_data();
  }
  zlib_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zlib_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_t.zlib_data)
}
inline void blob_t::unsafe_arena_set_allocated_zlib_data(
    ::std::string* zlib_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zlib_data != NULL) {
    set_has_zlib_data();
  } else {
    clear_has_zlib_data();
  }
  zlib_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zlib_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_t.zlib_data)
}

// optional bytes lzma_data = 4;
inline bool blob_t::has_lzma_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void blob_t::set_has_lzma_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void blob_t::clear_has_lzma_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void blob_t::clear_lzma_data() {
  lzma_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_lzma_data();
}
inline const ::std::string& blob_t::lzma_data() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_t.lzma_data)
  return lzma_data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void blob_t::set_lzma_data(const ::std::string& value) {
  set_has_lzma_data();
  lzma_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_t.lzma_data)
}
inline void blob_t::set_lzma_data(const char* value) {
  set_has_lzma_data();
  lzma_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.open_street_map.proto.blob_t.lzma_data)
}
inline void blob_t::set_lzma_data(const void* value,
    size_t size) {
  set_has_lzma_data();
  lzma_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.open_street_map.proto.blob_t.lzma_data)
}
inline ::std::string* blob_t::mutable_lzma_data() {
  set_has_lzma_data();
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.blob_t.lzma_data)
  return lzma_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* blob_t::release_lzma_data() {
  clear_has_lzma_data();
  return lzma_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* blob_t::unsafe_arena_release_lzma_data() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_lzma_data();
  return lzma_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void blob_t::set_allocated_lzma_data(::std::string* lzma_data) {
  if (lzma_data != NULL) {
    set_has_lzma_data();
  } else {
    clear_has_lzma_data();
  }
  lzma_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lzma_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_t.lzma_data)
}
inline void blob_t::unsafe_arena_set_allocated_lzma_data(
    ::std::string* lzma_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (lzma_data != NULL) {
    set_has_lzma_data();
  } else {
    clear_has_lzma_data();
  }
  lzma_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      lzma_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_t.lzma_data)
}

// -------------------------------------------------------------------

// blob_header_t

// required string type = 1;
inline bool blob_header_t::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blob_header_t::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blob_header_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blob_header_t::clear_type() {
  type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_type();
}
inline const ::std::string& blob_header_t::type() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_header_t.type)
  return type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void blob_header_t::set_type(const ::std::string& value) {
  set_has_type();
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_header_t.type)
}
inline void blob_header_t::set_type(const char* value) {
  set_has_type();
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.open_street_map.proto.blob_header_t.type)
}
inline void blob_header_t::set_type(const char* value,
    size_t size) {
  set_has_type();
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.open_street_map.proto.blob_header_t.type)
}
inline ::std::string* blob_header_t::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.blob_header_t.type)
  return type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* blob_header_t::release_type() {
  clear_has_type();
  return type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* blob_header_t::unsafe_arena_release_type() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_type();
  return type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void blob_header_t::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_header_t.type)
}
inline void blob_header_t::unsafe_arena_set_allocated_type(
    ::std::string* type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_header_t.type)
}

// optional bytes index_data = 2;
inline bool blob_header_t::has_index_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blob_header_t::set_has_index_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blob_header_t::clear_has_index_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blob_header_t::clear_index_data() {
  index_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_index_data();
}
inline const ::std::string& blob_header_t::index_data() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_header_t.index_data)
  return index_data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void blob_header_t::set_index_data(const ::std::string& value) {
  set_has_index_data();
  index_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_header_t.index_data)
}
inline void blob_header_t::set_index_data(const char* value) {
  set_has_index_data();
  index_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:geo_base.open_street_map.proto.blob_header_t.index_data)
}
inline void blob_header_t::set_index_data(const void* value,
    size_t size) {
  set_has_index_data();
  index_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:geo_base.open_street_map.proto.blob_header_t.index_data)
}
inline ::std::string* blob_header_t::mutable_index_data() {
  set_has_index_data();
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.blob_header_t.index_data)
  return index_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* blob_header_t::release_index_data() {
  clear_has_index_data();
  return index_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* blob_header_t::unsafe_arena_release_index_data() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_index_data();
  return index_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void blob_header_t::set_allocated_index_data(::std::string* index_data) {
  if (index_data != NULL) {
    set_has_index_data();
  } else {
    clear_has_index_data();
  }
  index_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_header_t.index_data)
}
inline void blob_header_t::unsafe_arena_set_allocated_index_data(
    ::std::string* index_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (index_data != NULL) {
    set_has_index_data();
  } else {
    clear_has_index_data();
  }
  index_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      index_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.blob_header_t.index_data)
}

// required int32 data_size = 3;
inline bool blob_header_t::has_data_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blob_header_t::set_has_data_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blob_header_t::clear_has_data_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blob_header_t::clear_data_size() {
  data_size_ = 0;
  clear_has_data_size();
}
inline ::google::protobuf::int32 blob_header_t::data_size() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.blob_header_t.data_size)
  return data_size_;
}
inline void blob_header_t::set_data_size(::google::protobuf::int32 value) {
  set_has_data_size();
  data_size_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.blob_header_t.data_size)
}

// -------------------------------------------------------------------

// string_table_t

// repeated bytes s = 1;
inline int string_table_t::s_size() const {
  return s_.size();
}
inline void string_table_t::clear_s() {
  s_.Clear();
}
inline const ::std::string& string_table_t::s(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.string_table_t.s)
  return s_.Get(index);
}
inline ::std::string* string_table_t::mutable_s(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.string_table_t.s)
  return s_.Mutable(index);
}
inline void string_table_t::set_s(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.string_table_t.s)
  s_.Mutable(index)->assign(value);
}
inline void string_table_t::set_s(int index, const char* value) {
  s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:geo_base.open_street_map.proto.string_table_t.s)
}
inline void string_table_t::set_s(int index, const void* value, size_t size) {
  s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:geo_base.open_street_map.proto.string_table_t.s)
}
inline ::std::string* string_table_t::add_s() {
  return s_.Add();
}
inline void string_table_t::add_s(const ::std::string& value) {
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.string_table_t.s)
}
inline void string_table_t::add_s(const char* value) {
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:geo_base.open_street_map.proto.string_table_t.s)
}
inline void string_table_t::add_s(const void* value, size_t size) {
  s_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:geo_base.open_street_map.proto.string_table_t.s)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
string_table_t::s() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.string_table_t.s)
  return s_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
string_table_t::mutable_s() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.string_table_t.s)
  return &s_;
}

// -------------------------------------------------------------------

// basic_group_t

// repeated .geo_base.open_street_map.proto.node_t nodes = 1;
inline int basic_group_t::nodes_size() const {
  return nodes_.size();
}
inline void basic_group_t::clear_nodes() {
  nodes_.Clear();
}
inline const ::geo_base::open_street_map::proto::node_t& basic_group_t::nodes(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_group_t.nodes)
  return nodes_.Get(index);
}
inline ::geo_base::open_street_map::proto::node_t* basic_group_t::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.basic_group_t.nodes)
  return nodes_.Mutable(index);
}
inline ::geo_base::open_street_map::proto::node_t* basic_group_t::add_nodes() {
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.basic_group_t.nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::node_t >*
basic_group_t::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.basic_group_t.nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::node_t >&
basic_group_t::nodes() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.basic_group_t.nodes)
  return nodes_;
}

// optional .geo_base.open_street_map.proto.dense_nodes_t dense_nodes = 2;
inline bool basic_group_t::has_dense_nodes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void basic_group_t::set_has_dense_nodes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void basic_group_t::clear_has_dense_nodes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void basic_group_t::clear_dense_nodes() {
  if (dense_nodes_ != NULL) dense_nodes_->::geo_base::open_street_map::proto::dense_nodes_t::Clear();
  clear_has_dense_nodes();
}
inline const ::geo_base::open_street_map::proto::dense_nodes_t& basic_group_t::dense_nodes() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_group_t.dense_nodes)
  return dense_nodes_ != NULL ? *dense_nodes_ : *default_instance_->dense_nodes_;
}
inline ::geo_base::open_street_map::proto::dense_nodes_t* basic_group_t::mutable_dense_nodes() {
  set_has_dense_nodes();
  if (dense_nodes_ == NULL) {
    _slow_mutable_dense_nodes();
  }
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.basic_group_t.dense_nodes)
  return dense_nodes_;
}
inline ::geo_base::open_street_map::proto::dense_nodes_t* basic_group_t::release_dense_nodes() {
  clear_has_dense_nodes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dense_nodes();
  } else {
    ::geo_base::open_street_map::proto::dense_nodes_t* temp = dense_nodes_;
    dense_nodes_ = NULL;
    return temp;
  }
}
inline  void basic_group_t::set_allocated_dense_nodes(::geo_base::open_street_map::proto::dense_nodes_t* dense_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dense_nodes_;
  }
  if (dense_nodes != NULL) {
    _slow_set_allocated_dense_nodes(message_arena, &dense_nodes);
  }
  dense_nodes_ = dense_nodes;
  if (dense_nodes) {
    set_has_dense_nodes();
  } else {
    clear_has_dense_nodes();
  }
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.basic_group_t.dense_nodes)
}

// repeated .geo_base.open_street_map.proto.way_t ways = 3;
inline int basic_group_t::ways_size() const {
  return ways_.size();
}
inline void basic_group_t::clear_ways() {
  ways_.Clear();
}
inline const ::geo_base::open_street_map::proto::way_t& basic_group_t::ways(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_group_t.ways)
  return ways_.Get(index);
}
inline ::geo_base::open_street_map::proto::way_t* basic_group_t::mutable_ways(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.basic_group_t.ways)
  return ways_.Mutable(index);
}
inline ::geo_base::open_street_map::proto::way_t* basic_group_t::add_ways() {
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.basic_group_t.ways)
  return ways_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::way_t >*
basic_group_t::mutable_ways() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.basic_group_t.ways)
  return &ways_;
}
inline const ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::way_t >&
basic_group_t::ways() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.basic_group_t.ways)
  return ways_;
}

// repeated .geo_base.open_street_map.proto.relation_t relations = 4;
inline int basic_group_t::relations_size() const {
  return relations_.size();
}
inline void basic_group_t::clear_relations() {
  relations_.Clear();
}
inline const ::geo_base::open_street_map::proto::relation_t& basic_group_t::relations(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_group_t.relations)
  return relations_.Get(index);
}
inline ::geo_base::open_street_map::proto::relation_t* basic_group_t::mutable_relations(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.basic_group_t.relations)
  return relations_.Mutable(index);
}
inline ::geo_base::open_street_map::proto::relation_t* basic_group_t::add_relations() {
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.basic_group_t.relations)
  return relations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::relation_t >*
basic_group_t::mutable_relations() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.basic_group_t.relations)
  return &relations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::relation_t >&
basic_group_t::relations() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.basic_group_t.relations)
  return relations_;
}

// -------------------------------------------------------------------

// basic_block_t

// required .geo_base.open_street_map.proto.string_table_t string_table = 1;
inline bool basic_block_t::has_string_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void basic_block_t::set_has_string_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void basic_block_t::clear_has_string_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void basic_block_t::clear_string_table() {
  if (string_table_ != NULL) string_table_->::geo_base::open_street_map::proto::string_table_t::Clear();
  clear_has_string_table();
}
inline const ::geo_base::open_street_map::proto::string_table_t& basic_block_t::string_table() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_block_t.string_table)
  return string_table_ != NULL ? *string_table_ : *default_instance_->string_table_;
}
inline ::geo_base::open_street_map::proto::string_table_t* basic_block_t::mutable_string_table() {
  set_has_string_table();
  if (string_table_ == NULL) {
    _slow_mutable_string_table();
  }
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.basic_block_t.string_table)
  return string_table_;
}
inline ::geo_base::open_street_map::proto::string_table_t* basic_block_t::release_string_table() {
  clear_has_string_table();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_string_table();
  } else {
    ::geo_base::open_street_map::proto::string_table_t* temp = string_table_;
    string_table_ = NULL;
    return temp;
  }
}
inline  void basic_block_t::set_allocated_string_table(::geo_base::open_street_map::proto::string_table_t* string_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete string_table_;
  }
  if (string_table != NULL) {
    _slow_set_allocated_string_table(message_arena, &string_table);
  }
  string_table_ = string_table;
  if (string_table) {
    set_has_string_table();
  } else {
    clear_has_string_table();
  }
  // @@protoc_insertion_point(field_set_allocated:geo_base.open_street_map.proto.basic_block_t.string_table)
}

// repeated .geo_base.open_street_map.proto.basic_group_t basic_groups = 2;
inline int basic_block_t::basic_groups_size() const {
  return basic_groups_.size();
}
inline void basic_block_t::clear_basic_groups() {
  basic_groups_.Clear();
}
inline const ::geo_base::open_street_map::proto::basic_group_t& basic_block_t::basic_groups(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_block_t.basic_groups)
  return basic_groups_.Get(index);
}
inline ::geo_base::open_street_map::proto::basic_group_t* basic_block_t::mutable_basic_groups(int index) {
  // @@protoc_insertion_point(field_mutable:geo_base.open_street_map.proto.basic_block_t.basic_groups)
  return basic_groups_.Mutable(index);
}
inline ::geo_base::open_street_map::proto::basic_group_t* basic_block_t::add_basic_groups() {
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.basic_block_t.basic_groups)
  return basic_groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::basic_group_t >*
basic_block_t::mutable_basic_groups() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.basic_block_t.basic_groups)
  return &basic_groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::geo_base::open_street_map::proto::basic_group_t >&
basic_block_t::basic_groups() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.basic_block_t.basic_groups)
  return basic_groups_;
}

// optional int32 granularity = 17 [default = 100];
inline bool basic_block_t::has_granularity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void basic_block_t::set_has_granularity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void basic_block_t::clear_has_granularity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void basic_block_t::clear_granularity() {
  granularity_ = 100;
  clear_has_granularity();
}
inline ::google::protobuf::int32 basic_block_t::granularity() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_block_t.granularity)
  return granularity_;
}
inline void basic_block_t::set_granularity(::google::protobuf::int32 value) {
  set_has_granularity();
  granularity_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.basic_block_t.granularity)
}

// optional int64 lat_off = 19 [default = 0];
inline bool basic_block_t::has_lat_off() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void basic_block_t::set_has_lat_off() {
  _has_bits_[0] |= 0x00000008u;
}
inline void basic_block_t::clear_has_lat_off() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void basic_block_t::clear_lat_off() {
  lat_off_ = GOOGLE_LONGLONG(0);
  clear_has_lat_off();
}
inline ::google::protobuf::int64 basic_block_t::lat_off() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_block_t.lat_off)
  return lat_off_;
}
inline void basic_block_t::set_lat_off(::google::protobuf::int64 value) {
  set_has_lat_off();
  lat_off_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.basic_block_t.lat_off)
}

// optional int64 lon_off = 20 [default = 0];
inline bool basic_block_t::has_lon_off() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void basic_block_t::set_has_lon_off() {
  _has_bits_[0] |= 0x00000010u;
}
inline void basic_block_t::clear_has_lon_off() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void basic_block_t::clear_lon_off() {
  lon_off_ = GOOGLE_LONGLONG(0);
  clear_has_lon_off();
}
inline ::google::protobuf::int64 basic_block_t::lon_off() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.basic_block_t.lon_off)
  return lon_off_;
}
inline void basic_block_t::set_lon_off(::google::protobuf::int64 value) {
  set_has_lon_off();
  lon_off_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.basic_block_t.lon_off)
}

// -------------------------------------------------------------------

// node_t

// required sint64 id = 1;
inline bool node_t::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void node_t::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void node_t::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void node_t::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 node_t::id() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.node_t.id)
  return id_;
}
inline void node_t::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.node_t.id)
}

// repeated uint32 keys = 2 [packed = true];
inline int node_t::keys_size() const {
  return keys_.size();
}
inline void node_t::clear_keys() {
  keys_.Clear();
}
inline ::google::protobuf::uint32 node_t::keys(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.node_t.keys)
  return keys_.Get(index);
}
inline void node_t::set_keys(int index, ::google::protobuf::uint32 value) {
  keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.node_t.keys)
}
inline void node_t::add_keys(::google::protobuf::uint32 value) {
  keys_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.node_t.keys)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
node_t::keys() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.node_t.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
node_t::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.node_t.keys)
  return &keys_;
}

// repeated uint32 vals = 3 [packed = true];
inline int node_t::vals_size() const {
  return vals_.size();
}
inline void node_t::clear_vals() {
  vals_.Clear();
}
inline ::google::protobuf::uint32 node_t::vals(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.node_t.vals)
  return vals_.Get(index);
}
inline void node_t::set_vals(int index, ::google::protobuf::uint32 value) {
  vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.node_t.vals)
}
inline void node_t::add_vals(::google::protobuf::uint32 value) {
  vals_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.node_t.vals)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
node_t::vals() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.node_t.vals)
  return vals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
node_t::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.node_t.vals)
  return &vals_;
}

// required sint64 lat = 8;
inline bool node_t::has_lat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void node_t::set_has_lat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void node_t::clear_has_lat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void node_t::clear_lat() {
  lat_ = GOOGLE_LONGLONG(0);
  clear_has_lat();
}
inline ::google::protobuf::int64 node_t::lat() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.node_t.lat)
  return lat_;
}
inline void node_t::set_lat(::google::protobuf::int64 value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.node_t.lat)
}

// required sint64 lon = 9;
inline bool node_t::has_lon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void node_t::set_has_lon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void node_t::clear_has_lon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void node_t::clear_lon() {
  lon_ = GOOGLE_LONGLONG(0);
  clear_has_lon();
}
inline ::google::protobuf::int64 node_t::lon() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.node_t.lon)
  return lon_;
}
inline void node_t::set_lon(::google::protobuf::int64 value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.node_t.lon)
}

// -------------------------------------------------------------------

// dense_nodes_t

// repeated sint64 id = 1 [packed = true];
inline int dense_nodes_t::id_size() const {
  return id_.size();
}
inline void dense_nodes_t::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int64 dense_nodes_t::id(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.dense_nodes_t.id)
  return id_.Get(index);
}
inline void dense_nodes_t::set_id(int index, ::google::protobuf::int64 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.dense_nodes_t.id)
}
inline void dense_nodes_t::add_id(::google::protobuf::int64 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.dense_nodes_t.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dense_nodes_t::id() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.dense_nodes_t.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dense_nodes_t::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.dense_nodes_t.id)
  return &id_;
}

// repeated sint64 lat = 8 [packed = true];
inline int dense_nodes_t::lat_size() const {
  return lat_.size();
}
inline void dense_nodes_t::clear_lat() {
  lat_.Clear();
}
inline ::google::protobuf::int64 dense_nodes_t::lat(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.dense_nodes_t.lat)
  return lat_.Get(index);
}
inline void dense_nodes_t::set_lat(int index, ::google::protobuf::int64 value) {
  lat_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.dense_nodes_t.lat)
}
inline void dense_nodes_t::add_lat(::google::protobuf::int64 value) {
  lat_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.dense_nodes_t.lat)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dense_nodes_t::lat() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.dense_nodes_t.lat)
  return lat_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dense_nodes_t::mutable_lat() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.dense_nodes_t.lat)
  return &lat_;
}

// repeated sint64 lon = 9 [packed = true];
inline int dense_nodes_t::lon_size() const {
  return lon_.size();
}
inline void dense_nodes_t::clear_lon() {
  lon_.Clear();
}
inline ::google::protobuf::int64 dense_nodes_t::lon(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.dense_nodes_t.lon)
  return lon_.Get(index);
}
inline void dense_nodes_t::set_lon(int index, ::google::protobuf::int64 value) {
  lon_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.dense_nodes_t.lon)
}
inline void dense_nodes_t::add_lon(::google::protobuf::int64 value) {
  lon_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.dense_nodes_t.lon)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dense_nodes_t::lon() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.dense_nodes_t.lon)
  return lon_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dense_nodes_t::mutable_lon() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.dense_nodes_t.lon)
  return &lon_;
}

// repeated int32 kvs = 10 [packed = true];
inline int dense_nodes_t::kvs_size() const {
  return kvs_.size();
}
inline void dense_nodes_t::clear_kvs() {
  kvs_.Clear();
}
inline ::google::protobuf::int32 dense_nodes_t::kvs(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.dense_nodes_t.kvs)
  return kvs_.Get(index);
}
inline void dense_nodes_t::set_kvs(int index, ::google::protobuf::int32 value) {
  kvs_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.dense_nodes_t.kvs)
}
inline void dense_nodes_t::add_kvs(::google::protobuf::int32 value) {
  kvs_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.dense_nodes_t.kvs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
dense_nodes_t::kvs() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.dense_nodes_t.kvs)
  return kvs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
dense_nodes_t::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.dense_nodes_t.kvs)
  return &kvs_;
}

// -------------------------------------------------------------------

// way_t

// required int64 id = 1;
inline bool way_t::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void way_t::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void way_t::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void way_t::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 way_t::id() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.way_t.id)
  return id_;
}
inline void way_t::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.way_t.id)
}

// repeated uint32 keys = 2 [packed = true];
inline int way_t::keys_size() const {
  return keys_.size();
}
inline void way_t::clear_keys() {
  keys_.Clear();
}
inline ::google::protobuf::uint32 way_t::keys(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.way_t.keys)
  return keys_.Get(index);
}
inline void way_t::set_keys(int index, ::google::protobuf::uint32 value) {
  keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.way_t.keys)
}
inline void way_t::add_keys(::google::protobuf::uint32 value) {
  keys_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.way_t.keys)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
way_t::keys() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.way_t.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
way_t::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.way_t.keys)
  return &keys_;
}

// repeated uint32 vals = 3 [packed = true];
inline int way_t::vals_size() const {
  return vals_.size();
}
inline void way_t::clear_vals() {
  vals_.Clear();
}
inline ::google::protobuf::uint32 way_t::vals(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.way_t.vals)
  return vals_.Get(index);
}
inline void way_t::set_vals(int index, ::google::protobuf::uint32 value) {
  vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.way_t.vals)
}
inline void way_t::add_vals(::google::protobuf::uint32 value) {
  vals_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.way_t.vals)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
way_t::vals() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.way_t.vals)
  return vals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
way_t::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.way_t.vals)
  return &vals_;
}

// repeated sint64 refs = 8 [packed = true];
inline int way_t::refs_size() const {
  return refs_.size();
}
inline void way_t::clear_refs() {
  refs_.Clear();
}
inline ::google::protobuf::int64 way_t::refs(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.way_t.refs)
  return refs_.Get(index);
}
inline void way_t::set_refs(int index, ::google::protobuf::int64 value) {
  refs_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.way_t.refs)
}
inline void way_t::add_refs(::google::protobuf::int64 value) {
  refs_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.way_t.refs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
way_t::refs() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.way_t.refs)
  return refs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
way_t::mutable_refs() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.way_t.refs)
  return &refs_;
}

// -------------------------------------------------------------------

// relation_t

// required int64 id = 1;
inline bool relation_t::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void relation_t::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void relation_t::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void relation_t::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 relation_t::id() const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.relation_t.id)
  return id_;
}
inline void relation_t::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.relation_t.id)
}

// repeated uint32 keys = 2 [packed = true];
inline int relation_t::keys_size() const {
  return keys_.size();
}
inline void relation_t::clear_keys() {
  keys_.Clear();
}
inline ::google::protobuf::uint32 relation_t::keys(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.relation_t.keys)
  return keys_.Get(index);
}
inline void relation_t::set_keys(int index, ::google::protobuf::uint32 value) {
  keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.relation_t.keys)
}
inline void relation_t::add_keys(::google::protobuf::uint32 value) {
  keys_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.relation_t.keys)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
relation_t::keys() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.relation_t.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
relation_t::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.relation_t.keys)
  return &keys_;
}

// repeated uint32 vals = 3 [packed = true];
inline int relation_t::vals_size() const {
  return vals_.size();
}
inline void relation_t::clear_vals() {
  vals_.Clear();
}
inline ::google::protobuf::uint32 relation_t::vals(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.relation_t.vals)
  return vals_.Get(index);
}
inline void relation_t::set_vals(int index, ::google::protobuf::uint32 value) {
  vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.relation_t.vals)
}
inline void relation_t::add_vals(::google::protobuf::uint32 value) {
  vals_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.relation_t.vals)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
relation_t::vals() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.relation_t.vals)
  return vals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
relation_t::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.relation_t.vals)
  return &vals_;
}

// repeated int32 roles_sid = 8 [packed = true];
inline int relation_t::roles_sid_size() const {
  return roles_sid_.size();
}
inline void relation_t::clear_roles_sid() {
  roles_sid_.Clear();
}
inline ::google::protobuf::int32 relation_t::roles_sid(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.relation_t.roles_sid)
  return roles_sid_.Get(index);
}
inline void relation_t::set_roles_sid(int index, ::google::protobuf::int32 value) {
  roles_sid_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.relation_t.roles_sid)
}
inline void relation_t::add_roles_sid(::google::protobuf::int32 value) {
  roles_sid_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.relation_t.roles_sid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
relation_t::roles_sid() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.relation_t.roles_sid)
  return roles_sid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
relation_t::mutable_roles_sid() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.relation_t.roles_sid)
  return &roles_sid_;
}

// repeated sint64 member_ids = 9 [packed = true];
inline int relation_t::member_ids_size() const {
  return member_ids_.size();
}
inline void relation_t::clear_member_ids() {
  member_ids_.Clear();
}
inline ::google::protobuf::int64 relation_t::member_ids(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.relation_t.member_ids)
  return member_ids_.Get(index);
}
inline void relation_t::set_member_ids(int index, ::google::protobuf::int64 value) {
  member_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.relation_t.member_ids)
}
inline void relation_t::add_member_ids(::google::protobuf::int64 value) {
  member_ids_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.relation_t.member_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
relation_t::member_ids() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.relation_t.member_ids)
  return member_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
relation_t::mutable_member_ids() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.relation_t.member_ids)
  return &member_ids_;
}

// repeated .geo_base.open_street_map.proto.relation_t.member_type_t member_types = 10 [packed = true];
inline int relation_t::member_types_size() const {
  return member_types_.size();
}
inline void relation_t::clear_member_types() {
  member_types_.Clear();
}
inline ::geo_base::open_street_map::proto::relation_t_member_type_t relation_t::member_types(int index) const {
  // @@protoc_insertion_point(field_get:geo_base.open_street_map.proto.relation_t.member_types)
  return static_cast< ::geo_base::open_street_map::proto::relation_t_member_type_t >(member_types_.Get(index));
}
inline void relation_t::set_member_types(int index, ::geo_base::open_street_map::proto::relation_t_member_type_t value) {
  assert(::geo_base::open_street_map::proto::relation_t_member_type_t_IsValid(value));
  member_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:geo_base.open_street_map.proto.relation_t.member_types)
}
inline void relation_t::add_member_types(::geo_base::open_street_map::proto::relation_t_member_type_t value) {
  assert(::geo_base::open_street_map::proto::relation_t_member_type_t_IsValid(value));
  member_types_.Add(value);
  // @@protoc_insertion_point(field_add:geo_base.open_street_map.proto.relation_t.member_types)
}
inline const ::google::protobuf::RepeatedField<int>&
relation_t::member_types() const {
  // @@protoc_insertion_point(field_list:geo_base.open_street_map.proto.relation_t.member_types)
  return member_types_;
}
inline ::google::protobuf::RepeatedField<int>*
relation_t::mutable_member_types() {
  // @@protoc_insertion_point(field_mutable_list:geo_base.open_street_map.proto.relation_t.member_types)
  return &member_types_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace open_street_map
}  // namespace geo_base

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::geo_base::open_street_map::proto::relation_t_member_type_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::geo_base::open_street_map::proto::relation_t_member_type_t>() {
  return ::geo_base::open_street_map::proto::relation_t_member_type_t_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_open_5fstreet_5fmap_2eproto__INCLUDED
